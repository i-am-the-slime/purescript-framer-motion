(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __reExport = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toModule = (module) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };

  // output/Control.Apply/foreign.js
  var require_foreign = __commonJS({
    "output/Control.Apply/foreign.js"(exports) {
      "use strict";
      exports.arrayApply = function(fs) {
        return function(xs) {
          var l = fs.length;
          var k = xs.length;
          var result = new Array(l * k);
          var n = 0;
          for (var i = 0; i < l; i++) {
            var f = fs[i];
            for (var j = 0; j < k; j++) {
              result[n++] = f(xs[j]);
            }
          }
          return result;
        };
      };
    }
  });

  // output/Control.Semigroupoid/index.js
  var require_Control = __commonJS({
    "output/Control.Semigroupoid/index.js"(exports, module) {
      "use strict";
      var semigroupoidFn = {
        compose: function(f) {
          return function(g) {
            return function(x) {
              return f(g(x));
            };
          };
        }
      };
      var compose = function(dict) {
        return dict.compose;
      };
      var composeFlipped = function(dictSemigroupoid) {
        return function(f) {
          return function(g) {
            return compose(dictSemigroupoid)(g)(f);
          };
        };
      };
      module.exports = {
        compose,
        composeFlipped,
        semigroupoidFn
      };
    }
  });

  // output/Control.Category/index.js
  var require_Control2 = __commonJS({
    "output/Control.Category/index.js"(exports, module) {
      "use strict";
      var Control_Semigroupoid = require_Control();
      var identity = function(dict) {
        return dict.identity;
      };
      var categoryFn = {
        identity: function(x) {
          return x;
        },
        Semigroupoid0: function() {
          return Control_Semigroupoid.semigroupoidFn;
        }
      };
      module.exports = {
        identity,
        categoryFn,
        compose: Control_Semigroupoid.compose
      };
    }
  });

  // output/Data.Boolean/index.js
  var require_Data = __commonJS({
    "output/Data.Boolean/index.js"(exports, module) {
      "use strict";
      var otherwise = true;
      module.exports = {
        otherwise
      };
    }
  });

  // output/Data.Function/index.js
  var require_Data2 = __commonJS({
    "output/Data.Function/index.js"(exports, module) {
      "use strict";
      var Control_Category = require_Control2();
      var Data_Boolean = require_Data();
      var on = function(f) {
        return function(g) {
          return function(x) {
            return function(y) {
              return f(g(x))(g(y));
            };
          };
        };
      };
      var flip = function(f) {
        return function(b) {
          return function(a) {
            return f(a)(b);
          };
        };
      };
      var $$const = function(a) {
        return function(v) {
          return a;
        };
      };
      var applyN = function(f) {
        var go = function($copy_n) {
          return function($copy_acc) {
            var $tco_var_n = $copy_n;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(n, acc) {
              if (n <= 0) {
                $tco_done = true;
                return acc;
              }
              ;
              if (Data_Boolean.otherwise) {
                $tco_var_n = n - 1 | 0;
                $copy_acc = f(acc);
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.Function (line 100, column 3 - line 102, column 37): " + [n.constructor.name, acc.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_n, $copy_acc);
            }
            ;
            return $tco_result;
          };
        };
        return go;
      };
      var applyFlipped = function(x) {
        return function(f) {
          return f(x);
        };
      };
      var apply = function(f) {
        return function(x) {
          return f(x);
        };
      };
      module.exports = {
        flip,
        "const": $$const,
        apply,
        applyFlipped,
        applyN,
        on,
        compose: Control_Category.compose,
        identity: Control_Category.identity
      };
    }
  });

  // output/Data.Functor/foreign.js
  var require_foreign2 = __commonJS({
    "output/Data.Functor/foreign.js"(exports) {
      "use strict";
      exports.arrayMap = function(f) {
        return function(arr) {
          var l = arr.length;
          var result = new Array(l);
          for (var i = 0; i < l; i++) {
            result[i] = f(arr[i]);
          }
          return result;
        };
      };
    }
  });

  // output/Data.Unit/foreign.js
  var require_foreign3 = __commonJS({
    "output/Data.Unit/foreign.js"(exports) {
      "use strict";
      exports.unit = {};
    }
  });

  // output/Data.Unit/index.js
  var require_Data3 = __commonJS({
    "output/Data.Unit/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign3();
      var showUnit = {
        show: function(v) {
          return "unit";
        }
      };
      module.exports = {
        showUnit,
        unit: $foreign.unit
      };
    }
  });

  // output/Type.Proxy/index.js
  var require_Type = __commonJS({
    "output/Type.Proxy/index.js"(exports, module) {
      "use strict";
      var Proxy3 = function() {
        function Proxy32() {
        }
        ;
        Proxy32.value = new Proxy32();
        return Proxy32;
      }();
      var Proxy2 = function() {
        function Proxy22() {
        }
        ;
        Proxy22.value = new Proxy22();
        return Proxy22;
      }();
      var $$Proxy = function() {
        function $$Proxy2() {
        }
        ;
        $$Proxy2.value = new $$Proxy2();
        return $$Proxy2;
      }();
      module.exports = {
        "Proxy": $$Proxy,
        Proxy2,
        Proxy3
      };
    }
  });

  // output/Data.Functor/index.js
  var require_Data4 = __commonJS({
    "output/Data.Functor/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign2();
      var Control_Semigroupoid = require_Control();
      var Data_Function = require_Data2();
      var Data_Unit = require_Data3();
      var Type_Proxy = require_Type();
      var map = function(dict) {
        return dict.map;
      };
      var mapFlipped = function(dictFunctor) {
        return function(fa) {
          return function(f) {
            return map(dictFunctor)(f)(fa);
          };
        };
      };
      var $$void = function(dictFunctor) {
        return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
      };
      var voidLeft = function(dictFunctor) {
        return function(f) {
          return function(x) {
            return map(dictFunctor)(Data_Function["const"](x))(f);
          };
        };
      };
      var voidRight = function(dictFunctor) {
        return function(x) {
          return map(dictFunctor)(Data_Function["const"](x));
        };
      };
      var functorProxy = {
        map: function(v) {
          return function(v1) {
            return Type_Proxy["Proxy"].value;
          };
        }
      };
      var functorFn = {
        map: Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn)
      };
      var functorArray = {
        map: $foreign.arrayMap
      };
      var flap = function(dictFunctor) {
        return function(ff) {
          return function(x) {
            return map(dictFunctor)(function(f) {
              return f(x);
            })(ff);
          };
        };
      };
      module.exports = {
        map,
        mapFlipped,
        "void": $$void,
        voidRight,
        voidLeft,
        flap,
        functorFn,
        functorArray,
        functorProxy
      };
    }
  });

  // output/Control.Apply/index.js
  var require_Control3 = __commonJS({
    "output/Control.Apply/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign();
      var Control_Category = require_Control2();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Type_Proxy = require_Type();
      var applyProxy = {
        apply: function(v) {
          return function(v1) {
            return Type_Proxy["Proxy"].value;
          };
        },
        Functor0: function() {
          return Data_Functor.functorProxy;
        }
      };
      var applyFn = {
        apply: function(f) {
          return function(g) {
            return function(x) {
              return f(x)(g(x));
            };
          };
        },
        Functor0: function() {
          return Data_Functor.functorFn;
        }
      };
      var applyArray = {
        apply: $foreign.arrayApply,
        Functor0: function() {
          return Data_Functor.functorArray;
        }
      };
      var apply = function(dict) {
        return dict.apply;
      };
      var applyFirst = function(dictApply) {
        return function(a) {
          return function(b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
        };
      };
      var applySecond = function(dictApply) {
        return function(a) {
          return function(b) {
            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
        };
      };
      var lift2 = function(dictApply) {
        return function(f) {
          return function(a) {
            return function(b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
            };
          };
        };
      };
      var lift3 = function(dictApply) {
        return function(f) {
          return function(a) {
            return function(b) {
              return function(c) {
                return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);
              };
            };
          };
        };
      };
      var lift4 = function(dictApply) {
        return function(f) {
          return function(a) {
            return function(b) {
              return function(c) {
                return function(d) {
                  return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);
                };
              };
            };
          };
        };
      };
      var lift5 = function(dictApply) {
        return function(f) {
          return function(a) {
            return function(b) {
              return function(c) {
                return function(d) {
                  return function(e) {
                    return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);
                  };
                };
              };
            };
          };
        };
      };
      module.exports = {
        apply,
        applyFirst,
        applySecond,
        lift2,
        lift3,
        lift4,
        lift5,
        applyFn,
        applyArray,
        applyProxy,
        map: Data_Functor.map,
        "void": Data_Functor["void"]
      };
    }
  });

  // output/Control.Applicative/index.js
  var require_Control4 = __commonJS({
    "output/Control.Applicative/index.js"(exports, module) {
      "use strict";
      var Control_Apply = require_Control3();
      var Data_Functor = require_Data4();
      var Data_Unit = require_Data3();
      var Type_Proxy = require_Type();
      var pure = function(dict) {
        return dict.pure;
      };
      var unless = function(dictApplicative) {
        return function(v) {
          return function(v1) {
            if (!v) {
              return v1;
            }
            ;
            if (v) {
              return pure(dictApplicative)(Data_Unit.unit);
            }
            ;
            throw new Error("Failed pattern match at Control.Applicative (line 66, column 1 - line 66, column 65): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      };
      var when = function(dictApplicative) {
        return function(v) {
          return function(v1) {
            if (v) {
              return v1;
            }
            ;
            if (!v) {
              return pure(dictApplicative)(Data_Unit.unit);
            }
            ;
            throw new Error("Failed pattern match at Control.Applicative (line 61, column 1 - line 61, column 63): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      };
      var liftA1 = function(dictApplicative) {
        return function(f) {
          return function(a) {
            return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
        };
      };
      var applicativeProxy = {
        pure: function(v) {
          return Type_Proxy["Proxy"].value;
        },
        Apply0: function() {
          return Control_Apply.applyProxy;
        }
      };
      var applicativeFn = {
        pure: function(x) {
          return function(v) {
            return x;
          };
        },
        Apply0: function() {
          return Control_Apply.applyFn;
        }
      };
      var applicativeArray = {
        pure: function(x) {
          return [x];
        },
        Apply0: function() {
          return Control_Apply.applyArray;
        }
      };
      module.exports = {
        pure,
        liftA1,
        unless,
        when,
        applicativeFn,
        applicativeArray,
        applicativeProxy,
        apply: Control_Apply.apply,
        map: Data_Functor.map,
        "void": Data_Functor["void"]
      };
    }
  });

  // output/Control.Bind/foreign.js
  var require_foreign4 = __commonJS({
    "output/Control.Bind/foreign.js"(exports) {
      "use strict";
      exports.arrayBind = function(arr) {
        return function(f) {
          var result = [];
          for (var i = 0, l = arr.length; i < l; i++) {
            Array.prototype.push.apply(result, f(arr[i]));
          }
          return result;
        };
      };
    }
  });

  // output/Control.Bind/index.js
  var require_Control5 = __commonJS({
    "output/Control.Bind/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign4();
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Control_Category = require_Control2();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Type_Proxy = require_Type();
      var discard = function(dict) {
        return dict.discard;
      };
      var bindProxy = {
        bind: function(v) {
          return function(v1) {
            return Type_Proxy["Proxy"].value;
          };
        },
        Apply0: function() {
          return Control_Apply.applyProxy;
        }
      };
      var bindFn = {
        bind: function(m) {
          return function(f) {
            return function(x) {
              return f(m(x))(x);
            };
          };
        },
        Apply0: function() {
          return Control_Apply.applyFn;
        }
      };
      var bindArray = {
        bind: $foreign.arrayBind,
        Apply0: function() {
          return Control_Apply.applyArray;
        }
      };
      var bind = function(dict) {
        return dict.bind;
      };
      var bindFlipped = function(dictBind) {
        return Data_Function.flip(bind(dictBind));
      };
      var composeKleisliFlipped = function(dictBind) {
        return function(f) {
          return function(g) {
            return function(a) {
              return bindFlipped(dictBind)(f)(g(a));
            };
          };
        };
      };
      var composeKleisli = function(dictBind) {
        return function(f) {
          return function(g) {
            return function(a) {
              return bind(dictBind)(f(a))(g);
            };
          };
        };
      };
      var discardProxy = {
        discard: function(dictBind) {
          return bind(dictBind);
        }
      };
      var discardProxy2 = {
        discard: function(dictBind) {
          return bind(dictBind);
        }
      };
      var discardProxy3 = {
        discard: function(dictBind) {
          return bind(dictBind);
        }
      };
      var discardUnit = {
        discard: function(dictBind) {
          return bind(dictBind);
        }
      };
      var ifM = function(dictBind) {
        return function(cond) {
          return function(t) {
            return function(f) {
              return bind(dictBind)(cond)(function(cond$prime) {
                if (cond$prime) {
                  return t;
                }
                ;
                return f;
              });
            };
          };
        };
      };
      var join = function(dictBind) {
        return function(m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
        };
      };
      module.exports = {
        bind,
        bindFlipped,
        discard,
        join,
        composeKleisli,
        composeKleisliFlipped,
        ifM,
        bindFn,
        bindArray,
        bindProxy,
        discardUnit,
        discardProxy,
        discardProxy2,
        discardProxy3,
        liftA1: Control_Applicative.liftA1,
        pure: Control_Applicative.pure,
        unless: Control_Applicative.unless,
        when: Control_Applicative.when,
        apply: Control_Apply.apply,
        map: Data_Functor.map,
        "void": Data_Functor["void"]
      };
    }
  });

  // output/Data.Semigroup/foreign.js
  var require_foreign5 = __commonJS({
    "output/Data.Semigroup/foreign.js"(exports) {
      "use strict";
      exports.concatString = function(s1) {
        return function(s2) {
          return s1 + s2;
        };
      };
      exports.concatArray = function(xs) {
        return function(ys) {
          if (xs.length === 0)
            return ys;
          if (ys.length === 0)
            return xs;
          return xs.concat(ys);
        };
      };
    }
  });

  // output/Data.Symbol/foreign.js
  var require_foreign6 = __commonJS({
    "output/Data.Symbol/foreign.js"(exports) {
      "use strict";
      exports.unsafeCoerce = function(arg) {
        return arg;
      };
    }
  });

  // output/Data.Symbol/index.js
  var require_Data5 = __commonJS({
    "output/Data.Symbol/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign6();
      var Type_Proxy = require_Type();
      var SProxy = function() {
        function SProxy2() {
        }
        ;
        SProxy2.value = new SProxy2();
        return SProxy2;
      }();
      var reifySymbol = function(s) {
        return function(f) {
          return $foreign.unsafeCoerce(function(dictIsSymbol) {
            return f(dictIsSymbol);
          })({
            reflectSymbol: function(v) {
              return s;
            }
          })(Type_Proxy["Proxy"].value);
        };
      };
      var reflectSymbol = function(dict) {
        return dict.reflectSymbol;
      };
      module.exports = {
        reflectSymbol,
        reifySymbol,
        SProxy
      };
    }
  });

  // output/Data.Void/index.js
  var require_Data6 = __commonJS({
    "output/Data.Void/index.js"(exports, module) {
      "use strict";
      var absurd = function(a) {
        var spin = function($copy_v) {
          var $tco_result;
          function $tco_loop(v) {
            $copy_v = v;
            return;
          }
          ;
          while (true) {
            $tco_result = $tco_loop($copy_v);
          }
          ;
          return $tco_result;
        };
        return spin(a);
      };
      var showVoid = {
        show: absurd
      };
      module.exports = {
        absurd,
        showVoid
      };
    }
  });

  // output/Record.Unsafe/foreign.js
  var require_foreign7 = __commonJS({
    "output/Record.Unsafe/foreign.js"(exports) {
      "use strict";
      exports.unsafeHas = function(label) {
        return function(rec) {
          return {}.hasOwnProperty.call(rec, label);
        };
      };
      exports.unsafeGet = function(label) {
        return function(rec) {
          return rec[label];
        };
      };
      exports.unsafeSet = function(label) {
        return function(value) {
          return function(rec) {
            var copy = {};
            for (var key in rec) {
              if ({}.hasOwnProperty.call(rec, key)) {
                copy[key] = rec[key];
              }
            }
            copy[label] = value;
            return copy;
          };
        };
      };
      exports.unsafeDelete = function(label) {
        return function(rec) {
          var copy = {};
          for (var key in rec) {
            if (key !== label && {}.hasOwnProperty.call(rec, key)) {
              copy[key] = rec[key];
            }
          }
          return copy;
        };
      };
    }
  });

  // output/Record.Unsafe/index.js
  var require_Record = __commonJS({
    "output/Record.Unsafe/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign7();
      module.exports = {
        unsafeHas: $foreign.unsafeHas,
        unsafeGet: $foreign.unsafeGet,
        unsafeSet: $foreign.unsafeSet,
        unsafeDelete: $foreign.unsafeDelete
      };
    }
  });

  // output/Data.Semigroup/index.js
  var require_Data7 = __commonJS({
    "output/Data.Semigroup/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign5();
      var Data_Symbol = require_Data5();
      var Data_Unit = require_Data3();
      var Data_Void = require_Data6();
      var Record_Unsafe = require_Record();
      var Type_Proxy = require_Type();
      var semigroupVoid = {
        append: function(v) {
          return Data_Void.absurd;
        }
      };
      var semigroupUnit = {
        append: function(v) {
          return function(v1) {
            return Data_Unit.unit;
          };
        }
      };
      var semigroupString = {
        append: $foreign.concatString
      };
      var semigroupRecordNil = {
        appendRecord: function(v) {
          return function(v1) {
            return function(v2) {
              return {};
            };
          };
        }
      };
      var semigroupProxy3 = {
        append: function(v) {
          return function(v1) {
            return Type_Proxy.Proxy3.value;
          };
        }
      };
      var semigroupProxy2 = {
        append: function(v) {
          return function(v1) {
            return Type_Proxy.Proxy2.value;
          };
        }
      };
      var semigroupProxy = {
        append: function(v) {
          return function(v1) {
            return Type_Proxy["Proxy"].value;
          };
        }
      };
      var semigroupArray = {
        append: $foreign.concatArray
      };
      var appendRecord = function(dict) {
        return dict.appendRecord;
      };
      var semigroupRecord = function(dictRowToList) {
        return function(dictSemigroupRecord) {
          return {
            append: appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)
          };
        };
      };
      var append = function(dict) {
        return dict.append;
      };
      var semigroupFn = function(dictSemigroup) {
        return {
          append: function(f) {
            return function(g) {
              return function(x) {
                return append(dictSemigroup)(f(x))(g(x));
              };
            };
          }
        };
      };
      var semigroupRecordCons = function(dictIsSymbol) {
        return function(dictCons) {
          return function(dictSemigroupRecord) {
            return function(dictSemigroup) {
              return {
                appendRecord: function(v) {
                  return function(ra) {
                    return function(rb) {
                      var tail = appendRecord(dictSemigroupRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      var get = Record_Unsafe.unsafeGet(key);
                      return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);
                    };
                  };
                }
              };
            };
          };
        };
      };
      module.exports = {
        append,
        appendRecord,
        semigroupString,
        semigroupUnit,
        semigroupVoid,
        semigroupFn,
        semigroupArray,
        semigroupProxy,
        semigroupProxy2,
        semigroupProxy3,
        semigroupRecord,
        semigroupRecordNil,
        semigroupRecordCons
      };
    }
  });

  // output/Control.Alt/index.js
  var require_Control6 = __commonJS({
    "output/Control.Alt/index.js"(exports, module) {
      "use strict";
      var Data_Functor = require_Data4();
      var Data_Semigroup = require_Data7();
      var altArray = {
        alt: Data_Semigroup.append(Data_Semigroup.semigroupArray),
        Functor0: function() {
          return Data_Functor.functorArray;
        }
      };
      var alt = function(dict) {
        return dict.alt;
      };
      module.exports = {
        alt,
        altArray,
        map: Data_Functor.map,
        "void": Data_Functor["void"]
      };
    }
  });

  // output/Data.Bounded/foreign.js
  var require_foreign8 = __commonJS({
    "output/Data.Bounded/foreign.js"(exports) {
      "use strict";
      exports.topInt = 2147483647;
      exports.bottomInt = -2147483648;
      exports.topChar = String.fromCharCode(65535);
      exports.bottomChar = String.fromCharCode(0);
      exports.topNumber = Number.POSITIVE_INFINITY;
      exports.bottomNumber = Number.NEGATIVE_INFINITY;
    }
  });

  // output/Data.Ord/foreign.js
  var require_foreign9 = __commonJS({
    "output/Data.Ord/foreign.js"(exports) {
      "use strict";
      var unsafeCompareImpl = function(lt) {
        return function(eq) {
          return function(gt) {
            return function(x) {
              return function(y) {
                return x < y ? lt : x === y ? eq : gt;
              };
            };
          };
        };
      };
      exports.ordBooleanImpl = unsafeCompareImpl;
      exports.ordIntImpl = unsafeCompareImpl;
      exports.ordNumberImpl = unsafeCompareImpl;
      exports.ordStringImpl = unsafeCompareImpl;
      exports.ordCharImpl = unsafeCompareImpl;
      exports.ordArrayImpl = function(f) {
        return function(xs) {
          return function(ys) {
            var i = 0;
            var xlen = xs.length;
            var ylen = ys.length;
            while (i < xlen && i < ylen) {
              var x = xs[i];
              var y = ys[i];
              var o = f(x)(y);
              if (o !== 0) {
                return o;
              }
              i++;
            }
            if (xlen === ylen) {
              return 0;
            } else if (xlen > ylen) {
              return -1;
            } else {
              return 1;
            }
          };
        };
      };
    }
  });

  // output/Data.Eq/foreign.js
  var require_foreign10 = __commonJS({
    "output/Data.Eq/foreign.js"(exports) {
      "use strict";
      var refEq = function(r1) {
        return function(r2) {
          return r1 === r2;
        };
      };
      exports.eqBooleanImpl = refEq;
      exports.eqIntImpl = refEq;
      exports.eqNumberImpl = refEq;
      exports.eqCharImpl = refEq;
      exports.eqStringImpl = refEq;
      exports.eqArrayImpl = function(f) {
        return function(xs) {
          return function(ys) {
            if (xs.length !== ys.length)
              return false;
            for (var i = 0; i < xs.length; i++) {
              if (!f(xs[i])(ys[i]))
                return false;
            }
            return true;
          };
        };
      };
    }
  });

  // output/Data.Eq/index.js
  var require_Data8 = __commonJS({
    "output/Data.Eq/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign10();
      var Data_Symbol = require_Data5();
      var Record_Unsafe = require_Record();
      var Type_Proxy = require_Type();
      var eqVoid = {
        eq: function(v) {
          return function(v1) {
            return true;
          };
        }
      };
      var eqUnit = {
        eq: function(v) {
          return function(v1) {
            return true;
          };
        }
      };
      var eqString = {
        eq: $foreign.eqStringImpl
      };
      var eqRowNil = {
        eqRecord: function(v) {
          return function(v1) {
            return function(v2) {
              return true;
            };
          };
        }
      };
      var eqRecord = function(dict) {
        return dict.eqRecord;
      };
      var eqRec = function(dictRowToList) {
        return function(dictEqRecord) {
          return {
            eq: eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)
          };
        };
      };
      var eqProxy3 = {
        eq: function(v) {
          return function(v1) {
            return true;
          };
        }
      };
      var eqProxy2 = {
        eq: function(v) {
          return function(v1) {
            return true;
          };
        }
      };
      var eqProxy = {
        eq: function(v) {
          return function(v1) {
            return true;
          };
        }
      };
      var eqNumber = {
        eq: $foreign.eqNumberImpl
      };
      var eqInt = {
        eq: $foreign.eqIntImpl
      };
      var eqChar = {
        eq: $foreign.eqCharImpl
      };
      var eqBoolean = {
        eq: $foreign.eqBooleanImpl
      };
      var eq1 = function(dict) {
        return dict.eq1;
      };
      var eq = function(dict) {
        return dict.eq;
      };
      var eqArray = function(dictEq) {
        return {
          eq: $foreign.eqArrayImpl(eq(dictEq))
        };
      };
      var eq1Array = {
        eq1: function(dictEq) {
          return eq(eqArray(dictEq));
        }
      };
      var eqRowCons = function(dictEqRecord) {
        return function(dictCons) {
          return function(dictIsSymbol) {
            return function(dictEq) {
              return {
                eqRecord: function(v) {
                  return function(ra) {
                    return function(rb) {
                      var tail = eqRecord(dictEqRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var get = Record_Unsafe.unsafeGet(key);
                      return eq(dictEq)(get(ra))(get(rb)) && tail;
                    };
                  };
                }
              };
            };
          };
        };
      };
      var notEq = function(dictEq) {
        return function(x) {
          return function(y) {
            return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
        };
      };
      var notEq1 = function(dictEq1) {
        return function(dictEq) {
          return function(x) {
            return function(y) {
              return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);
            };
          };
        };
      };
      module.exports = {
        eq,
        notEq,
        eq1,
        notEq1,
        eqRecord,
        eqBoolean,
        eqInt,
        eqNumber,
        eqChar,
        eqString,
        eqUnit,
        eqVoid,
        eqArray,
        eqRec,
        eqProxy,
        eqProxy2,
        eqProxy3,
        eq1Array,
        eqRowNil,
        eqRowCons
      };
    }
  });

  // output/Data.Ordering/index.js
  var require_Data9 = __commonJS({
    "output/Data.Ordering/index.js"(exports, module) {
      "use strict";
      var LT = function() {
        function LT2() {
        }
        ;
        LT2.value = new LT2();
        return LT2;
      }();
      var GT = function() {
        function GT2() {
        }
        ;
        GT2.value = new GT2();
        return GT2;
      }();
      var EQ = function() {
        function EQ2() {
        }
        ;
        EQ2.value = new EQ2();
        return EQ2;
      }();
      var showOrdering = {
        show: function(v) {
          if (v instanceof LT) {
            return "LT";
          }
          ;
          if (v instanceof GT) {
            return "GT";
          }
          ;
          if (v instanceof EQ) {
            return "EQ";
          }
          ;
          throw new Error("Failed pattern match at Data.Ordering (line 26, column 1 - line 29, column 17): " + [v.constructor.name]);
        }
      };
      var semigroupOrdering = {
        append: function(v) {
          return function(v1) {
            if (v instanceof LT) {
              return LT.value;
            }
            ;
            if (v instanceof GT) {
              return GT.value;
            }
            ;
            if (v instanceof EQ) {
              return v1;
            }
            ;
            throw new Error("Failed pattern match at Data.Ordering (line 21, column 1 - line 24, column 18): " + [v.constructor.name, v1.constructor.name]);
          };
        }
      };
      var invert = function(v) {
        if (v instanceof GT) {
          return LT.value;
        }
        ;
        if (v instanceof EQ) {
          return EQ.value;
        }
        ;
        if (v instanceof LT) {
          return GT.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Ordering (line 33, column 1 - line 33, column 31): " + [v.constructor.name]);
      };
      var eqOrdering = {
        eq: function(v) {
          return function(v1) {
            if (v instanceof LT && v1 instanceof LT) {
              return true;
            }
            ;
            if (v instanceof GT && v1 instanceof GT) {
              return true;
            }
            ;
            if (v instanceof EQ && v1 instanceof EQ) {
              return true;
            }
            ;
            return false;
          };
        }
      };
      module.exports = {
        LT,
        GT,
        EQ,
        invert,
        eqOrdering,
        semigroupOrdering,
        showOrdering
      };
    }
  });

  // output/Data.Ring/foreign.js
  var require_foreign11 = __commonJS({
    "output/Data.Ring/foreign.js"(exports) {
      "use strict";
      exports.intSub = function(x) {
        return function(y) {
          return x - y | 0;
        };
      };
      exports.numSub = function(n1) {
        return function(n2) {
          return n1 - n2;
        };
      };
    }
  });

  // output/Data.Semiring/foreign.js
  var require_foreign12 = __commonJS({
    "output/Data.Semiring/foreign.js"(exports) {
      "use strict";
      exports.intAdd = function(x) {
        return function(y) {
          return x + y | 0;
        };
      };
      exports.intMul = function(x) {
        return function(y) {
          return x * y | 0;
        };
      };
      exports.numAdd = function(n1) {
        return function(n2) {
          return n1 + n2;
        };
      };
      exports.numMul = function(n1) {
        return function(n2) {
          return n1 * n2;
        };
      };
    }
  });

  // output/Data.Semiring/index.js
  var require_Data10 = __commonJS({
    "output/Data.Semiring/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign12();
      var Data_Symbol = require_Data5();
      var Data_Unit = require_Data3();
      var Record_Unsafe = require_Record();
      var Type_Proxy = require_Type();
      var zeroRecord = function(dict) {
        return dict.zeroRecord;
      };
      var zero = function(dict) {
        return dict.zero;
      };
      var semiringUnit = {
        add: function(v) {
          return function(v1) {
            return Data_Unit.unit;
          };
        },
        zero: Data_Unit.unit,
        mul: function(v) {
          return function(v1) {
            return Data_Unit.unit;
          };
        },
        one: Data_Unit.unit
      };
      var semiringRecordNil = {
        addRecord: function(v) {
          return function(v1) {
            return function(v2) {
              return {};
            };
          };
        },
        mulRecord: function(v) {
          return function(v1) {
            return function(v2) {
              return {};
            };
          };
        },
        oneRecord: function(v) {
          return function(v1) {
            return {};
          };
        },
        zeroRecord: function(v) {
          return function(v1) {
            return {};
          };
        }
      };
      var semiringProxy3 = {
        add: function(v) {
          return function(v1) {
            return Type_Proxy.Proxy3.value;
          };
        },
        mul: function(v) {
          return function(v1) {
            return Type_Proxy.Proxy3.value;
          };
        },
        one: Type_Proxy.Proxy3.value,
        zero: Type_Proxy.Proxy3.value
      };
      var semiringProxy2 = {
        add: function(v) {
          return function(v1) {
            return Type_Proxy.Proxy2.value;
          };
        },
        mul: function(v) {
          return function(v1) {
            return Type_Proxy.Proxy2.value;
          };
        },
        one: Type_Proxy.Proxy2.value,
        zero: Type_Proxy.Proxy2.value
      };
      var semiringProxy = {
        add: function(v) {
          return function(v1) {
            return Type_Proxy["Proxy"].value;
          };
        },
        mul: function(v) {
          return function(v1) {
            return Type_Proxy["Proxy"].value;
          };
        },
        one: Type_Proxy["Proxy"].value,
        zero: Type_Proxy["Proxy"].value
      };
      var semiringNumber = {
        add: $foreign.numAdd,
        zero: 0,
        mul: $foreign.numMul,
        one: 1
      };
      var semiringInt = {
        add: $foreign.intAdd,
        zero: 0,
        mul: $foreign.intMul,
        one: 1
      };
      var oneRecord = function(dict) {
        return dict.oneRecord;
      };
      var one = function(dict) {
        return dict.one;
      };
      var mulRecord = function(dict) {
        return dict.mulRecord;
      };
      var mul = function(dict) {
        return dict.mul;
      };
      var addRecord = function(dict) {
        return dict.addRecord;
      };
      var semiringRecord = function(dictRowToList) {
        return function(dictSemiringRecord) {
          return {
            add: addRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value),
            mul: mulRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value),
            one: oneRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
            zero: zeroRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)
          };
        };
      };
      var add = function(dict) {
        return dict.add;
      };
      var semiringFn = function(dictSemiring) {
        return {
          add: function(f) {
            return function(g) {
              return function(x) {
                return add(dictSemiring)(f(x))(g(x));
              };
            };
          },
          zero: function(v) {
            return zero(dictSemiring);
          },
          mul: function(f) {
            return function(g) {
              return function(x) {
                return mul(dictSemiring)(f(x))(g(x));
              };
            };
          },
          one: function(v) {
            return one(dictSemiring);
          }
        };
      };
      var semiringRecordCons = function(dictIsSymbol) {
        return function(dictCons) {
          return function(dictSemiringRecord) {
            return function(dictSemiring) {
              return {
                addRecord: function(v) {
                  return function(ra) {
                    return function(rb) {
                      var tail = addRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      var get = Record_Unsafe.unsafeGet(key);
                      return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);
                    };
                  };
                },
                mulRecord: function(v) {
                  return function(ra) {
                    return function(rb) {
                      var tail = mulRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      var get = Record_Unsafe.unsafeGet(key);
                      return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);
                    };
                  };
                },
                oneRecord: function(v) {
                  return function(v1) {
                    var tail = oneRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    return insert(one(dictSemiring))(tail);
                  };
                },
                zeroRecord: function(v) {
                  return function(v1) {
                    var tail = zeroRecord(dictSemiringRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    return insert(zero(dictSemiring))(tail);
                  };
                }
              };
            };
          };
        };
      };
      module.exports = {
        add,
        zero,
        mul,
        one,
        addRecord,
        mulRecord,
        oneRecord,
        zeroRecord,
        semiringInt,
        semiringNumber,
        semiringFn,
        semiringUnit,
        semiringProxy,
        semiringProxy2,
        semiringProxy3,
        semiringRecord,
        semiringRecordNil,
        semiringRecordCons
      };
    }
  });

  // output/Data.Ring/index.js
  var require_Data11 = __commonJS({
    "output/Data.Ring/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign11();
      var Data_Semiring = require_Data10();
      var Data_Symbol = require_Data5();
      var Data_Unit = require_Data3();
      var Record_Unsafe = require_Record();
      var Type_Proxy = require_Type();
      var subRecord = function(dict) {
        return dict.subRecord;
      };
      var sub = function(dict) {
        return dict.sub;
      };
      var ringUnit = {
        sub: function(v) {
          return function(v1) {
            return Data_Unit.unit;
          };
        },
        Semiring0: function() {
          return Data_Semiring.semiringUnit;
        }
      };
      var ringRecordNil = {
        subRecord: function(v) {
          return function(v1) {
            return function(v2) {
              return {};
            };
          };
        },
        SemiringRecord0: function() {
          return Data_Semiring.semiringRecordNil;
        }
      };
      var ringRecordCons = function(dictIsSymbol) {
        return function(dictCons) {
          return function(dictRingRecord) {
            return function(dictRing) {
              return {
                subRecord: function(v) {
                  return function(ra) {
                    return function(rb) {
                      var tail = subRecord(dictRingRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      var get = Record_Unsafe.unsafeGet(key);
                      return insert(sub(dictRing)(get(ra))(get(rb)))(tail);
                    };
                  };
                },
                SemiringRecord0: function() {
                  return Data_Semiring.semiringRecordCons(dictIsSymbol)()(dictRingRecord.SemiringRecord0())(dictRing.Semiring0());
                }
              };
            };
          };
        };
      };
      var ringRecord = function(dictRowToList) {
        return function(dictRingRecord) {
          return {
            sub: subRecord(dictRingRecord)(Type_Proxy["Proxy"].value),
            Semiring0: function() {
              return Data_Semiring.semiringRecord()(dictRingRecord.SemiringRecord0());
            }
          };
        };
      };
      var ringProxy3 = {
        sub: function(v) {
          return function(v1) {
            return Type_Proxy.Proxy3.value;
          };
        },
        Semiring0: function() {
          return Data_Semiring.semiringProxy3;
        }
      };
      var ringProxy2 = {
        sub: function(v) {
          return function(v1) {
            return Type_Proxy.Proxy2.value;
          };
        },
        Semiring0: function() {
          return Data_Semiring.semiringProxy2;
        }
      };
      var ringProxy = {
        sub: function(v) {
          return function(v1) {
            return Type_Proxy["Proxy"].value;
          };
        },
        Semiring0: function() {
          return Data_Semiring.semiringProxy;
        }
      };
      var ringNumber = {
        sub: $foreign.numSub,
        Semiring0: function() {
          return Data_Semiring.semiringNumber;
        }
      };
      var ringInt = {
        sub: $foreign.intSub,
        Semiring0: function() {
          return Data_Semiring.semiringInt;
        }
      };
      var ringFn = function(dictRing) {
        return {
          sub: function(f) {
            return function(g) {
              return function(x) {
                return sub(dictRing)(f(x))(g(x));
              };
            };
          },
          Semiring0: function() {
            return Data_Semiring.semiringFn(dictRing.Semiring0());
          }
        };
      };
      var negate = function(dictRing) {
        return function(a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
        };
      };
      module.exports = {
        sub,
        negate,
        subRecord,
        ringInt,
        ringNumber,
        ringUnit,
        ringFn,
        ringProxy,
        ringProxy2,
        ringProxy3,
        ringRecord,
        ringRecordNil,
        ringRecordCons,
        add: Data_Semiring.add,
        mul: Data_Semiring.mul,
        one: Data_Semiring.one,
        zero: Data_Semiring.zero
      };
    }
  });

  // output/Data.Ord/index.js
  var require_Data12 = __commonJS({
    "output/Data.Ord/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign9();
      var Data_Eq = require_Data8();
      var Data_Ordering = require_Data9();
      var Data_Ring = require_Data11();
      var Data_Semiring = require_Data10();
      var Data_Symbol = require_Data5();
      var Record_Unsafe = require_Record();
      var Type_Proxy = require_Type();
      var ordVoid = {
        compare: function(v) {
          return function(v1) {
            return Data_Ordering.EQ.value;
          };
        },
        Eq0: function() {
          return Data_Eq.eqVoid;
        }
      };
      var ordUnit = {
        compare: function(v) {
          return function(v1) {
            return Data_Ordering.EQ.value;
          };
        },
        Eq0: function() {
          return Data_Eq.eqUnit;
        }
      };
      var ordString = {
        compare: $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
        Eq0: function() {
          return Data_Eq.eqString;
        }
      };
      var ordRecordNil = {
        compareRecord: function(v) {
          return function(v1) {
            return function(v2) {
              return Data_Ordering.EQ.value;
            };
          };
        },
        EqRecord0: function() {
          return Data_Eq.eqRowNil;
        }
      };
      var ordProxy3 = {
        compare: function(v) {
          return function(v1) {
            return Data_Ordering.EQ.value;
          };
        },
        Eq0: function() {
          return Data_Eq.eqProxy3;
        }
      };
      var ordProxy2 = {
        compare: function(v) {
          return function(v1) {
            return Data_Ordering.EQ.value;
          };
        },
        Eq0: function() {
          return Data_Eq.eqProxy2;
        }
      };
      var ordProxy = {
        compare: function(v) {
          return function(v1) {
            return Data_Ordering.EQ.value;
          };
        },
        Eq0: function() {
          return Data_Eq.eqProxy;
        }
      };
      var ordOrdering = {
        compare: function(v) {
          return function(v1) {
            if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
            }
            ;
            if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.GT.value;
            }
            ;
            if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.LT.value;
            }
            ;
            if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
            }
            ;
            throw new Error("Failed pattern match at Data.Ord (line 121, column 1 - line 128, column 21): " + [v.constructor.name, v1.constructor.name]);
          };
        },
        Eq0: function() {
          return Data_Ordering.eqOrdering;
        }
      };
      var ordNumber = {
        compare: $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
        Eq0: function() {
          return Data_Eq.eqNumber;
        }
      };
      var ordInt = {
        compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
        Eq0: function() {
          return Data_Eq.eqInt;
        }
      };
      var ordChar = {
        compare: $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
        Eq0: function() {
          return Data_Eq.eqChar;
        }
      };
      var ordBoolean = {
        compare: $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
        Eq0: function() {
          return Data_Eq.eqBoolean;
        }
      };
      var compareRecord = function(dict) {
        return dict.compareRecord;
      };
      var ordRecord = function(dictRowToList) {
        return function(dictOrdRecord) {
          return {
            compare: compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value),
            Eq0: function() {
              return Data_Eq.eqRec()(dictOrdRecord.EqRecord0());
            }
          };
        };
      };
      var compare1 = function(dict) {
        return dict.compare1;
      };
      var compare = function(dict) {
        return dict.compare;
      };
      var comparing = function(dictOrd) {
        return function(f) {
          return function(x) {
            return function(y) {
              return compare(dictOrd)(f(x))(f(y));
            };
          };
        };
      };
      var greaterThan = function(dictOrd) {
        return function(a1) {
          return function(a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.GT) {
              return true;
            }
            ;
            return false;
          };
        };
      };
      var greaterThanOrEq = function(dictOrd) {
        return function(a1) {
          return function(a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.LT) {
              return false;
            }
            ;
            return true;
          };
        };
      };
      var signum = function(dictOrd) {
        return function(dictRing) {
          return function(x) {
            var $52 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
            if ($52) {
              return Data_Semiring.one(dictRing.Semiring0());
            }
            ;
            return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));
          };
        };
      };
      var lessThan = function(dictOrd) {
        return function(a1) {
          return function(a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.LT) {
              return true;
            }
            ;
            return false;
          };
        };
      };
      var lessThanOrEq = function(dictOrd) {
        return function(a1) {
          return function(a2) {
            var v = compare(dictOrd)(a1)(a2);
            if (v instanceof Data_Ordering.GT) {
              return false;
            }
            ;
            return true;
          };
        };
      };
      var max = function(dictOrd) {
        return function(x) {
          return function(y) {
            var v = compare(dictOrd)(x)(y);
            if (v instanceof Data_Ordering.LT) {
              return y;
            }
            ;
            if (v instanceof Data_Ordering.EQ) {
              return x;
            }
            ;
            if (v instanceof Data_Ordering.GT) {
              return x;
            }
            ;
            throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [v.constructor.name]);
          };
        };
      };
      var min = function(dictOrd) {
        return function(x) {
          return function(y) {
            var v = compare(dictOrd)(x)(y);
            if (v instanceof Data_Ordering.LT) {
              return x;
            }
            ;
            if (v instanceof Data_Ordering.EQ) {
              return x;
            }
            ;
            if (v instanceof Data_Ordering.GT) {
              return y;
            }
            ;
            throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [v.constructor.name]);
          };
        };
      };
      var ordArray = function(dictOrd) {
        return {
          compare: function() {
            var toDelta = function(x) {
              return function(y) {
                var v = compare(dictOrd)(x)(y);
                if (v instanceof Data_Ordering.EQ) {
                  return 0;
                }
                ;
                if (v instanceof Data_Ordering.LT) {
                  return 1;
                }
                ;
                if (v instanceof Data_Ordering.GT) {
                  return -1 | 0;
                }
                ;
                throw new Error("Failed pattern match at Data.Ord (line 74, column 7 - line 77, column 17): " + [v.constructor.name]);
              };
            };
            return function(xs) {
              return function(ys) {
                return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
              };
            };
          }(),
          Eq0: function() {
            return Data_Eq.eqArray(dictOrd.Eq0());
          }
        };
      };
      var ord1Array = {
        compare1: function(dictOrd) {
          return compare(ordArray(dictOrd));
        },
        Eq10: function() {
          return Data_Eq.eq1Array;
        }
      };
      var ordRecordCons = function(dictOrdRecord) {
        return function(dictCons) {
          return function(dictIsSymbol) {
            return function(dictOrd) {
              return {
                compareRecord: function(v) {
                  return function(ra) {
                    return function(rb) {
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var left = compare(dictOrd)(Record_Unsafe.unsafeGet(key)(ra))(Record_Unsafe.unsafeGet(key)(rb));
                      var $58 = Data_Eq.notEq(Data_Ordering.eqOrdering)(left)(Data_Ordering.EQ.value);
                      if ($58) {
                        return left;
                      }
                      ;
                      return compareRecord(dictOrdRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                    };
                  };
                },
                EqRecord0: function() {
                  return Data_Eq.eqRowCons(dictOrdRecord.EqRecord0())()(dictIsSymbol)(dictOrd.Eq0());
                }
              };
            };
          };
        };
      };
      var clamp = function(dictOrd) {
        return function(low) {
          return function(hi) {
            return function(x) {
              return min(dictOrd)(hi)(max(dictOrd)(low)(x));
            };
          };
        };
      };
      var between = function(dictOrd) {
        return function(low) {
          return function(hi) {
            return function(x) {
              if (lessThan(dictOrd)(x)(low)) {
                return false;
              }
              ;
              if (greaterThan(dictOrd)(x)(hi)) {
                return false;
              }
              ;
              return true;
            };
          };
        };
      };
      var abs = function(dictOrd) {
        return function(dictRing) {
          return function(x) {
            var $62 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
            if ($62) {
              return x;
            }
            ;
            return Data_Ring.negate(dictRing)(x);
          };
        };
      };
      module.exports = {
        compare,
        compare1,
        lessThan,
        lessThanOrEq,
        greaterThan,
        greaterThanOrEq,
        comparing,
        min,
        max,
        clamp,
        between,
        abs,
        signum,
        compareRecord,
        ordBoolean,
        ordInt,
        ordNumber,
        ordString,
        ordChar,
        ordUnit,
        ordVoid,
        ordProxy,
        ordProxy2,
        ordProxy3,
        ordArray,
        ordOrdering,
        ord1Array,
        ordRecordNil,
        ordRecordCons,
        ordRecord,
        EQ: Data_Ordering.EQ,
        GT: Data_Ordering.GT,
        LT: Data_Ordering.LT
      };
    }
  });

  // output/Data.Bounded/index.js
  var require_Data13 = __commonJS({
    "output/Data.Bounded/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign8();
      var Data_Ord = require_Data12();
      var Data_Ordering = require_Data9();
      var Data_Symbol = require_Data5();
      var Data_Unit = require_Data3();
      var Record_Unsafe = require_Record();
      var Type_Proxy = require_Type();
      var topRecord = function(dict) {
        return dict.topRecord;
      };
      var top = function(dict) {
        return dict.top;
      };
      var boundedUnit = {
        top: Data_Unit.unit,
        bottom: Data_Unit.unit,
        Ord0: function() {
          return Data_Ord.ordUnit;
        }
      };
      var boundedRecordNil = {
        topRecord: function(v) {
          return function(v1) {
            return {};
          };
        },
        bottomRecord: function(v) {
          return function(v1) {
            return {};
          };
        },
        OrdRecord0: function() {
          return Data_Ord.ordRecordNil;
        }
      };
      var boundedProxy3 = {
        bottom: Type_Proxy.Proxy3.value,
        top: Type_Proxy.Proxy3.value,
        Ord0: function() {
          return Data_Ord.ordProxy3;
        }
      };
      var boundedProxy2 = {
        bottom: Type_Proxy.Proxy2.value,
        top: Type_Proxy.Proxy2.value,
        Ord0: function() {
          return Data_Ord.ordProxy2;
        }
      };
      var boundedProxy = {
        bottom: Type_Proxy["Proxy"].value,
        top: Type_Proxy["Proxy"].value,
        Ord0: function() {
          return Data_Ord.ordProxy;
        }
      };
      var boundedOrdering = {
        top: Data_Ordering.GT.value,
        bottom: Data_Ordering.LT.value,
        Ord0: function() {
          return Data_Ord.ordOrdering;
        }
      };
      var boundedNumber = {
        top: $foreign.topNumber,
        bottom: $foreign.bottomNumber,
        Ord0: function() {
          return Data_Ord.ordNumber;
        }
      };
      var boundedInt = {
        top: $foreign.topInt,
        bottom: $foreign.bottomInt,
        Ord0: function() {
          return Data_Ord.ordInt;
        }
      };
      var boundedChar = {
        top: $foreign.topChar,
        bottom: $foreign.bottomChar,
        Ord0: function() {
          return Data_Ord.ordChar;
        }
      };
      var boundedBoolean = {
        top: true,
        bottom: false,
        Ord0: function() {
          return Data_Ord.ordBoolean;
        }
      };
      var bottomRecord = function(dict) {
        return dict.bottomRecord;
      };
      var boundedRecord = function(dictRowToList) {
        return function(dictBoundedRecord) {
          return {
            top: topRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
            bottom: bottomRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
            Ord0: function() {
              return Data_Ord.ordRecord()(dictBoundedRecord.OrdRecord0());
            }
          };
        };
      };
      var bottom = function(dict) {
        return dict.bottom;
      };
      var boundedRecordCons = function(dictIsSymbol) {
        return function(dictBounded) {
          return function(dictCons) {
            return function(dictCons1) {
              return function(dictBoundedRecord) {
                return {
                  topRecord: function(v) {
                    return function(rowProxy) {
                      var tail = topRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(rowProxy);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      return insert(top(dictBounded))(tail);
                    };
                  },
                  bottomRecord: function(v) {
                    return function(rowProxy) {
                      var tail = bottomRecord(dictBoundedRecord)(Type_Proxy["Proxy"].value)(rowProxy);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      return insert(bottom(dictBounded))(tail);
                    };
                  },
                  OrdRecord0: function() {
                    return Data_Ord.ordRecordCons(dictBoundedRecord.OrdRecord0())()(dictIsSymbol)(dictBounded.Ord0());
                  }
                };
              };
            };
          };
        };
      };
      module.exports = {
        bottom,
        top,
        bottomRecord,
        topRecord,
        boundedBoolean,
        boundedInt,
        boundedChar,
        boundedOrdering,
        boundedUnit,
        boundedNumber,
        boundedProxy,
        boundedProxy2,
        boundedProxy3,
        boundedRecordNil,
        boundedRecordCons,
        boundedRecord,
        EQ: Data_Ord.EQ,
        GT: Data_Ord.GT,
        LT: Data_Ord.LT,
        compare: Data_Ord.compare
      };
    }
  });

  // output/Data.Functor.Invariant/index.js
  var require_Data_Functor = __commonJS({
    "output/Data.Functor.Invariant/index.js"(exports, module) {
      "use strict";
      var Data_Functor = require_Data4();
      var invariantMultiplicative = {
        imap: function(f) {
          return function(v) {
            return function(v1) {
              return f(v1);
            };
          };
        }
      };
      var invariantEndo = {
        imap: function(ab) {
          return function(ba) {
            return function(v) {
              return function($37) {
                return ab(v(ba($37)));
              };
            };
          };
        }
      };
      var invariantDual = {
        imap: function(f) {
          return function(v) {
            return function(v1) {
              return f(v1);
            };
          };
        }
      };
      var invariantDisj = {
        imap: function(f) {
          return function(v) {
            return function(v1) {
              return f(v1);
            };
          };
        }
      };
      var invariantConj = {
        imap: function(f) {
          return function(v) {
            return function(v1) {
              return f(v1);
            };
          };
        }
      };
      var invariantAdditive = {
        imap: function(f) {
          return function(v) {
            return function(v1) {
              return f(v1);
            };
          };
        }
      };
      var imapF = function(dictFunctor) {
        return function(f) {
          return function(v) {
            return Data_Functor.map(dictFunctor)(f);
          };
        };
      };
      var invariantArray = {
        imap: imapF(Data_Functor.functorArray)
      };
      var invariantFn = {
        imap: imapF(Data_Functor.functorFn)
      };
      var imap = function(dict) {
        return dict.imap;
      };
      var invariantAlternate = function(dictInvariant) {
        return {
          imap: function(f) {
            return function(g) {
              return function(v) {
                return imap(dictInvariant)(f)(g)(v);
              };
            };
          }
        };
      };
      module.exports = {
        imap,
        imapF,
        invariantFn,
        invariantArray,
        invariantAdditive,
        invariantConj,
        invariantDisj,
        invariantDual,
        invariantEndo,
        invariantMultiplicative,
        invariantAlternate
      };
    }
  });

  // output/Data.Show/foreign.js
  var require_foreign13 = __commonJS({
    "output/Data.Show/foreign.js"(exports) {
      "use strict";
      exports.showIntImpl = function(n) {
        return n.toString();
      };
      exports.showNumberImpl = function(n) {
        var str = n.toString();
        return isNaN(str + ".0") ? str : str + ".0";
      };
      exports.showCharImpl = function(c) {
        var code = c.charCodeAt(0);
        if (code < 32 || code === 127) {
          switch (c) {
            case "\x07":
              return "'\\a'";
            case "\b":
              return "'\\b'";
            case "\f":
              return "'\\f'";
            case "\n":
              return "'\\n'";
            case "\r":
              return "'\\r'";
            case "	":
              return "'\\t'";
            case "\v":
              return "'\\v'";
          }
          return "'\\" + code.toString(10) + "'";
        }
        return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
      };
      exports.showStringImpl = function(s) {
        var l = s.length;
        return '"' + s.replace(/[\0-\x1F\x7F"\\]/g, function(c, i) {
          switch (c) {
            case '"':
            case "\\":
              return "\\" + c;
            case "\x07":
              return "\\a";
            case "\b":
              return "\\b";
            case "\f":
              return "\\f";
            case "\n":
              return "\\n";
            case "\r":
              return "\\r";
            case "	":
              return "\\t";
            case "\v":
              return "\\v";
          }
          var k = i + 1;
          var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
          return "\\" + c.charCodeAt(0).toString(10) + empty;
        }) + '"';
      };
      exports.showArrayImpl = function(f) {
        return function(xs) {
          var ss = [];
          for (var i = 0, l = xs.length; i < l; i++) {
            ss[i] = f(xs[i]);
          }
          return "[" + ss.join(",") + "]";
        };
      };
      exports.cons = function(head) {
        return function(tail) {
          return [head].concat(tail);
        };
      };
      exports.join = function(separator) {
        return function(xs) {
          return xs.join(separator);
        };
      };
    }
  });

  // output/Data.Show/index.js
  var require_Data14 = __commonJS({
    "output/Data.Show/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign13();
      var Data_Symbol = require_Data5();
      var Record_Unsafe = require_Record();
      var Type_Proxy = require_Type();
      var showString = {
        show: $foreign.showStringImpl
      };
      var showRecordFieldsNil = {
        showRecordFields: function(v) {
          return function(v1) {
            return [];
          };
        }
      };
      var showRecordFields = function(dict) {
        return dict.showRecordFields;
      };
      var showRecord = function(dictRowToList) {
        return function(dictShowRecordFields) {
          return {
            show: function(record) {
              var v = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
              if (v.length === 0) {
                return "{}";
              }
              ;
              return $foreign.join(" ")(["{", $foreign.join(", ")(v), "}"]);
            }
          };
        };
      };
      var showProxy3 = {
        show: function(v) {
          return "Proxy3";
        }
      };
      var showProxy2 = {
        show: function(v) {
          return "Proxy2";
        }
      };
      var showProxy = {
        show: function(v) {
          return "Proxy";
        }
      };
      var showNumber = {
        show: $foreign.showNumberImpl
      };
      var showInt = {
        show: $foreign.showIntImpl
      };
      var showChar = {
        show: $foreign.showCharImpl
      };
      var showBoolean = {
        show: function(v) {
          if (v) {
            return "true";
          }
          ;
          if (!v) {
            return "false";
          }
          ;
          throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [v.constructor.name]);
        }
      };
      var show = function(dict) {
        return dict.show;
      };
      var showArray = function(dictShow) {
        return {
          show: $foreign.showArrayImpl(show(dictShow))
        };
      };
      var showRecordFieldsCons = function(dictIsSymbol) {
        return function(dictShowRecordFields) {
          return function(dictShow) {
            return {
              showRecordFields: function(v) {
                return function(record) {
                  var tail = showRecordFields(dictShowRecordFields)(Type_Proxy["Proxy"].value)(record);
                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                  var focus = Record_Unsafe.unsafeGet(key)(record);
                  return $foreign.cons($foreign.join(": ")([key, show(dictShow)(focus)]))(tail);
                };
              }
            };
          };
        };
      };
      module.exports = {
        show,
        showRecordFields,
        showBoolean,
        showInt,
        showNumber,
        showChar,
        showString,
        showArray,
        showProxy,
        showProxy2,
        showProxy3,
        showRecord,
        showRecordFieldsNil,
        showRecordFieldsCons
      };
    }
  });

  // output/Data.Generic.Rep/index.js
  var require_Data_Generic = __commonJS({
    "output/Data.Generic.Rep/index.js"(exports, module) {
      "use strict";
      var Data_Show = require_Data14();
      var Data_Symbol = require_Data5();
      var Type_Proxy = require_Type();
      var Inl = function() {
        function Inl2(value0) {
          this.value0 = value0;
        }
        ;
        Inl2.create = function(value0) {
          return new Inl2(value0);
        };
        return Inl2;
      }();
      var Inr = function() {
        function Inr2(value0) {
          this.value0 = value0;
        }
        ;
        Inr2.create = function(value0) {
          return new Inr2(value0);
        };
        return Inr2;
      }();
      var Product = function() {
        function Product2(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
        }
        ;
        Product2.create = function(value0) {
          return function(value1) {
            return new Product2(value0, value1);
          };
        };
        return Product2;
      }();
      var NoArguments = function() {
        function NoArguments2() {
        }
        ;
        NoArguments2.value = new NoArguments2();
        return NoArguments2;
      }();
      var Constructor = function(x) {
        return x;
      };
      var Argument = function(x) {
        return x;
      };
      var to = function(dict) {
        return dict.to;
      };
      var showSum = function(dictShow) {
        return function(dictShow1) {
          return {
            show: function(v) {
              if (v instanceof Inl) {
                return "(Inl " + (Data_Show.show(dictShow)(v.value0) + ")");
              }
              ;
              if (v instanceof Inr) {
                return "(Inr " + (Data_Show.show(dictShow1)(v.value0) + ")");
              }
              ;
              throw new Error("Failed pattern match at Data.Generic.Rep (line 31, column 1 - line 33, column 42): " + [v.constructor.name]);
            }
          };
        };
      };
      var showProduct = function(dictShow) {
        return function(dictShow1) {
          return {
            show: function(v) {
              return "(Product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
            }
          };
        };
      };
      var showNoArguments = {
        show: function(v) {
          return "NoArguments";
        }
      };
      var showConstructor = function(dictIsSymbol) {
        return function(dictShow) {
          return {
            show: function(v) {
              return "(Constructor @" + (Data_Show.show(Data_Show.showString)(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value)) + (" " + (Data_Show.show(dictShow)(v) + ")")));
            }
          };
        };
      };
      var showArgument = function(dictShow) {
        return {
          show: function(v) {
            return "(Argument " + (Data_Show.show(dictShow)(v) + ")");
          }
        };
      };
      var repOf = function(dictGeneric) {
        return function(v) {
          return Type_Proxy["Proxy"].value;
        };
      };
      var from = function(dict) {
        return dict.from;
      };
      module.exports = {
        to,
        from,
        repOf,
        NoArguments,
        Inl,
        Inr,
        Product,
        Constructor,
        Argument,
        showNoArguments,
        showSum,
        showProduct,
        showConstructor,
        showArgument
      };
    }
  });

  // output/Data.Maybe/index.js
  var require_Data15 = __commonJS({
    "output/Data.Maybe/index.js"(exports, module) {
      "use strict";
      var Control_Alt = require_Control6();
      var Control_Applicative = require_Control4();
      var Control_Category = require_Control2();
      var Data_Bounded = require_Data13();
      var Data_Eq = require_Data8();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Data_Functor_Invariant = require_Data_Functor();
      var Data_Generic_Rep = require_Data_Generic();
      var Data_Ord = require_Data12();
      var Data_Ordering = require_Data9();
      var Data_Semigroup = require_Data7();
      var Data_Show = require_Data14();
      var Data_Unit = require_Data3();
      var Nothing = function() {
        function Nothing2() {
        }
        ;
        Nothing2.value = new Nothing2();
        return Nothing2;
      }();
      var Just = function() {
        function Just2(value0) {
          this.value0 = value0;
        }
        ;
        Just2.create = function(value0) {
          return new Just2(value0);
        };
        return Just2;
      }();
      var showMaybe = function(dictShow) {
        return {
          show: function(v) {
            if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
            }
            ;
            if (v instanceof Nothing) {
              return "Nothing";
            }
            ;
            throw new Error("Failed pattern match at Data.Maybe (line 216, column 1 - line 218, column 28): " + [v.constructor.name]);
          }
        };
      };
      var semigroupMaybe = function(dictSemigroup) {
        return {
          append: function(v) {
            return function(v1) {
              if (v instanceof Nothing) {
                return v1;
              }
              ;
              if (v1 instanceof Nothing) {
                return v;
              }
              ;
              if (v instanceof Just && v1 instanceof Just) {
                return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              }
              ;
              throw new Error("Failed pattern match at Data.Maybe (line 185, column 1 - line 188, column 43): " + [v.constructor.name, v1.constructor.name]);
            };
          }
        };
      };
      var optional = function(dictAlt) {
        return function(dictApplicative) {
          return function(a) {
            return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Just.create)(a))(Control_Applicative.pure(dictApplicative)(Nothing.value));
          };
        };
      };
      var monoidMaybe = function(dictSemigroup) {
        return {
          mempty: Nothing.value,
          Semigroup0: function() {
            return semigroupMaybe(dictSemigroup);
          }
        };
      };
      var maybe$prime = function(v) {
        return function(v1) {
          return function(v2) {
            if (v2 instanceof Nothing) {
              return v(Data_Unit.unit);
            }
            ;
            if (v2 instanceof Just) {
              return v1(v2.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.Maybe (line 243, column 1 - line 243, column 62): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
          };
        };
      };
      var maybe = function(v) {
        return function(v1) {
          return function(v2) {
            if (v2 instanceof Nothing) {
              return v;
            }
            ;
            if (v2 instanceof Just) {
              return v1(v2.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
          };
        };
      };
      var isNothing = maybe(true)(Data_Function["const"](false));
      var isJust = maybe(false)(Data_Function["const"](true));
      var genericMaybe = {
        to: function(x) {
          if (x instanceof Data_Generic_Rep.Inl) {
            return Nothing.value;
          }
          ;
          if (x instanceof Data_Generic_Rep.Inr) {
            return new Just(x.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Maybe (line 220, column 1 - line 220, column 52): " + [x.constructor.name]);
        },
        from: function(x) {
          if (x instanceof Nothing) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
          }
          ;
          if (x instanceof Just) {
            return new Data_Generic_Rep.Inr(x.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Maybe (line 220, column 1 - line 220, column 52): " + [x.constructor.name]);
        }
      };
      var functorMaybe = {
        map: function(v) {
          return function(v1) {
            if (v1 instanceof Just) {
              return new Just(v(v1.value0));
            }
            ;
            return Nothing.value;
          };
        }
      };
      var invariantMaybe = {
        imap: Data_Functor_Invariant.imapF(functorMaybe)
      };
      var fromMaybe$prime = function(a) {
        return maybe$prime(a)(Control_Category.identity(Control_Category.categoryFn));
      };
      var fromMaybe = function(a) {
        return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
      };
      var fromJust = function(dictPartial) {
        return function(v) {
          if (v instanceof Just) {
            return v.value0;
          }
          ;
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [v.constructor.name]);
        };
      };
      var extendMaybe = {
        extend: function(v) {
          return function(v1) {
            if (v1 instanceof Nothing) {
              return Nothing.value;
            }
            ;
            return new Just(v(v1));
          };
        },
        Functor0: function() {
          return functorMaybe;
        }
      };
      var eqMaybe = function(dictEq) {
        return {
          eq: function(x) {
            return function(y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                return true;
              }
              ;
              if (x instanceof Just && y instanceof Just) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              }
              ;
              return false;
            };
          }
        };
      };
      var ordMaybe = function(dictOrd) {
        return {
          compare: function(x) {
            return function(y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                return Data_Ordering.EQ.value;
              }
              ;
              if (x instanceof Nothing) {
                return Data_Ordering.LT.value;
              }
              ;
              if (y instanceof Nothing) {
                return Data_Ordering.GT.value;
              }
              ;
              if (x instanceof Just && y instanceof Just) {
                return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
              }
              ;
              throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 205, column 51): " + [x.constructor.name, y.constructor.name]);
            };
          },
          Eq0: function() {
            return eqMaybe(dictOrd.Eq0());
          }
        };
      };
      var eq1Maybe = {
        eq1: function(dictEq) {
          return Data_Eq.eq(eqMaybe(dictEq));
        }
      };
      var ord1Maybe = {
        compare1: function(dictOrd) {
          return Data_Ord.compare(ordMaybe(dictOrd));
        },
        Eq10: function() {
          return eq1Maybe;
        }
      };
      var boundedMaybe = function(dictBounded) {
        return {
          top: new Just(Data_Bounded.top(dictBounded)),
          bottom: Nothing.value,
          Ord0: function() {
            return ordMaybe(dictBounded.Ord0());
          }
        };
      };
      var applyMaybe = {
        apply: function(v) {
          return function(v1) {
            if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
            }
            ;
            if (v instanceof Nothing) {
              return Nothing.value;
            }
            ;
            throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [v.constructor.name, v1.constructor.name]);
          };
        },
        Functor0: function() {
          return functorMaybe;
        }
      };
      var bindMaybe = {
        bind: function(v) {
          return function(v1) {
            if (v instanceof Just) {
              return v1(v.value0);
            }
            ;
            if (v instanceof Nothing) {
              return Nothing.value;
            }
            ;
            throw new Error("Failed pattern match at Data.Maybe (line 126, column 1 - line 128, column 28): " + [v.constructor.name, v1.constructor.name]);
          };
        },
        Apply0: function() {
          return applyMaybe;
        }
      };
      var applicativeMaybe = {
        pure: Just.create,
        Apply0: function() {
          return applyMaybe;
        }
      };
      var monadMaybe = {
        Applicative0: function() {
          return applicativeMaybe;
        },
        Bind1: function() {
          return bindMaybe;
        }
      };
      var altMaybe = {
        alt: function(v) {
          return function(v1) {
            if (v instanceof Nothing) {
              return v1;
            }
            ;
            return v;
          };
        },
        Functor0: function() {
          return functorMaybe;
        }
      };
      var plusMaybe = {
        empty: Nothing.value,
        Alt0: function() {
          return altMaybe;
        }
      };
      var alternativeMaybe = {
        Applicative0: function() {
          return applicativeMaybe;
        },
        Plus1: function() {
          return plusMaybe;
        }
      };
      var monadZeroMaybe = {
        Monad0: function() {
          return monadMaybe;
        },
        Alternative1: function() {
          return alternativeMaybe;
        },
        MonadZeroIsDeprecated2: function() {
          return void 0;
        }
      };
      module.exports = {
        Nothing,
        Just,
        maybe,
        "maybe'": maybe$prime,
        fromMaybe,
        "fromMaybe'": fromMaybe$prime,
        isJust,
        isNothing,
        fromJust,
        optional,
        functorMaybe,
        applyMaybe,
        applicativeMaybe,
        altMaybe,
        plusMaybe,
        alternativeMaybe,
        bindMaybe,
        monadMaybe,
        monadZeroMaybe,
        extendMaybe,
        invariantMaybe,
        semigroupMaybe,
        monoidMaybe,
        eqMaybe,
        eq1Maybe,
        ordMaybe,
        ord1Maybe,
        boundedMaybe,
        showMaybe,
        genericMaybe
      };
    }
  });

  // output/Effect/foreign.js
  var require_foreign14 = __commonJS({
    "output/Effect/foreign.js"(exports) {
      "use strict";
      exports.pureE = function(a) {
        return function() {
          return a;
        };
      };
      exports.bindE = function(a) {
        return function(f) {
          return function() {
            return f(a())();
          };
        };
      };
      exports.untilE = function(f) {
        return function() {
          while (!f())
            ;
        };
      };
      exports.whileE = function(f) {
        return function(a) {
          return function() {
            while (f()) {
              a();
            }
          };
        };
      };
      exports.forE = function(lo) {
        return function(hi) {
          return function(f) {
            return function() {
              for (var i = lo; i < hi; i++) {
                f(i)();
              }
            };
          };
        };
      };
      exports.foreachE = function(as) {
        return function(f) {
          return function() {
            for (var i = 0, l = as.length; i < l; i++) {
              f(as[i])();
            }
          };
        };
      };
    }
  });

  // output/Control.Monad/index.js
  var require_Control7 = __commonJS({
    "output/Control.Monad/index.js"(exports, module) {
      "use strict";
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Control_Bind = require_Control5();
      var Data_Functor = require_Data4();
      var whenM = function(dictMonad) {
        return function(mb) {
          return function(m) {
            return Control_Bind.bind(dictMonad.Bind1())(mb)(function(b) {
              return Control_Applicative.when(dictMonad.Applicative0())(b)(m);
            });
          };
        };
      };
      var unlessM = function(dictMonad) {
        return function(mb) {
          return function(m) {
            return Control_Bind.bind(dictMonad.Bind1())(mb)(function(b) {
              return Control_Applicative.unless(dictMonad.Applicative0())(b)(m);
            });
          };
        };
      };
      var monadProxy = {
        Applicative0: function() {
          return Control_Applicative.applicativeProxy;
        },
        Bind1: function() {
          return Control_Bind.bindProxy;
        }
      };
      var monadFn = {
        Applicative0: function() {
          return Control_Applicative.applicativeFn;
        },
        Bind1: function() {
          return Control_Bind.bindFn;
        }
      };
      var monadArray = {
        Applicative0: function() {
          return Control_Applicative.applicativeArray;
        },
        Bind1: function() {
          return Control_Bind.bindArray;
        }
      };
      var liftM1 = function(dictMonad) {
        return function(f) {
          return function(a) {
            return Control_Bind.bind(dictMonad.Bind1())(a)(function(a$prime) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f(a$prime));
            });
          };
        };
      };
      var ap = function(dictMonad) {
        return function(f) {
          return function(a) {
            return Control_Bind.bind(dictMonad.Bind1())(f)(function(f$prime) {
              return Control_Bind.bind(dictMonad.Bind1())(a)(function(a$prime) {
                return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
              });
            });
          };
        };
      };
      module.exports = {
        liftM1,
        whenM,
        unlessM,
        ap,
        monadFn,
        monadArray,
        monadProxy,
        liftA1: Control_Applicative.liftA1,
        pure: Control_Applicative.pure,
        unless: Control_Applicative.unless,
        when: Control_Applicative.when,
        apply: Control_Apply.apply,
        bind: Control_Bind.bind,
        ifM: Control_Bind.ifM,
        join: Control_Bind.join,
        map: Data_Functor.map,
        "void": Data_Functor["void"]
      };
    }
  });

  // output/Data.EuclideanRing/foreign.js
  var require_foreign15 = __commonJS({
    "output/Data.EuclideanRing/foreign.js"(exports) {
      "use strict";
      exports.intDegree = function(x) {
        return Math.min(Math.abs(x), 2147483647);
      };
      exports.intDiv = function(x) {
        return function(y) {
          if (y === 0)
            return 0;
          return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
        };
      };
      exports.intMod = function(x) {
        return function(y) {
          if (y === 0)
            return 0;
          var yy = Math.abs(y);
          return (x % yy + yy) % yy;
        };
      };
      exports.numDiv = function(n1) {
        return function(n2) {
          return n1 / n2;
        };
      };
    }
  });

  // output/Data.CommutativeRing/index.js
  var require_Data16 = __commonJS({
    "output/Data.CommutativeRing/index.js"(exports, module) {
      "use strict";
      var Data_Ring = require_Data11();
      var Data_Semiring = require_Data10();
      var commutativeRingUnit = {
        Ring0: function() {
          return Data_Ring.ringUnit;
        }
      };
      var commutativeRingRecordNil = {
        RingRecord0: function() {
          return Data_Ring.ringRecordNil;
        }
      };
      var commutativeRingRecordCons = function(dictIsSymbol) {
        return function(dictCons) {
          return function(dictCommutativeRingRecord) {
            return function(dictCommutativeRing) {
              return {
                RingRecord0: function() {
                  return Data_Ring.ringRecordCons(dictIsSymbol)()(dictCommutativeRingRecord.RingRecord0())(dictCommutativeRing.Ring0());
                }
              };
            };
          };
        };
      };
      var commutativeRingRecord = function(dictRowToList) {
        return function(dictCommutativeRingRecord) {
          return {
            Ring0: function() {
              return Data_Ring.ringRecord()(dictCommutativeRingRecord.RingRecord0());
            }
          };
        };
      };
      var commutativeRingProxy3 = {
        Ring0: function() {
          return Data_Ring.ringProxy3;
        }
      };
      var commutativeRingProxy2 = {
        Ring0: function() {
          return Data_Ring.ringProxy2;
        }
      };
      var commutativeRingProxy = {
        Ring0: function() {
          return Data_Ring.ringProxy;
        }
      };
      var commutativeRingNumber = {
        Ring0: function() {
          return Data_Ring.ringNumber;
        }
      };
      var commutativeRingInt = {
        Ring0: function() {
          return Data_Ring.ringInt;
        }
      };
      var commutativeRingFn = function(dictCommutativeRing) {
        return {
          Ring0: function() {
            return Data_Ring.ringFn(dictCommutativeRing.Ring0());
          }
        };
      };
      module.exports = {
        commutativeRingInt,
        commutativeRingNumber,
        commutativeRingUnit,
        commutativeRingFn,
        commutativeRingRecord,
        commutativeRingProxy,
        commutativeRingProxy2,
        commutativeRingProxy3,
        commutativeRingRecordNil,
        commutativeRingRecordCons,
        add: Data_Semiring.add,
        mul: Data_Semiring.mul,
        one: Data_Semiring.one,
        zero: Data_Semiring.zero
      };
    }
  });

  // output/Data.EuclideanRing/index.js
  var require_Data17 = __commonJS({
    "output/Data.EuclideanRing/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign15();
      var Data_CommutativeRing = require_Data16();
      var Data_Eq = require_Data8();
      var Data_Ring = require_Data11();
      var Data_Semiring = require_Data10();
      var mod = function(dict) {
        return dict.mod;
      };
      var gcd = function($copy_dictEq) {
        return function($copy_dictEuclideanRing) {
          return function($copy_a) {
            return function($copy_b) {
              var $tco_var_dictEq = $copy_dictEq;
              var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
              var $tco_var_a = $copy_a;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                var $8 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0()));
                if ($8) {
                  $tco_done = true;
                  return a;
                }
                ;
                $tco_var_dictEq = dictEq;
                $tco_var_dictEuclideanRing = dictEuclideanRing;
                $tco_var_a = b;
                $copy_b = mod(dictEuclideanRing)(a)(b);
                return;
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
              }
              ;
              return $tco_result;
            };
          };
        };
      };
      var euclideanRingNumber = {
        degree: function(v) {
          return 1;
        },
        div: $foreign.numDiv,
        mod: function(v) {
          return function(v1) {
            return 0;
          };
        },
        CommutativeRing0: function() {
          return Data_CommutativeRing.commutativeRingNumber;
        }
      };
      var euclideanRingInt = {
        degree: $foreign.intDegree,
        div: $foreign.intDiv,
        mod: $foreign.intMod,
        CommutativeRing0: function() {
          return Data_CommutativeRing.commutativeRingInt;
        }
      };
      var div = function(dict) {
        return dict.div;
      };
      var lcm = function(dictEq) {
        return function(dictEuclideanRing) {
          return function(a) {
            return function(b) {
              var $10 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0()));
              if ($10) {
                return Data_Semiring.zero(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0());
              }
              ;
              return div(dictEuclideanRing)(Data_Semiring.mul(dictEuclideanRing.CommutativeRing0().Ring0().Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));
            };
          };
        };
      };
      var degree = function(dict) {
        return dict.degree;
      };
      module.exports = {
        degree,
        div,
        mod,
        gcd,
        lcm,
        euclideanRingInt,
        euclideanRingNumber,
        sub: Data_Ring.sub,
        add: Data_Semiring.add,
        mul: Data_Semiring.mul,
        one: Data_Semiring.one,
        zero: Data_Semiring.zero
      };
    }
  });

  // output/Data.Monoid/index.js
  var require_Data18 = __commonJS({
    "output/Data.Monoid/index.js"(exports, module) {
      "use strict";
      var Data_Boolean = require_Data();
      var Data_EuclideanRing = require_Data17();
      var Data_Ordering = require_Data9();
      var Data_Semigroup = require_Data7();
      var Data_Symbol = require_Data5();
      var Data_Unit = require_Data3();
      var Record_Unsafe = require_Record();
      var Type_Proxy = require_Type();
      var monoidUnit = {
        mempty: Data_Unit.unit,
        Semigroup0: function() {
          return Data_Semigroup.semigroupUnit;
        }
      };
      var monoidString = {
        mempty: "",
        Semigroup0: function() {
          return Data_Semigroup.semigroupString;
        }
      };
      var monoidRecordNil = {
        memptyRecord: function(v) {
          return {};
        },
        SemigroupRecord0: function() {
          return Data_Semigroup.semigroupRecordNil;
        }
      };
      var monoidOrdering = {
        mempty: Data_Ordering.EQ.value,
        Semigroup0: function() {
          return Data_Ordering.semigroupOrdering;
        }
      };
      var monoidArray = {
        mempty: [],
        Semigroup0: function() {
          return Data_Semigroup.semigroupArray;
        }
      };
      var memptyRecord = function(dict) {
        return dict.memptyRecord;
      };
      var monoidRecord = function(dictRowToList) {
        return function(dictMonoidRecord) {
          return {
            mempty: memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value),
            Semigroup0: function() {
              return Data_Semigroup.semigroupRecord()(dictMonoidRecord.SemigroupRecord0());
            }
          };
        };
      };
      var mempty = function(dict) {
        return dict.mempty;
      };
      var monoidFn = function(dictMonoid) {
        return {
          mempty: function(v) {
            return mempty(dictMonoid);
          },
          Semigroup0: function() {
            return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
          }
        };
      };
      var monoidRecordCons = function(dictIsSymbol) {
        return function(dictMonoid) {
          return function(dictCons) {
            return function(dictMonoidRecord) {
              return {
                memptyRecord: function(v) {
                  var tail = memptyRecord(dictMonoidRecord)(Type_Proxy["Proxy"].value);
                  var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                  var insert = Record_Unsafe.unsafeSet(key);
                  return insert(mempty(dictMonoid))(tail);
                },
                SemigroupRecord0: function() {
                  return Data_Semigroup.semigroupRecordCons(dictIsSymbol)()(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());
                }
              };
            };
          };
        };
      };
      var power = function(dictMonoid) {
        return function(x) {
          var go = function(p) {
            if (p <= 0) {
              return mempty(dictMonoid);
            }
            ;
            if (p === 1) {
              return x;
            }
            ;
            if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {
              var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
              return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);
            }
            ;
            if (Data_Boolean.otherwise) {
              var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));
              return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));
            }
            ;
            throw new Error("Failed pattern match at Data.Monoid (line 86, column 3 - line 86, column 17): " + [p.constructor.name]);
          };
          return go;
        };
      };
      var guard = function(dictMonoid) {
        return function(v) {
          return function(v1) {
            if (v) {
              return v1;
            }
            ;
            if (!v) {
              return mempty(dictMonoid);
            }
            ;
            throw new Error("Failed pattern match at Data.Monoid (line 94, column 1 - line 94, column 49): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      };
      module.exports = {
        mempty,
        power,
        guard,
        memptyRecord,
        monoidUnit,
        monoidOrdering,
        monoidFn,
        monoidString,
        monoidArray,
        monoidRecord,
        monoidRecordNil,
        monoidRecordCons
      };
    }
  });

  // output/Effect/index.js
  var require_Effect = __commonJS({
    "output/Effect/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign14();
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Control_Monad = require_Control7();
      var Data_Monoid = require_Data18();
      var Data_Semigroup = require_Data7();
      var monadEffect = {
        Applicative0: function() {
          return applicativeEffect;
        },
        Bind1: function() {
          return bindEffect;
        }
      };
      var bindEffect = {
        bind: $foreign.bindE,
        Apply0: function() {
          return applyEffect;
        }
      };
      var applyEffect = {
        apply: Control_Monad.ap(monadEffect),
        Functor0: function() {
          return functorEffect;
        }
      };
      var applicativeEffect = {
        pure: $foreign.pureE,
        Apply0: function() {
          return applyEffect;
        }
      };
      var functorEffect = {
        map: Control_Applicative.liftA1(applicativeEffect)
      };
      var semigroupEffect = function(dictSemigroup) {
        return {
          append: Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup))
        };
      };
      var monoidEffect = function(dictMonoid) {
        return {
          mempty: $foreign.pureE(Data_Monoid.mempty(dictMonoid)),
          Semigroup0: function() {
            return semigroupEffect(dictMonoid.Semigroup0());
          }
        };
      };
      module.exports = {
        functorEffect,
        applyEffect,
        applicativeEffect,
        bindEffect,
        monadEffect,
        semigroupEffect,
        monoidEffect,
        untilE: $foreign.untilE,
        whileE: $foreign.whileE,
        forE: $foreign.forE,
        foreachE: $foreign.foreachE
      };
    }
  });

  // output/Effect.Class/index.js
  var require_Effect2 = __commonJS({
    "output/Effect.Class/index.js"(exports, module) {
      "use strict";
      var Control_Category = require_Control2();
      var Effect = require_Effect();
      var monadEffectEffect = {
        liftEffect: Control_Category.identity(Control_Category.categoryFn),
        Monad0: function() {
          return Effect.monadEffect;
        }
      };
      var liftEffect = function(dict) {
        return dict.liftEffect;
      };
      module.exports = {
        liftEffect,
        monadEffectEffect
      };
    }
  });

  // output/Effect.Console/foreign.js
  var require_foreign16 = __commonJS({
    "output/Effect.Console/foreign.js"(exports) {
      "use strict";
      exports.log = function(s) {
        return function() {
          console.log(s);
        };
      };
      exports.warn = function(s) {
        return function() {
          console.warn(s);
        };
      };
      exports.error = function(s) {
        return function() {
          console.error(s);
        };
      };
      exports.info = function(s) {
        return function() {
          console.info(s);
        };
      };
      exports.time = function(s) {
        return function() {
          console.time(s);
        };
      };
      exports.timeLog = function(s) {
        return function() {
          console.timeLog(s);
        };
      };
      exports.timeEnd = function(s) {
        return function() {
          console.timeEnd(s);
        };
      };
      exports.clear = function() {
        console.clear();
      };
    }
  });

  // output/Effect.Console/index.js
  var require_Effect3 = __commonJS({
    "output/Effect.Console/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign16();
      var Data_Show = require_Data14();
      var warnShow = function(dictShow) {
        return function(a) {
          return $foreign.warn(Data_Show.show(dictShow)(a));
        };
      };
      var logShow = function(dictShow) {
        return function(a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
        };
      };
      var infoShow = function(dictShow) {
        return function(a) {
          return $foreign.info(Data_Show.show(dictShow)(a));
        };
      };
      var errorShow = function(dictShow) {
        return function(a) {
          return $foreign.error(Data_Show.show(dictShow)(a));
        };
      };
      module.exports = {
        logShow,
        warnShow,
        errorShow,
        infoShow,
        log: $foreign.log,
        warn: $foreign.warn,
        error: $foreign.error,
        info: $foreign.info,
        time: $foreign.time,
        timeLog: $foreign.timeLog,
        timeEnd: $foreign.timeEnd,
        clear: $foreign.clear
      };
    }
  });

  // output/Effect.Class.Console/index.js
  var require_Effect_Class = __commonJS({
    "output/Effect.Class.Console/index.js"(exports, module) {
      "use strict";
      var Effect_Class = require_Effect2();
      var Effect_Console = require_Effect3();
      var warnShow = function(dictMonadEffect) {
        return function(dictShow) {
          var $16 = Effect_Class.liftEffect(dictMonadEffect);
          var $17 = Effect_Console.warnShow(dictShow);
          return function($18) {
            return $16($17($18));
          };
        };
      };
      var warn = function(dictMonadEffect) {
        var $19 = Effect_Class.liftEffect(dictMonadEffect);
        return function($20) {
          return $19(Effect_Console.warn($20));
        };
      };
      var timeLog = function(dictMonadEffect) {
        var $21 = Effect_Class.liftEffect(dictMonadEffect);
        return function($22) {
          return $21(Effect_Console.timeLog($22));
        };
      };
      var timeEnd = function(dictMonadEffect) {
        var $23 = Effect_Class.liftEffect(dictMonadEffect);
        return function($24) {
          return $23(Effect_Console.timeEnd($24));
        };
      };
      var time = function(dictMonadEffect) {
        var $25 = Effect_Class.liftEffect(dictMonadEffect);
        return function($26) {
          return $25(Effect_Console.time($26));
        };
      };
      var logShow = function(dictMonadEffect) {
        return function(dictShow) {
          var $27 = Effect_Class.liftEffect(dictMonadEffect);
          var $28 = Effect_Console.logShow(dictShow);
          return function($29) {
            return $27($28($29));
          };
        };
      };
      var log = function(dictMonadEffect) {
        var $30 = Effect_Class.liftEffect(dictMonadEffect);
        return function($31) {
          return $30(Effect_Console.log($31));
        };
      };
      var infoShow = function(dictMonadEffect) {
        return function(dictShow) {
          var $32 = Effect_Class.liftEffect(dictMonadEffect);
          var $33 = Effect_Console.infoShow(dictShow);
          return function($34) {
            return $32($33($34));
          };
        };
      };
      var info = function(dictMonadEffect) {
        var $35 = Effect_Class.liftEffect(dictMonadEffect);
        return function($36) {
          return $35(Effect_Console.info($36));
        };
      };
      var errorShow = function(dictMonadEffect) {
        return function(dictShow) {
          var $37 = Effect_Class.liftEffect(dictMonadEffect);
          var $38 = Effect_Console.errorShow(dictShow);
          return function($39) {
            return $37($38($39));
          };
        };
      };
      var error = function(dictMonadEffect) {
        var $40 = Effect_Class.liftEffect(dictMonadEffect);
        return function($41) {
          return $40(Effect_Console.error($41));
        };
      };
      var clear = function(dictMonadEffect) {
        return Effect_Class.liftEffect(dictMonadEffect)(Effect_Console.clear);
      };
      module.exports = {
        log,
        logShow,
        warn,
        warnShow,
        error,
        errorShow,
        info,
        infoShow,
        time,
        timeLog,
        timeEnd,
        clear
      };
    }
  });

  // node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "node_modules/tslib/tslib.js"(exports, module) {
      var __extends;
      var __assign;
      var __rest;
      var __decorate;
      var __param;
      var __metadata;
      var __awaiter;
      var __generator;
      var __exportStar;
      var __values;
      var __read;
      var __spread;
      var __spreadArrays;
      var __spreadArray;
      var __await;
      var __asyncGenerator;
      var __asyncDelegator;
      var __asyncValues;
      var __makeTemplateObject;
      var __importStar;
      var __importDefault;
      var __classPrivateFieldGet;
      var __classPrivateFieldSet;
      var __createBinding;
      (function(factory) {
        var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root, createExporter(module.exports)));
        } else {
          factory(createExporter(root));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v) {
            return exports2[id] = previous ? previous(id, v) : v;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b)
            if (Object.prototype.hasOwnProperty.call(b, p))
              d[p] = b[p];
        };
        __extends = function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        __rest = function(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
            }
          return t;
        };
        __decorate = function(decorators, target, key, desc) {
          var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator = function(thisArg, body) {
          var _ = { label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: [] }, f, y, t, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar = function(m, o) {
          for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
              __createBinding(o, m, p);
        };
        __createBinding = Object.create ? function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          Object.defineProperty(o, k2, { enumerable: true, get: function() {
            return m[k];
          } });
        } : function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __values = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
          return ar;
        };
        __spreadArrays = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };
        __spreadArray = function(to, from, pack) {
          if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
          return to.concat(ar || Array.prototype.slice.call(from));
        };
        __await = function(v) {
          return this instanceof __await ? (this.v = v, this) : new __await(v);
        };
        __asyncGenerator = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if (f(v), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v) {
              return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
          }
        };
        __asyncValues = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v) {
              return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o, v) {
          Object.defineProperty(o, "default", { enumerable: true, value: v });
        } : function(o, v) {
          o["default"] = v;
        };
        __importStar = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        __importDefault = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet = function(receiver, state, kind, f) {
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
        };
        __classPrivateFieldSet = function(receiver, state, value, kind, f) {
          if (kind === "m")
            throw new TypeError("Private method is not writable");
          if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
        };
        exporter("__extends", __extends);
        exporter("__assign", __assign);
        exporter("__rest", __rest);
        exporter("__decorate", __decorate);
        exporter("__param", __param);
        exporter("__metadata", __metadata);
        exporter("__awaiter", __awaiter);
        exporter("__generator", __generator);
        exporter("__exportStar", __exportStar);
        exporter("__createBinding", __createBinding);
        exporter("__values", __values);
        exporter("__read", __read);
        exporter("__spread", __spread);
        exporter("__spreadArrays", __spreadArrays);
        exporter("__spreadArray", __spreadArray);
        exporter("__await", __await);
        exporter("__asyncGenerator", __asyncGenerator);
        exporter("__asyncDelegator", __asyncDelegator);
        exporter("__asyncValues", __asyncValues);
        exporter("__makeTemplateObject", __makeTemplateObject);
        exporter("__importStar", __importStar);
        exporter("__importDefault", __importDefault);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet);
      });
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          exports.StrictMode = 60108;
          exports.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            exports.StrictMode = symbolFor("react.strict_mode");
            exports.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          _assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports.Profiler:
                return "Profiler";
              case exports.StrictMode:
                return "StrictMode";
              case exports.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error2) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (render.displayName == null) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (type.displayName == null) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (Array.isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              /* @__PURE__ */ new Map([[frozenObject, null]]);
              /* @__PURE__ */ new Set([frozenObject]);
            } catch (e) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.PureComponent = PureComponent;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useEffect = useEffect;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef;
          exports.useState = useState;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/hey-listen/dist/index.js
  var require_dist = __commonJS({
    "node_modules/hey-listen/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.warning = function() {
      };
      exports.invariant = function() {
      };
      if (true) {
        exports.warning = function(check, message) {
          if (!check && typeof console !== "undefined") {
            console.warn(message);
          }
        };
        exports.invariant = function(check, message) {
          if (!check) {
            throw new Error(message);
          }
        };
      }
    }
  });

  // node_modules/framesync/dist/framesync.cjs.js
  var require_framesync_cjs = __commonJS({
    "node_modules/framesync/dist/framesync.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var defaultTimestep = 1 / 60 * 1e3;
      var getCurrentTime = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
      var onNextFrame = typeof window !== "undefined" ? (callback) => window.requestAnimationFrame(callback) : (callback) => setTimeout(() => callback(getCurrentTime()), defaultTimestep);
      function createRenderStep(runNextFrame2) {
        let toRun = [];
        let toRunNextFrame = [];
        let numToRun = 0;
        let isProcessing2 = false;
        let flushNextFrame = false;
        const toKeepAlive = new WeakSet();
        const step = {
          schedule: (callback, keepAlive = false, immediate = false) => {
            const addToCurrentFrame = immediate && isProcessing2;
            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
            if (keepAlive)
              toKeepAlive.add(callback);
            if (buffer.indexOf(callback) === -1) {
              buffer.push(callback);
              if (addToCurrentFrame && isProcessing2)
                numToRun = toRun.length;
            }
            return callback;
          },
          cancel: (callback) => {
            const index = toRunNextFrame.indexOf(callback);
            if (index !== -1)
              toRunNextFrame.splice(index, 1);
            toKeepAlive.delete(callback);
          },
          process: (frameData) => {
            if (isProcessing2) {
              flushNextFrame = true;
              return;
            }
            isProcessing2 = true;
            [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
            toRunNextFrame.length = 0;
            numToRun = toRun.length;
            if (numToRun) {
              for (let i = 0; i < numToRun; i++) {
                const callback = toRun[i];
                callback(frameData);
                if (toKeepAlive.has(callback)) {
                  step.schedule(callback);
                  runNextFrame2();
                }
              }
            }
            isProcessing2 = false;
            if (flushNextFrame) {
              flushNextFrame = false;
              step.process(frameData);
            }
          }
        };
        return step;
      }
      var maxElapsed = 40;
      var useDefaultElapsed = true;
      var runNextFrame = false;
      var isProcessing = false;
      var frame = {
        delta: 0,
        timestamp: 0
      };
      var stepsOrder = [
        "read",
        "update",
        "preRender",
        "render",
        "postRender"
      ];
      var steps = stepsOrder.reduce((acc, key) => {
        acc[key] = createRenderStep(() => runNextFrame = true);
        return acc;
      }, {});
      var sync = stepsOrder.reduce((acc, key) => {
        const step = steps[key];
        acc[key] = (process2, keepAlive = false, immediate = false) => {
          if (!runNextFrame)
            startLoop();
          return step.schedule(process2, keepAlive, immediate);
        };
        return acc;
      }, {});
      var cancelSync = stepsOrder.reduce((acc, key) => {
        acc[key] = steps[key].cancel;
        return acc;
      }, {});
      var flushSync = stepsOrder.reduce((acc, key) => {
        acc[key] = () => steps[key].process(frame);
        return acc;
      }, {});
      var processStep = (stepId) => steps[stepId].process(frame);
      var processFrame = (timestamp) => {
        runNextFrame = false;
        frame.delta = useDefaultElapsed ? defaultTimestep : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
        frame.timestamp = timestamp;
        isProcessing = true;
        stepsOrder.forEach(processStep);
        isProcessing = false;
        if (runNextFrame) {
          useDefaultElapsed = false;
          onNextFrame(processFrame);
        }
      };
      var startLoop = () => {
        runNextFrame = true;
        useDefaultElapsed = true;
        if (!isProcessing)
          onNextFrame(processFrame);
      };
      var getFrameData = () => frame;
      exports.cancelSync = cancelSync;
      exports.default = sync;
      exports.flushSync = flushSync;
      exports.getFrameData = getFrameData;
    }
  });

  // node_modules/style-value-types/dist/valueTypes.cjs.js
  var require_valueTypes_cjs = __commonJS({
    "node_modules/style-value-types/dist/valueTypes.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var clamp = (min, max) => (v) => Math.max(Math.min(v, max), min);
      var sanitize = (v) => v % 1 ? Number(v.toFixed(5)) : v;
      var floatRegex = /(-)?([\d]*\.?[\d])+/g;
      var colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi;
      var singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;
      function isString(v) {
        return typeof v === "string";
      }
      var number = {
        test: (v) => typeof v === "number",
        parse: parseFloat,
        transform: (v) => v
      };
      var alpha = Object.assign(Object.assign({}, number), { transform: clamp(0, 1) });
      var scale = Object.assign(Object.assign({}, number), { default: 1 });
      var createUnitType = (unit) => ({
        test: (v) => isString(v) && v.endsWith(unit) && v.split(" ").length === 1,
        parse: parseFloat,
        transform: (v) => `${v}${unit}`
      });
      var degrees = createUnitType("deg");
      var percent = createUnitType("%");
      var px = createUnitType("px");
      var vh = createUnitType("vh");
      var vw = createUnitType("vw");
      var progressPercentage = Object.assign(Object.assign({}, percent), { parse: (v) => percent.parse(v) / 100, transform: (v) => percent.transform(v * 100) });
      var isColorString = (type, testProp) => (v) => {
        return Boolean(isString(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
      };
      var splitColor = (aName, bName, cName) => (v) => {
        if (!isString(v))
          return v;
        const [a, b, c, alpha2] = v.match(floatRegex);
        return {
          [aName]: parseFloat(a),
          [bName]: parseFloat(b),
          [cName]: parseFloat(c),
          alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
        };
      };
      var hsla = {
        test: isColorString("hsl", "hue"),
        parse: splitColor("hue", "saturation", "lightness"),
        transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
          return "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
        }
      };
      var clampRgbUnit = clamp(0, 255);
      var rgbUnit = Object.assign(Object.assign({}, number), { transform: (v) => Math.round(clampRgbUnit(v)) });
      var rgba = {
        test: isColorString("rgb", "red"),
        parse: splitColor("red", "green", "blue"),
        transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
      };
      function parseHex(v) {
        let r = "";
        let g = "";
        let b = "";
        let a = "";
        if (v.length > 5) {
          r = v.substr(1, 2);
          g = v.substr(3, 2);
          b = v.substr(5, 2);
          a = v.substr(7, 2);
        } else {
          r = v.substr(1, 1);
          g = v.substr(2, 1);
          b = v.substr(3, 1);
          a = v.substr(4, 1);
          r += r;
          g += g;
          b += b;
          a += a;
        }
        return {
          red: parseInt(r, 16),
          green: parseInt(g, 16),
          blue: parseInt(b, 16),
          alpha: a ? parseInt(a, 16) / 255 : 1
        };
      }
      var hex = {
        test: isColorString("#"),
        parse: parseHex,
        transform: rgba.transform
      };
      var color = {
        test: (v) => rgba.test(v) || hex.test(v) || hsla.test(v),
        parse: (v) => {
          if (rgba.test(v)) {
            return rgba.parse(v);
          } else if (hsla.test(v)) {
            return hsla.parse(v);
          } else {
            return hex.parse(v);
          }
        },
        transform: (v) => {
          return isString(v) ? v : v.hasOwnProperty("red") ? rgba.transform(v) : hsla.transform(v);
        }
      };
      var colorToken = "${c}";
      var numberToken = "${n}";
      function test(v) {
        var _a, _b, _c, _d;
        return isNaN(v) && isString(v) && ((_b = (_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0;
      }
      function analyse(v) {
        if (typeof v === "number")
          v = `${v}`;
        const values = [];
        let numColors = 0;
        const colors = v.match(colorRegex);
        if (colors) {
          numColors = colors.length;
          v = v.replace(colorRegex, colorToken);
          values.push(...colors.map(color.parse));
        }
        const numbers = v.match(floatRegex);
        if (numbers) {
          v = v.replace(floatRegex, numberToken);
          values.push(...numbers.map(number.parse));
        }
        return { values, numColors, tokenised: v };
      }
      function parse(v) {
        return analyse(v).values;
      }
      function createTransformer(v) {
        const { values, numColors, tokenised } = analyse(v);
        const numValues = values.length;
        return (v2) => {
          let output = tokenised;
          for (let i = 0; i < numValues; i++) {
            output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color.transform(v2[i]) : sanitize(v2[i]));
          }
          return output;
        };
      }
      var convertNumbersToZero = (v) => typeof v === "number" ? 0 : v;
      function getAnimatableNone(v) {
        const parsed = parse(v);
        const transformer = createTransformer(v);
        return transformer(parsed.map(convertNumbersToZero));
      }
      var complex = { test, parse, createTransformer, getAnimatableNone };
      var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
      function applyDefaultFilter(v) {
        let [name, value] = v.slice(0, -1).split("(");
        if (name === "drop-shadow")
          return v;
        const [number2] = value.match(floatRegex) || [];
        if (!number2)
          return v;
        const unit = value.replace(number2, "");
        let defaultValue = maxDefaults.has(name) ? 1 : 0;
        if (number2 !== value)
          defaultValue *= 100;
        return name + "(" + defaultValue + unit + ")";
      }
      var functionRegex = /([a-z-]*)\(.*?\)/g;
      var filter = Object.assign(Object.assign({}, complex), { getAnimatableNone: (v) => {
        const functions = v.match(functionRegex);
        return functions ? functions.map(applyDefaultFilter).join(" ") : v;
      } });
      exports.alpha = alpha;
      exports.color = color;
      exports.complex = complex;
      exports.degrees = degrees;
      exports.filter = filter;
      exports.hex = hex;
      exports.hsla = hsla;
      exports.number = number;
      exports.percent = percent;
      exports.progressPercentage = progressPercentage;
      exports.px = px;
      exports.rgbUnit = rgbUnit;
      exports.rgba = rgba;
      exports.scale = scale;
      exports.vh = vh;
      exports.vw = vw;
    }
  });

  // node_modules/popmotion/dist/popmotion.cjs.js
  var require_popmotion_cjs = __commonJS({
    "node_modules/popmotion/dist/popmotion.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib = require_tslib();
      var heyListen = require_dist();
      var styleValueTypes = require_valueTypes_cjs();
      var sync = require_framesync_cjs();
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { "default": e };
      }
      var sync__default = /* @__PURE__ */ _interopDefaultLegacy(sync);
      var clamp = (min, max, v) => Math.min(Math.max(v, min), max);
      var safeMin = 1e-3;
      var minDuration = 0.01;
      var maxDuration = 10;
      var minDamping = 0.05;
      var maxDamping = 1;
      function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
        let envelope;
        let derivative;
        heyListen.warning(duration <= maxDuration * 1e3, "Spring duration must be 10 seconds or less");
        let dampingRatio = 1 - bounce;
        dampingRatio = clamp(minDamping, maxDamping, dampingRatio);
        duration = clamp(minDuration, maxDuration, duration / 1e3);
        if (dampingRatio < 1) {
          envelope = (undampedFreq2) => {
            const exponentialDecay = undampedFreq2 * dampingRatio;
            const delta = exponentialDecay * duration;
            const a2 = exponentialDecay - velocity;
            const b2 = calcAngularFreq(undampedFreq2, dampingRatio);
            const c2 = Math.exp(-delta);
            return safeMin - a2 / b2 * c2;
          };
          derivative = (undampedFreq2) => {
            const exponentialDecay = undampedFreq2 * dampingRatio;
            const delta = exponentialDecay * duration;
            const d = delta * velocity + velocity;
            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
            const f = Math.exp(-delta);
            const g = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
            const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
            return factor * ((d - e) * f) / g;
          };
        } else {
          envelope = (undampedFreq2) => {
            const a2 = Math.exp(-undampedFreq2 * duration);
            const b2 = (undampedFreq2 - velocity) * duration + 1;
            return -safeMin + a2 * b2;
          };
          derivative = (undampedFreq2) => {
            const a2 = Math.exp(-undampedFreq2 * duration);
            const b2 = (velocity - undampedFreq2) * (duration * duration);
            return a2 * b2;
          };
        }
        const initialGuess = 5 / duration;
        const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
        duration = duration * 1e3;
        if (isNaN(undampedFreq)) {
          return {
            stiffness: 100,
            damping: 10,
            duration
          };
        } else {
          const stiffness = Math.pow(undampedFreq, 2) * mass;
          return {
            stiffness,
            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
            duration
          };
        }
      }
      var rootIterations = 12;
      function approximateRoot(envelope, derivative, initialGuess) {
        let result = initialGuess;
        for (let i = 1; i < rootIterations; i++) {
          result = result - envelope(result) / derivative(result);
        }
        return result;
      }
      function calcAngularFreq(undampedFreq, dampingRatio) {
        return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
      }
      var durationKeys = ["duration", "bounce"];
      var physicsKeys = ["stiffness", "damping", "mass"];
      function isSpringType(options, keys) {
        return keys.some((key) => options[key] !== void 0);
      }
      function getSpringOptions(options) {
        let springOptions = Object.assign({ velocity: 0, stiffness: 100, damping: 10, mass: 1, isResolvedFromDuration: false }, options);
        if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
          const derived = findSpring(options);
          springOptions = Object.assign(Object.assign(Object.assign({}, springOptions), derived), { velocity: 0, mass: 1 });
          springOptions.isResolvedFromDuration = true;
        }
        return springOptions;
      }
      function spring(_a) {
        var { from = 0, to = 1, restSpeed = 2, restDelta } = _a, options = tslib.__rest(_a, ["from", "to", "restSpeed", "restDelta"]);
        const state = { done: false, value: from };
        let { stiffness, damping, mass, velocity, duration, isResolvedFromDuration } = getSpringOptions(options);
        let resolveSpring = zero;
        let resolveVelocity = zero;
        function createSpring() {
          const initialVelocity = velocity ? -(velocity / 1e3) : 0;
          const initialDelta = to - from;
          const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
          const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1e3;
          restDelta !== null && restDelta !== void 0 ? restDelta : restDelta = Math.abs(to - from) <= 1 ? 0.01 : 0.4;
          if (dampingRatio < 1) {
            const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
            resolveSpring = (t) => {
              const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
              return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));
            };
            resolveVelocity = (t) => {
              const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
              return dampingRatio * undampedAngularFreq * envelope * (Math.sin(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq + initialDelta * Math.cos(angularFreq * t)) - envelope * (Math.cos(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) - angularFreq * initialDelta * Math.sin(angularFreq * t));
            };
          } else if (dampingRatio === 1) {
            resolveSpring = (t) => to - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);
          } else {
            const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
            resolveSpring = (t) => {
              const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
              const freqForT = Math.min(dampedAngularFreq * t, 300);
              return to - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
            };
          }
        }
        createSpring();
        return {
          next: (t) => {
            const current = resolveSpring(t);
            if (!isResolvedFromDuration) {
              const currentVelocity = resolveVelocity(t) * 1e3;
              const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
              const isBelowDisplacementThreshold = Math.abs(to - current) <= restDelta;
              state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
            } else {
              state.done = t >= duration;
            }
            state.value = state.done ? to : current;
            return state;
          },
          flipTarget: () => {
            velocity = -velocity;
            [from, to] = [to, from];
            createSpring();
          }
        };
      }
      spring.needsInterpolation = (a2, b2) => typeof a2 === "string" || typeof b2 === "string";
      var zero = (_t) => 0;
      var progress = (from, to, value) => {
        const toFromDifference = to - from;
        return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
      };
      var mix = (from, to, progress2) => -progress2 * from + progress2 * to + from;
      function hueToRgb(p, q, t) {
        if (t < 0)
          t += 1;
        if (t > 1)
          t -= 1;
        if (t < 1 / 6)
          return p + (q - p) * 6 * t;
        if (t < 1 / 2)
          return q;
        if (t < 2 / 3)
          return p + (q - p) * (2 / 3 - t) * 6;
        return p;
      }
      function hslaToRgba({ hue, saturation, lightness, alpha }) {
        hue /= 360;
        saturation /= 100;
        lightness /= 100;
        let red = 0;
        let green = 0;
        let blue = 0;
        if (!saturation) {
          red = green = blue = lightness;
        } else {
          const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
          const p = 2 * lightness - q;
          red = hueToRgb(p, q, hue + 1 / 3);
          green = hueToRgb(p, q, hue);
          blue = hueToRgb(p, q, hue - 1 / 3);
        }
        return {
          red: Math.round(red * 255),
          green: Math.round(green * 255),
          blue: Math.round(blue * 255),
          alpha
        };
      }
      var mixLinearColor = (from, to, v) => {
        const fromExpo = from * from;
        const toExpo = to * to;
        return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));
      };
      var colorTypes = [styleValueTypes.hex, styleValueTypes.rgba, styleValueTypes.hsla];
      var getColorType = (v) => colorTypes.find((type) => type.test(v));
      var notAnimatable = (color) => `'${color}' is not an animatable color. Use the equivalent color code instead.`;
      var mixColor = (from, to) => {
        let fromColorType = getColorType(from);
        let toColorType = getColorType(to);
        heyListen.invariant(!!fromColorType, notAnimatable(from));
        heyListen.invariant(!!toColorType, notAnimatable(to));
        let fromColor = fromColorType.parse(from);
        let toColor = toColorType.parse(to);
        if (fromColorType === styleValueTypes.hsla) {
          fromColor = hslaToRgba(fromColor);
          fromColorType = styleValueTypes.rgba;
        }
        if (toColorType === styleValueTypes.hsla) {
          toColor = hslaToRgba(toColor);
          toColorType = styleValueTypes.rgba;
        }
        const blended = Object.assign({}, fromColor);
        return (v) => {
          for (const key in blended) {
            if (key !== "alpha") {
              blended[key] = mixLinearColor(fromColor[key], toColor[key], v);
            }
          }
          blended.alpha = mix(fromColor.alpha, toColor.alpha, v);
          return fromColorType.transform(blended);
        };
      };
      var zeroPoint = {
        x: 0,
        y: 0,
        z: 0
      };
      var isNum = (v) => typeof v === "number";
      var combineFunctions = (a2, b2) => (v) => b2(a2(v));
      var pipe = (...transformers) => transformers.reduce(combineFunctions);
      function getMixer(origin, target) {
        if (isNum(origin)) {
          return (v) => mix(origin, target, v);
        } else if (styleValueTypes.color.test(origin)) {
          return mixColor(origin, target);
        } else {
          return mixComplex(origin, target);
        }
      }
      var mixArray = (from, to) => {
        const output = [...from];
        const numValues = output.length;
        const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));
        return (v) => {
          for (let i = 0; i < numValues; i++) {
            output[i] = blendValue[i](v);
          }
          return output;
        };
      };
      var mixObject = (origin, target) => {
        const output = Object.assign(Object.assign({}, origin), target);
        const blendValue = {};
        for (const key in output) {
          if (origin[key] !== void 0 && target[key] !== void 0) {
            blendValue[key] = getMixer(origin[key], target[key]);
          }
        }
        return (v) => {
          for (const key in blendValue) {
            output[key] = blendValue[key](v);
          }
          return output;
        };
      };
      function analyse(value) {
        const parsed = styleValueTypes.complex.parse(value);
        const numValues = parsed.length;
        let numNumbers = 0;
        let numRGB = 0;
        let numHSL = 0;
        for (let i = 0; i < numValues; i++) {
          if (numNumbers || typeof parsed[i] === "number") {
            numNumbers++;
          } else {
            if (parsed[i].hue !== void 0) {
              numHSL++;
            } else {
              numRGB++;
            }
          }
        }
        return { parsed, numNumbers, numRGB, numHSL };
      }
      var mixComplex = (origin, target) => {
        const template = styleValueTypes.complex.createTransformer(target);
        const originStats = analyse(origin);
        const targetStats = analyse(target);
        const canInterpolate = originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers;
        if (canInterpolate) {
          return pipe(mixArray(originStats.parsed, targetStats.parsed), template);
        } else {
          heyListen.warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
          return (p) => `${p > 0 ? target : origin}`;
        }
      };
      var mixNumber = (from, to) => (p) => mix(from, to, p);
      function detectMixerFactory(v) {
        if (typeof v === "number") {
          return mixNumber;
        } else if (typeof v === "string") {
          if (styleValueTypes.color.test(v)) {
            return mixColor;
          } else {
            return mixComplex;
          }
        } else if (Array.isArray(v)) {
          return mixArray;
        } else if (typeof v === "object") {
          return mixObject;
        }
      }
      function createMixers(output, ease, customMixer) {
        const mixers = [];
        const mixerFactory = customMixer || detectMixerFactory(output[0]);
        const numMixers = output.length - 1;
        for (let i = 0; i < numMixers; i++) {
          let mixer = mixerFactory(output[i], output[i + 1]);
          if (ease) {
            const easingFunction = Array.isArray(ease) ? ease[i] : ease;
            mixer = pipe(easingFunction, mixer);
          }
          mixers.push(mixer);
        }
        return mixers;
      }
      function fastInterpolate([from, to], [mixer]) {
        return (v) => mixer(progress(from, to, v));
      }
      function slowInterpolate(input, mixers) {
        const inputLength = input.length;
        const lastInputIndex = inputLength - 1;
        return (v) => {
          let mixerIndex = 0;
          let foundMixerIndex = false;
          if (v <= input[0]) {
            foundMixerIndex = true;
          } else if (v >= input[lastInputIndex]) {
            mixerIndex = lastInputIndex - 1;
            foundMixerIndex = true;
          }
          if (!foundMixerIndex) {
            let i = 1;
            for (; i < inputLength; i++) {
              if (input[i] > v || i === lastInputIndex) {
                break;
              }
            }
            mixerIndex = i - 1;
          }
          const progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);
          return mixers[mixerIndex](progressInRange);
        };
      }
      function interpolate(input, output, { clamp: isClamp = true, ease, mixer } = {}) {
        const inputLength = input.length;
        heyListen.invariant(inputLength === output.length, "Both input and output ranges must be the same length");
        heyListen.invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, "Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.");
        if (input[0] > input[inputLength - 1]) {
          input = [].concat(input);
          output = [].concat(output);
          input.reverse();
          output.reverse();
        }
        const mixers = createMixers(output, ease, mixer);
        const interpolator = inputLength === 2 ? fastInterpolate(input, mixers) : slowInterpolate(input, mixers);
        return isClamp ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v)) : interpolator;
      }
      var reverseEasing = (easing) => (p) => 1 - easing(1 - p);
      var mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;
      var createExpoIn = (power) => (p) => Math.pow(p, power);
      var createBackIn = (power) => (p) => p * p * ((power + 1) * p - power);
      var createAnticipate = (power) => {
        const backEasing = createBackIn(power);
        return (p) => (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));
      };
      var DEFAULT_OVERSHOOT_STRENGTH = 1.525;
      var BOUNCE_FIRST_THRESHOLD = 4 / 11;
      var BOUNCE_SECOND_THRESHOLD = 8 / 11;
      var BOUNCE_THIRD_THRESHOLD = 9 / 10;
      var linear = (p) => p;
      var easeIn = createExpoIn(2);
      var easeOut = reverseEasing(easeIn);
      var easeInOut = mirrorEasing(easeIn);
      var circIn = (p) => 1 - Math.sin(Math.acos(p));
      var circOut = reverseEasing(circIn);
      var circInOut = mirrorEasing(circOut);
      var backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
      var backOut = reverseEasing(backIn);
      var backInOut = mirrorEasing(backIn);
      var anticipate = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);
      var ca = 4356 / 361;
      var cb = 35442 / 1805;
      var cc = 16061 / 1805;
      var bounceOut = (p) => {
        if (p === 1 || p === 0)
          return p;
        const p2 = p * p;
        return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;
      };
      var bounceIn = reverseEasing(bounceOut);
      var bounceInOut = (p) => p < 0.5 ? 0.5 * (1 - bounceOut(1 - p * 2)) : 0.5 * bounceOut(p * 2 - 1) + 0.5;
      function defaultEasing(values, easing) {
        return values.map(() => easing || easeInOut).splice(0, values.length - 1);
      }
      function defaultOffset(values) {
        const numValues = values.length;
        return values.map((_value, i) => i !== 0 ? i / (numValues - 1) : 0);
      }
      function convertOffsetToTimes(offset, duration) {
        return offset.map((o) => o * duration);
      }
      function keyframes({ from = 0, to = 1, ease, offset, duration = 300 }) {
        const state = { done: false, value: from };
        const values = Array.isArray(to) ? to : [from, to];
        const times = convertOffsetToTimes(offset && offset.length === values.length ? offset : defaultOffset(values), duration);
        function createInterpolator() {
          return interpolate(times, values, {
            ease: Array.isArray(ease) ? ease : defaultEasing(values, ease)
          });
        }
        let interpolator = createInterpolator();
        return {
          next: (t) => {
            state.value = interpolator(t);
            state.done = t >= duration;
            return state;
          },
          flipTarget: () => {
            values.reverse();
            interpolator = createInterpolator();
          }
        };
      }
      function decay({ velocity = 0, from = 0, power = 0.8, timeConstant = 350, restDelta = 0.5, modifyTarget }) {
        const state = { done: false, value: from };
        let amplitude = power * velocity;
        const ideal = from + amplitude;
        const target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
        if (target !== ideal)
          amplitude = target - from;
        return {
          next: (t) => {
            const delta = -amplitude * Math.exp(-t / timeConstant);
            state.done = !(delta > restDelta || delta < -restDelta);
            state.value = state.done ? target : target + delta;
            return state;
          },
          flipTarget: () => {
          }
        };
      }
      var types = { keyframes, spring, decay };
      function detectAnimationFromOptions(config) {
        if (Array.isArray(config.to)) {
          return keyframes;
        } else if (types[config.type]) {
          return types[config.type];
        }
        const keys = new Set(Object.keys(config));
        if (keys.has("ease") || keys.has("duration") && !keys.has("dampingRatio")) {
          return keyframes;
        } else if (keys.has("dampingRatio") || keys.has("stiffness") || keys.has("mass") || keys.has("damping") || keys.has("restSpeed") || keys.has("restDelta")) {
          return spring;
        }
        return keyframes;
      }
      function loopElapsed(elapsed, duration, delay = 0) {
        return elapsed - duration - delay;
      }
      function reverseElapsed(elapsed, duration, delay = 0, isForwardPlayback = true) {
        return isForwardPlayback ? loopElapsed(duration + -elapsed, duration, delay) : duration - (elapsed - duration) + delay;
      }
      function hasRepeatDelayElapsed(elapsed, duration, delay, isForwardPlayback) {
        return isForwardPlayback ? elapsed >= duration + delay : elapsed <= -delay;
      }
      var framesync = (update) => {
        const passTimestamp = ({ delta }) => update(delta);
        return {
          start: () => sync__default["default"].update(passTimestamp, true),
          stop: () => sync.cancelSync.update(passTimestamp)
        };
      };
      function animate(_a) {
        var _b, _c;
        var { from, autoplay = true, driver = framesync, elapsed = 0, repeat: repeatMax = 0, repeatType = "loop", repeatDelay = 0, onPlay, onStop, onComplete, onRepeat, onUpdate } = _a, options = tslib.__rest(_a, ["from", "autoplay", "driver", "elapsed", "repeat", "repeatType", "repeatDelay", "onPlay", "onStop", "onComplete", "onRepeat", "onUpdate"]);
        let { to } = options;
        let driverControls;
        let repeatCount = 0;
        let computedDuration = options.duration;
        let latest;
        let isComplete = false;
        let isForwardPlayback = true;
        let interpolateFromNumber;
        const animator = detectAnimationFromOptions(options);
        if ((_c = (_b = animator).needsInterpolation) === null || _c === void 0 ? void 0 : _c.call(_b, from, to)) {
          interpolateFromNumber = interpolate([0, 100], [from, to], {
            clamp: false
          });
          from = 0;
          to = 100;
        }
        const animation = animator(Object.assign(Object.assign({}, options), { from, to }));
        function repeat() {
          repeatCount++;
          if (repeatType === "reverse") {
            isForwardPlayback = repeatCount % 2 === 0;
            elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);
          } else {
            elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);
            if (repeatType === "mirror")
              animation.flipTarget();
          }
          isComplete = false;
          onRepeat && onRepeat();
        }
        function complete() {
          driverControls.stop();
          onComplete && onComplete();
        }
        function update(delta) {
          if (!isForwardPlayback)
            delta = -delta;
          elapsed += delta;
          if (!isComplete) {
            const state = animation.next(Math.max(0, elapsed));
            latest = state.value;
            if (interpolateFromNumber)
              latest = interpolateFromNumber(latest);
            isComplete = isForwardPlayback ? state.done : elapsed <= 0;
          }
          onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);
          if (isComplete) {
            if (repeatCount === 0)
              computedDuration !== null && computedDuration !== void 0 ? computedDuration : computedDuration = elapsed;
            if (repeatCount < repeatMax) {
              hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();
            } else {
              complete();
            }
          }
        }
        function play() {
          onPlay === null || onPlay === void 0 ? void 0 : onPlay();
          driverControls = driver(update);
          driverControls.start();
        }
        autoplay && play();
        return {
          stop: () => {
            onStop === null || onStop === void 0 ? void 0 : onStop();
            driverControls.stop();
          }
        };
      }
      function velocityPerSecond(velocity, frameDuration) {
        return frameDuration ? velocity * (1e3 / frameDuration) : 0;
      }
      function inertia({ from = 0, velocity = 0, min, max, power = 0.8, timeConstant = 750, bounceStiffness = 500, bounceDamping = 10, restDelta = 1, modifyTarget, driver, onUpdate, onComplete, onStop }) {
        let currentAnimation;
        function isOutOfBounds(v) {
          return min !== void 0 && v < min || max !== void 0 && v > max;
        }
        function boundaryNearest(v) {
          if (min === void 0)
            return max;
          if (max === void 0)
            return min;
          return Math.abs(min - v) < Math.abs(max - v) ? min : max;
        }
        function startAnimation(options) {
          currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
          currentAnimation = animate(Object.assign(Object.assign({}, options), {
            driver,
            onUpdate: (v) => {
              var _a;
              onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);
              (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, v);
            },
            onComplete,
            onStop
          }));
        }
        function startSpring(options) {
          startAnimation(Object.assign({ type: "spring", stiffness: bounceStiffness, damping: bounceDamping, restDelta }, options));
        }
        if (isOutOfBounds(from)) {
          startSpring({ from, velocity, to: boundaryNearest(from) });
        } else {
          let target = power * velocity + from;
          if (typeof modifyTarget !== "undefined")
            target = modifyTarget(target);
          const boundary = boundaryNearest(target);
          const heading = boundary === min ? -1 : 1;
          let prev;
          let current;
          const checkBoundary = (v) => {
            prev = current;
            current = v;
            velocity = velocityPerSecond(v - prev, sync.getFrameData().delta);
            if (heading === 1 && v > boundary || heading === -1 && v < boundary) {
              startSpring({ from: v, to: boundary, velocity });
            }
          };
          startAnimation({
            type: "decay",
            from,
            velocity,
            timeConstant,
            power,
            restDelta,
            modifyTarget,
            onUpdate: isOutOfBounds(target) ? checkBoundary : void 0
          });
        }
        return {
          stop: () => currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop()
        };
      }
      var radiansToDegrees = (radians) => radians * 180 / Math.PI;
      var angle = (a2, b2 = zeroPoint) => radiansToDegrees(Math.atan2(b2.y - a2.y, b2.x - a2.x));
      var applyOffset = (from, to) => {
        let hasReceivedFrom = true;
        if (to === void 0) {
          to = from;
          hasReceivedFrom = false;
        }
        return (v) => {
          if (hasReceivedFrom) {
            return v - from + to;
          } else {
            from = v;
            hasReceivedFrom = true;
            return to;
          }
        };
      };
      var identity = (v) => v;
      var createAttractor = (alterDisplacement = identity) => (constant, origin, v) => {
        const displacement = origin - v;
        const springModifiedDisplacement = -(0 - constant + 1) * (0 - alterDisplacement(Math.abs(displacement)));
        return displacement <= 0 ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;
      };
      var attract = createAttractor();
      var attractExpo = createAttractor(Math.sqrt);
      var degreesToRadians = (degrees) => degrees * Math.PI / 180;
      var isPoint = (point) => point.hasOwnProperty("x") && point.hasOwnProperty("y");
      var isPoint3D = (point) => isPoint(point) && point.hasOwnProperty("z");
      var distance1D = (a2, b2) => Math.abs(a2 - b2);
      function distance(a2, b2) {
        if (isNum(a2) && isNum(b2)) {
          return distance1D(a2, b2);
        } else if (isPoint(a2) && isPoint(b2)) {
          const xDelta = distance1D(a2.x, b2.x);
          const yDelta = distance1D(a2.y, b2.y);
          const zDelta = isPoint3D(a2) && isPoint3D(b2) ? distance1D(a2.z, b2.z) : 0;
          return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));
        }
      }
      var pointFromVector = (origin, angle2, distance2) => {
        angle2 = degreesToRadians(angle2);
        return {
          x: distance2 * Math.cos(angle2) + origin.x,
          y: distance2 * Math.sin(angle2) + origin.y
        };
      };
      var toDecimal = (num, precision = 2) => {
        precision = Math.pow(10, precision);
        return Math.round(num * precision) / precision;
      };
      var smoothFrame = (prevValue, nextValue, duration, smoothing = 0) => toDecimal(prevValue + duration * (nextValue - prevValue) / Math.max(smoothing, duration));
      var smooth = (strength = 50) => {
        let previousValue = 0;
        let lastUpdated = 0;
        return (v) => {
          const currentFramestamp = sync.getFrameData().timestamp;
          const timeDelta = currentFramestamp !== lastUpdated ? currentFramestamp - lastUpdated : 0;
          const newValue = timeDelta ? smoothFrame(previousValue, v, timeDelta, strength) : previousValue;
          lastUpdated = currentFramestamp;
          previousValue = newValue;
          return newValue;
        };
      };
      var snap = (points) => {
        if (typeof points === "number") {
          return (v) => Math.round(v / points) * points;
        } else {
          let i = 0;
          const numPoints = points.length;
          return (v) => {
            let lastDistance = Math.abs(points[0] - v);
            for (i = 1; i < numPoints; i++) {
              const point = points[i];
              const distance2 = Math.abs(point - v);
              if (distance2 === 0)
                return point;
              if (distance2 > lastDistance)
                return points[i - 1];
              if (i === numPoints - 1)
                return point;
              lastDistance = distance2;
            }
          };
        }
      };
      function velocityPerFrame(xps, frameDuration) {
        return xps / (1e3 / frameDuration);
      }
      var wrap = (min, max, v) => {
        const rangeSize = max - min;
        return ((v - min) % rangeSize + rangeSize) % rangeSize + min;
      };
      var a = (a1, a2) => 1 - 3 * a2 + 3 * a1;
      var b = (a1, a2) => 3 * a2 - 6 * a1;
      var c = (a1) => 3 * a1;
      var calcBezier = (t, a1, a2) => ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;
      var getSlope = (t, a1, a2) => 3 * a(a1, a2) * t * t + 2 * b(a1, a2) * t + c(a1);
      var subdivisionPrecision = 1e-7;
      var subdivisionMaxIterations = 10;
      function binarySubdivide(aX, aA, aB, mX1, mX2) {
        let currentX;
        let currentT;
        let i = 0;
        do {
          currentT = aA + (aB - aA) / 2;
          currentX = calcBezier(currentT, mX1, mX2) - aX;
          if (currentX > 0) {
            aB = currentT;
          } else {
            aA = currentT;
          }
        } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);
        return currentT;
      }
      var newtonIterations = 8;
      var newtonMinSlope = 1e-3;
      function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
        for (let i = 0; i < newtonIterations; ++i) {
          const currentSlope = getSlope(aGuessT, mX1, mX2);
          if (currentSlope === 0) {
            return aGuessT;
          }
          const currentX = calcBezier(aGuessT, mX1, mX2) - aX;
          aGuessT -= currentX / currentSlope;
        }
        return aGuessT;
      }
      var kSplineTableSize = 11;
      var kSampleStepSize = 1 / (kSplineTableSize - 1);
      function cubicBezier(mX1, mY1, mX2, mY2) {
        if (mX1 === mY1 && mX2 === mY2)
          return linear;
        const sampleValues = new Float32Array(kSplineTableSize);
        for (let i = 0; i < kSplineTableSize; ++i) {
          sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
        }
        function getTForX(aX) {
          let intervalStart = 0;
          let currentSample = 1;
          const lastSample = kSplineTableSize - 1;
          for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
            intervalStart += kSampleStepSize;
          }
          --currentSample;
          const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
          const guessForT = intervalStart + dist * kSampleStepSize;
          const initialSlope = getSlope(guessForT, mX1, mX2);
          if (initialSlope >= newtonMinSlope) {
            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
          } else if (initialSlope === 0) {
            return guessForT;
          } else {
            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
          }
        }
        return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
      }
      var steps = (steps2, direction = "end") => (progress2) => {
        progress2 = direction === "end" ? Math.min(progress2, 0.999) : Math.max(progress2, 1e-3);
        const expanded = progress2 * steps2;
        const rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
        return clamp(0, 1, rounded / steps2);
      };
      exports.angle = angle;
      exports.animate = animate;
      exports.anticipate = anticipate;
      exports.applyOffset = applyOffset;
      exports.attract = attract;
      exports.attractExpo = attractExpo;
      exports.backIn = backIn;
      exports.backInOut = backInOut;
      exports.backOut = backOut;
      exports.bounceIn = bounceIn;
      exports.bounceInOut = bounceInOut;
      exports.bounceOut = bounceOut;
      exports.circIn = circIn;
      exports.circInOut = circInOut;
      exports.circOut = circOut;
      exports.clamp = clamp;
      exports.createAnticipate = createAnticipate;
      exports.createAttractor = createAttractor;
      exports.createBackIn = createBackIn;
      exports.createExpoIn = createExpoIn;
      exports.cubicBezier = cubicBezier;
      exports.decay = decay;
      exports.degreesToRadians = degreesToRadians;
      exports.distance = distance;
      exports.easeIn = easeIn;
      exports.easeInOut = easeInOut;
      exports.easeOut = easeOut;
      exports.inertia = inertia;
      exports.interpolate = interpolate;
      exports.isPoint = isPoint;
      exports.isPoint3D = isPoint3D;
      exports.keyframes = keyframes;
      exports.linear = linear;
      exports.mirrorEasing = mirrorEasing;
      exports.mix = mix;
      exports.mixColor = mixColor;
      exports.mixComplex = mixComplex;
      exports.pipe = pipe;
      exports.pointFromVector = pointFromVector;
      exports.progress = progress;
      exports.radiansToDegrees = radiansToDegrees;
      exports.reverseEasing = reverseEasing;
      exports.smooth = smooth;
      exports.smoothFrame = smoothFrame;
      exports.snap = snap;
      exports.spring = spring;
      exports.steps = steps;
      exports.toDecimal = toDecimal;
      exports.velocityPerFrame = velocityPerFrame;
      exports.velocityPerSecond = velocityPerSecond;
      exports.wrap = wrap;
    }
  });

  // node_modules/@emotion/memoize/dist/memoize.browser.cjs.js
  var require_memoize_browser_cjs = __commonJS({
    "node_modules/@emotion/memoize/dist/memoize.browser.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function memoize(fn) {
        var cache = {};
        return function(arg) {
          if (cache[arg] === void 0)
            cache[arg] = fn(arg);
          return cache[arg];
        };
      }
      exports.default = memoize;
    }
  });

  // node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js
  var require_is_prop_valid_browser_cjs = __commonJS({
    "node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var memoize = _interopDefault(require_memoize_browser_cjs());
      var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      var index = memoize(function(prop) {
        return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
      });
      exports.default = index;
    }
  });

  // node_modules/framer-motion/dist/framer-motion.cjs.js
  var require_framer_motion_cjs = __commonJS({
    "node_modules/framer-motion/dist/framer-motion.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib = require_tslib();
      var React = require_react();
      var heyListen = require_dist();
      var sync = require_framesync_cjs();
      var popmotion = require_popmotion_cjs();
      var styleValueTypes = require_valueTypes_cjs();
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { "default": e };
      }
      function _interopNamespace(e) {
        if (e && e.__esModule)
          return e;
        var n = Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n["default"] = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespace(React);
      var React__default = /* @__PURE__ */ _interopDefaultLegacy(React);
      var sync__default = /* @__PURE__ */ _interopDefaultLegacy(sync);
      var createDefinition = function(propNames) {
        return {
          isEnabled: function(props) {
            return propNames.some(function(name) {
              return !!props[name];
            });
          }
        };
      };
      var featureDefinitions = {
        measureLayout: createDefinition(["layout", "layoutId", "drag"]),
        animation: createDefinition([
          "animate",
          "exit",
          "variants",
          "whileHover",
          "whileTap",
          "whileFocus",
          "whileDrag",
          "whileInView"
        ]),
        exit: createDefinition(["exit"]),
        drag: createDefinition(["drag", "dragControls"]),
        focus: createDefinition(["whileFocus"]),
        hover: createDefinition(["whileHover", "onHoverStart", "onHoverEnd"]),
        tap: createDefinition(["whileTap", "onTap", "onTapStart", "onTapCancel"]),
        pan: createDefinition([
          "onPan",
          "onPanStart",
          "onPanSessionStart",
          "onPanEnd"
        ]),
        inView: createDefinition([
          "whileInView",
          "onViewportEnter",
          "onViewportLeave"
        ])
      };
      function loadFeatures(features) {
        for (var key in features) {
          if (features[key] === null)
            continue;
          if (key === "projectionNodeConstructor") {
            featureDefinitions.projectionNodeConstructor = features[key];
          } else {
            featureDefinitions[key].Component = features[key];
          }
        }
      }
      var LazyContext = React.createContext({ strict: false });
      var featureNames = Object.keys(featureDefinitions);
      var numFeatures = featureNames.length;
      function useFeatures(props, visualElement2, preloadedFeatures) {
        var features = [];
        var lazyContext = React.useContext(LazyContext);
        if (!visualElement2)
          return null;
        if (preloadedFeatures && lazyContext.strict) {
          heyListen.invariant(false, "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.");
        }
        for (var i = 0; i < numFeatures; i++) {
          var name_1 = featureNames[i];
          var _a = featureDefinitions[name_1], isEnabled = _a.isEnabled, Component = _a.Component;
          if (isEnabled(props) && Component) {
            features.push(React__namespace.createElement(Component, tslib.__assign({ key: name_1 }, props, { visualElement: visualElement2 })));
          }
        }
        return features;
      }
      var MotionConfigContext = React.createContext({
        transformPagePoint: function(p) {
          return p;
        },
        isStatic: false
      });
      var MotionContext = React.createContext({});
      function useVisualElementContext() {
        return React.useContext(MotionContext).visualElement;
      }
      var PresenceContext = React.createContext(null);
      var isBrowser = typeof window !== "undefined";
      var useIsomorphicLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect;
      function useVisualElement(Component, visualState, props, createVisualElement) {
        var lazyContext = React.useContext(LazyContext);
        var parent = useVisualElementContext();
        var presenceContext = React.useContext(PresenceContext);
        var visualElementRef = React.useRef(void 0);
        if (!createVisualElement)
          createVisualElement = lazyContext.renderer;
        if (!visualElementRef.current && createVisualElement) {
          visualElementRef.current = createVisualElement(Component, {
            visualState,
            parent,
            props,
            presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,
            blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false
          });
        }
        var visualElement2 = visualElementRef.current;
        useIsomorphicLayoutEffect(function() {
          visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.syncRender();
        });
        React.useEffect(function() {
          var _a;
          (_a = visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.animationState) === null || _a === void 0 ? void 0 : _a.animateChanges();
        });
        useIsomorphicLayoutEffect(function() {
          return function() {
            return visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.notifyUnmount();
          };
        }, []);
        return visualElement2;
      }
      function isRefObject(ref) {
        return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
      }
      function useMotionRef(visualState, visualElement2, externalRef) {
        return React.useCallback(function(instance) {
          var _a;
          instance && ((_a = visualState.mount) === null || _a === void 0 ? void 0 : _a.call(visualState, instance));
          if (visualElement2) {
            instance ? visualElement2.mount(instance) : visualElement2.unmount();
          }
          if (externalRef) {
            if (typeof externalRef === "function") {
              externalRef(instance);
            } else if (isRefObject(externalRef)) {
              externalRef.current = instance;
            }
          }
        }, [visualElement2]);
      }
      function isVariantLabels(v) {
        return Array.isArray(v);
      }
      function isVariantLabel(v) {
        return typeof v === "string" || isVariantLabels(v);
      }
      function getCurrent(visualElement2) {
        var current = {};
        visualElement2.forEachValue(function(value, key) {
          return current[key] = value.get();
        });
        return current;
      }
      function getVelocity$1(visualElement2) {
        var velocity = {};
        visualElement2.forEachValue(function(value, key) {
          return velocity[key] = value.getVelocity();
        });
        return velocity;
      }
      function resolveVariantFromProps(props, definition, custom, currentValues, currentVelocity) {
        var _a;
        if (currentValues === void 0) {
          currentValues = {};
        }
        if (currentVelocity === void 0) {
          currentVelocity = {};
        }
        if (typeof definition === "function") {
          definition = definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
        }
        if (typeof definition === "string") {
          definition = (_a = props.variants) === null || _a === void 0 ? void 0 : _a[definition];
        }
        if (typeof definition === "function") {
          definition = definition(custom !== null && custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
        }
        return definition;
      }
      function resolveVariant(visualElement2, definition, custom) {
        var props = visualElement2.getProps();
        return resolveVariantFromProps(props, definition, custom !== null && custom !== void 0 ? custom : props.custom, getCurrent(visualElement2), getVelocity$1(visualElement2));
      }
      function checkIfControllingVariants(props) {
        var _a;
        return typeof ((_a = props.animate) === null || _a === void 0 ? void 0 : _a.start) === "function" || isVariantLabel(props.initial) || isVariantLabel(props.animate) || isVariantLabel(props.whileHover) || isVariantLabel(props.whileDrag) || isVariantLabel(props.whileTap) || isVariantLabel(props.whileFocus) || isVariantLabel(props.exit);
      }
      function checkIfVariantNode(props) {
        return Boolean(checkIfControllingVariants(props) || props.variants);
      }
      function getCurrentTreeVariants(props, context) {
        if (checkIfControllingVariants(props)) {
          var initial = props.initial, animate2 = props.animate;
          return {
            initial: initial === false || isVariantLabel(initial) ? initial : void 0,
            animate: isVariantLabel(animate2) ? animate2 : void 0
          };
        }
        return props.inherit !== false ? context : {};
      }
      function useCreateMotionContext(props) {
        var _a = getCurrentTreeVariants(props, React.useContext(MotionContext)), initial = _a.initial, animate2 = _a.animate;
        return React.useMemo(function() {
          return { initial, animate: animate2 };
        }, [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate2)]);
      }
      function variantLabelsAsDependency(prop) {
        return Array.isArray(prop) ? prop.join(" ") : prop;
      }
      function useConstant(init) {
        var ref = React.useRef(null);
        if (ref.current === null) {
          ref.current = init();
        }
        return ref.current;
      }
      function addUniqueItem(arr, item) {
        arr.indexOf(item) === -1 && arr.push(item);
      }
      function removeItem(arr, item) {
        var index = arr.indexOf(item);
        index > -1 && arr.splice(index, 1);
      }
      function moveItem(_a, fromIndex, toIndex) {
        var _b = tslib.__read(_a), arr = _b.slice(0);
        var startIndex = fromIndex < 0 ? arr.length + fromIndex : fromIndex;
        if (startIndex >= 0 && startIndex < arr.length) {
          var endIndex = toIndex < 0 ? arr.length + toIndex : toIndex;
          var _c = tslib.__read(arr.splice(fromIndex, 1), 1), item = _c[0];
          arr.splice(endIndex, 0, item);
        }
        return arr;
      }
      var SubscriptionManager = function() {
        function SubscriptionManager2() {
          this.subscriptions = [];
        }
        SubscriptionManager2.prototype.add = function(handler) {
          var _this = this;
          addUniqueItem(this.subscriptions, handler);
          return function() {
            return removeItem(_this.subscriptions, handler);
          };
        };
        SubscriptionManager2.prototype.notify = function(a, b, c) {
          var numSubscriptions = this.subscriptions.length;
          if (!numSubscriptions)
            return;
          if (numSubscriptions === 1) {
            this.subscriptions[0](a, b, c);
          } else {
            for (var i = 0; i < numSubscriptions; i++) {
              var handler = this.subscriptions[i];
              handler && handler(a, b, c);
            }
          }
        };
        SubscriptionManager2.prototype.getSize = function() {
          return this.subscriptions.length;
        };
        SubscriptionManager2.prototype.clear = function() {
          this.subscriptions.length = 0;
        };
        return SubscriptionManager2;
      }();
      var isFloat = function(value) {
        return !isNaN(parseFloat(value));
      };
      var MotionValue = function() {
        function MotionValue2(init) {
          var _this = this;
          this.timeDelta = 0;
          this.lastUpdated = 0;
          this.updateSubscribers = new SubscriptionManager();
          this.velocityUpdateSubscribers = new SubscriptionManager();
          this.renderSubscribers = new SubscriptionManager();
          this.canTrackVelocity = false;
          this.updateAndNotify = function(v, render) {
            if (render === void 0) {
              render = true;
            }
            _this.prev = _this.current;
            _this.current = v;
            var _a = sync.getFrameData(), delta = _a.delta, timestamp = _a.timestamp;
            if (_this.lastUpdated !== timestamp) {
              _this.timeDelta = delta;
              _this.lastUpdated = timestamp;
              sync__default["default"].postRender(_this.scheduleVelocityCheck);
            }
            if (_this.prev !== _this.current) {
              _this.updateSubscribers.notify(_this.current);
            }
            if (_this.velocityUpdateSubscribers.getSize()) {
              _this.velocityUpdateSubscribers.notify(_this.getVelocity());
            }
            if (render) {
              _this.renderSubscribers.notify(_this.current);
            }
          };
          this.scheduleVelocityCheck = function() {
            return sync__default["default"].postRender(_this.velocityCheck);
          };
          this.velocityCheck = function(_a) {
            var timestamp = _a.timestamp;
            if (timestamp !== _this.lastUpdated) {
              _this.prev = _this.current;
              _this.velocityUpdateSubscribers.notify(_this.getVelocity());
            }
          };
          this.hasAnimated = false;
          this.prev = this.current = init;
          this.canTrackVelocity = isFloat(this.current);
        }
        MotionValue2.prototype.onChange = function(subscription) {
          return this.updateSubscribers.add(subscription);
        };
        MotionValue2.prototype.clearListeners = function() {
          this.updateSubscribers.clear();
        };
        MotionValue2.prototype.onRenderRequest = function(subscription) {
          subscription(this.get());
          return this.renderSubscribers.add(subscription);
        };
        MotionValue2.prototype.attach = function(passiveEffect) {
          this.passiveEffect = passiveEffect;
        };
        MotionValue2.prototype.set = function(v, render) {
          if (render === void 0) {
            render = true;
          }
          if (!render || !this.passiveEffect) {
            this.updateAndNotify(v, render);
          } else {
            this.passiveEffect(v, this.updateAndNotify);
          }
        };
        MotionValue2.prototype.get = function() {
          return this.current;
        };
        MotionValue2.prototype.getPrevious = function() {
          return this.prev;
        };
        MotionValue2.prototype.getVelocity = function() {
          return this.canTrackVelocity ? popmotion.velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;
        };
        MotionValue2.prototype.start = function(animation) {
          var _this = this;
          this.stop();
          return new Promise(function(resolve) {
            _this.hasAnimated = true;
            _this.stopAnimation = animation(resolve);
          }).then(function() {
            return _this.clearAnimation();
          });
        };
        MotionValue2.prototype.stop = function() {
          if (this.stopAnimation)
            this.stopAnimation();
          this.clearAnimation();
        };
        MotionValue2.prototype.isAnimating = function() {
          return !!this.stopAnimation;
        };
        MotionValue2.prototype.clearAnimation = function() {
          this.stopAnimation = null;
        };
        MotionValue2.prototype.destroy = function() {
          this.updateSubscribers.clear();
          this.renderSubscribers.clear();
          this.stop();
        };
        return MotionValue2;
      }();
      function motionValue(init) {
        return new MotionValue(init);
      }
      var isMotionValue = function(value) {
        return value !== null && typeof value === "object" && value.getVelocity;
      };
      var secondsToMilliseconds = function(seconds) {
        return seconds * 1e3;
      };
      var easingLookup = {
        linear: popmotion.linear,
        easeIn: popmotion.easeIn,
        easeInOut: popmotion.easeInOut,
        easeOut: popmotion.easeOut,
        circIn: popmotion.circIn,
        circInOut: popmotion.circInOut,
        circOut: popmotion.circOut,
        backIn: popmotion.backIn,
        backInOut: popmotion.backInOut,
        backOut: popmotion.backOut,
        anticipate: popmotion.anticipate,
        bounceIn: popmotion.bounceIn,
        bounceInOut: popmotion.bounceInOut,
        bounceOut: popmotion.bounceOut
      };
      var easingDefinitionToFunction = function(definition) {
        if (Array.isArray(definition)) {
          heyListen.invariant(definition.length === 4, "Cubic bezier arrays must contain four numerical values.");
          var _a = tslib.__read(definition, 4), x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3];
          return popmotion.cubicBezier(x1, y1, x2, y2);
        } else if (typeof definition === "string") {
          heyListen.invariant(easingLookup[definition] !== void 0, "Invalid easing type '".concat(definition, "'"));
          return easingLookup[definition];
        }
        return definition;
      };
      var isEasingArray = function(ease) {
        return Array.isArray(ease) && typeof ease[0] !== "number";
      };
      var isAnimatable = function(key, value) {
        if (key === "zIndex")
          return false;
        if (typeof value === "number" || Array.isArray(value))
          return true;
        if (typeof value === "string" && styleValueTypes.complex.test(value) && !value.startsWith("url(")) {
          return true;
        }
        return false;
      };
      var isKeyframesTarget = function(v) {
        return Array.isArray(v);
      };
      var underDampedSpring = function() {
        return {
          type: "spring",
          stiffness: 500,
          damping: 25,
          restDelta: 0.5,
          restSpeed: 10
        };
      };
      var criticallyDampedSpring = function(to) {
        return {
          type: "spring",
          stiffness: 550,
          damping: to === 0 ? 2 * Math.sqrt(550) : 30,
          restDelta: 0.01,
          restSpeed: 10
        };
      };
      var linearTween = function() {
        return {
          type: "keyframes",
          ease: "linear",
          duration: 0.3
        };
      };
      var keyframes = function(values) {
        return {
          type: "keyframes",
          duration: 0.8,
          values
        };
      };
      var defaultTransitions = {
        x: underDampedSpring,
        y: underDampedSpring,
        z: underDampedSpring,
        rotate: underDampedSpring,
        rotateX: underDampedSpring,
        rotateY: underDampedSpring,
        rotateZ: underDampedSpring,
        scaleX: criticallyDampedSpring,
        scaleY: criticallyDampedSpring,
        scale: criticallyDampedSpring,
        opacity: linearTween,
        backgroundColor: linearTween,
        color: linearTween,
        default: criticallyDampedSpring
      };
      var getDefaultTransition = function(valueKey, to) {
        var transitionFactory;
        if (isKeyframesTarget(to)) {
          transitionFactory = keyframes;
        } else {
          transitionFactory = defaultTransitions[valueKey] || defaultTransitions.default;
        }
        return tslib.__assign({ to }, transitionFactory(to));
      };
      var int = tslib.__assign(tslib.__assign({}, styleValueTypes.number), { transform: Math.round });
      var numberValueTypes = {
        borderWidth: styleValueTypes.px,
        borderTopWidth: styleValueTypes.px,
        borderRightWidth: styleValueTypes.px,
        borderBottomWidth: styleValueTypes.px,
        borderLeftWidth: styleValueTypes.px,
        borderRadius: styleValueTypes.px,
        radius: styleValueTypes.px,
        borderTopLeftRadius: styleValueTypes.px,
        borderTopRightRadius: styleValueTypes.px,
        borderBottomRightRadius: styleValueTypes.px,
        borderBottomLeftRadius: styleValueTypes.px,
        width: styleValueTypes.px,
        maxWidth: styleValueTypes.px,
        height: styleValueTypes.px,
        maxHeight: styleValueTypes.px,
        size: styleValueTypes.px,
        top: styleValueTypes.px,
        right: styleValueTypes.px,
        bottom: styleValueTypes.px,
        left: styleValueTypes.px,
        padding: styleValueTypes.px,
        paddingTop: styleValueTypes.px,
        paddingRight: styleValueTypes.px,
        paddingBottom: styleValueTypes.px,
        paddingLeft: styleValueTypes.px,
        margin: styleValueTypes.px,
        marginTop: styleValueTypes.px,
        marginRight: styleValueTypes.px,
        marginBottom: styleValueTypes.px,
        marginLeft: styleValueTypes.px,
        rotate: styleValueTypes.degrees,
        rotateX: styleValueTypes.degrees,
        rotateY: styleValueTypes.degrees,
        rotateZ: styleValueTypes.degrees,
        scale: styleValueTypes.scale,
        scaleX: styleValueTypes.scale,
        scaleY: styleValueTypes.scale,
        scaleZ: styleValueTypes.scale,
        skew: styleValueTypes.degrees,
        skewX: styleValueTypes.degrees,
        skewY: styleValueTypes.degrees,
        distance: styleValueTypes.px,
        translateX: styleValueTypes.px,
        translateY: styleValueTypes.px,
        translateZ: styleValueTypes.px,
        x: styleValueTypes.px,
        y: styleValueTypes.px,
        z: styleValueTypes.px,
        perspective: styleValueTypes.px,
        transformPerspective: styleValueTypes.px,
        opacity: styleValueTypes.alpha,
        originX: styleValueTypes.progressPercentage,
        originY: styleValueTypes.progressPercentage,
        originZ: styleValueTypes.px,
        zIndex: int,
        fillOpacity: styleValueTypes.alpha,
        strokeOpacity: styleValueTypes.alpha,
        numOctaves: int
      };
      var defaultValueTypes = tslib.__assign(tslib.__assign({}, numberValueTypes), {
        color: styleValueTypes.color,
        backgroundColor: styleValueTypes.color,
        outlineColor: styleValueTypes.color,
        fill: styleValueTypes.color,
        stroke: styleValueTypes.color,
        borderColor: styleValueTypes.color,
        borderTopColor: styleValueTypes.color,
        borderRightColor: styleValueTypes.color,
        borderBottomColor: styleValueTypes.color,
        borderLeftColor: styleValueTypes.color,
        filter: styleValueTypes.filter,
        WebkitFilter: styleValueTypes.filter
      });
      var getDefaultValueType = function(key) {
        return defaultValueTypes[key];
      };
      function getAnimatableNone(key, value) {
        var _a;
        var defaultValueType = getDefaultValueType(key);
        if (defaultValueType !== styleValueTypes.filter)
          defaultValueType = styleValueTypes.complex;
        return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value);
      }
      var instantAnimationState = {
        current: false
      };
      var isCustomValue = function(v) {
        return Boolean(v && typeof v === "object" && v.mix && v.toValue);
      };
      var resolveFinalValueInKeyframes = function(v) {
        return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
      };
      function isTransitionDefined(_a) {
        _a.when;
        _a.delay;
        _a.delayChildren;
        _a.staggerChildren;
        _a.staggerDirection;
        _a.repeat;
        _a.repeatType;
        _a.repeatDelay;
        _a.from;
        var transition = tslib.__rest(_a, ["when", "delay", "delayChildren", "staggerChildren", "staggerDirection", "repeat", "repeatType", "repeatDelay", "from"]);
        return !!Object.keys(transition).length;
      }
      var legacyRepeatWarning = false;
      function convertTransitionToAnimationOptions(_a) {
        var ease = _a.ease, times = _a.times, yoyo = _a.yoyo, flip = _a.flip, loop = _a.loop, transition = tslib.__rest(_a, ["ease", "times", "yoyo", "flip", "loop"]);
        var options = tslib.__assign({}, transition);
        if (times)
          options["offset"] = times;
        if (transition.duration)
          options["duration"] = secondsToMilliseconds(transition.duration);
        if (transition.repeatDelay)
          options.repeatDelay = secondsToMilliseconds(transition.repeatDelay);
        if (ease) {
          options["ease"] = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);
        }
        if (transition.type === "tween")
          options.type = "keyframes";
        if (yoyo || loop || flip) {
          heyListen.warning(!legacyRepeatWarning, "yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options.");
          legacyRepeatWarning = true;
          if (yoyo) {
            options.repeatType = "reverse";
          } else if (loop) {
            options.repeatType = "loop";
          } else if (flip) {
            options.repeatType = "mirror";
          }
          options.repeat = loop || yoyo || flip || transition.repeat;
        }
        if (transition.type !== "spring")
          options.type = "keyframes";
        return options;
      }
      function getDelayFromTransition(transition, key) {
        var _a, _b;
        var valueTransition = getValueTransition(transition, key) || {};
        return (_b = (_a = valueTransition.delay) !== null && _a !== void 0 ? _a : transition.delay) !== null && _b !== void 0 ? _b : 0;
      }
      function hydrateKeyframes(options) {
        if (Array.isArray(options.to) && options.to[0] === null) {
          options.to = tslib.__spreadArray([], tslib.__read(options.to), false);
          options.to[0] = options.from;
        }
        return options;
      }
      function getPopmotionAnimationOptions(transition, options, key) {
        var _a;
        if (Array.isArray(options.to)) {
          (_a = transition.duration) !== null && _a !== void 0 ? _a : transition.duration = 0.8;
        }
        hydrateKeyframes(options);
        if (!isTransitionDefined(transition)) {
          transition = tslib.__assign(tslib.__assign({}, transition), getDefaultTransition(key, options.to));
        }
        return tslib.__assign(tslib.__assign({}, options), convertTransitionToAnimationOptions(transition));
      }
      function getAnimation(key, value, target, transition, onComplete) {
        var _a;
        var valueTransition = getValueTransition(transition, key);
        var origin = (_a = valueTransition.from) !== null && _a !== void 0 ? _a : value.get();
        var isTargetAnimatable = isAnimatable(key, target);
        if (origin === "none" && isTargetAnimatable && typeof target === "string") {
          origin = getAnimatableNone(key, target);
        } else if (isZero(origin) && typeof target === "string") {
          origin = getZeroUnit(target);
        } else if (!Array.isArray(target) && isZero(target) && typeof origin === "string") {
          target = getZeroUnit(origin);
        }
        var isOriginAnimatable = isAnimatable(key, origin);
        heyListen.warning(isOriginAnimatable === isTargetAnimatable, "You are trying to animate ".concat(key, ' from "').concat(origin, '" to "').concat(target, '". ').concat(origin, " is not an animatable value - to enable this animation set ").concat(origin, " to a value animatable to ").concat(target, " via the `style` property."));
        function start() {
          var options = {
            from: origin,
            to: target,
            velocity: value.getVelocity(),
            onComplete,
            onUpdate: function(v) {
              return value.set(v);
            }
          };
          return valueTransition.type === "inertia" || valueTransition.type === "decay" ? popmotion.inertia(tslib.__assign(tslib.__assign({}, options), valueTransition)) : popmotion.animate(tslib.__assign(tslib.__assign({}, getPopmotionAnimationOptions(valueTransition, options, key)), { onUpdate: function(v) {
            var _a2;
            options.onUpdate(v);
            (_a2 = valueTransition.onUpdate) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition, v);
          }, onComplete: function() {
            var _a2;
            options.onComplete();
            (_a2 = valueTransition.onComplete) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition);
          } }));
        }
        function set() {
          var _a2, _b;
          var finalTarget = resolveFinalValueInKeyframes(target);
          value.set(finalTarget);
          onComplete();
          (_a2 = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onUpdate) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition, finalTarget);
          (_b = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onComplete) === null || _b === void 0 ? void 0 : _b.call(valueTransition);
          return { stop: function() {
          } };
        }
        return !isOriginAnimatable || !isTargetAnimatable || valueTransition.type === false ? set : start;
      }
      function isZero(value) {
        return value === 0 || typeof value === "string" && parseFloat(value) === 0 && value.indexOf(" ") === -1;
      }
      function getZeroUnit(potentialUnitType) {
        return typeof potentialUnitType === "number" ? 0 : getAnimatableNone("", potentialUnitType);
      }
      function getValueTransition(transition, key) {
        return transition[key] || transition["default"] || transition;
      }
      function startAnimation(key, value, target, transition) {
        if (transition === void 0) {
          transition = {};
        }
        if (instantAnimationState.current) {
          transition = { type: false };
        }
        return value.start(function(onComplete) {
          var delayTimer;
          var controls;
          var animation = getAnimation(key, value, target, transition, onComplete);
          var delay = getDelayFromTransition(transition, key);
          var start = function() {
            return controls = animation();
          };
          if (delay) {
            delayTimer = setTimeout(start, secondsToMilliseconds(delay));
          } else {
            start();
          }
          return function() {
            clearTimeout(delayTimer);
            controls === null || controls === void 0 ? void 0 : controls.stop();
          };
        });
      }
      function animate(from, to, transition) {
        if (transition === void 0) {
          transition = {};
        }
        var value = isMotionValue(from) ? from : motionValue(from);
        startAnimation("", value, to, transition);
        return {
          stop: function() {
            return value.stop();
          },
          isAnimating: function() {
            return value.isAnimating();
          }
        };
      }
      var borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
      var numBorders = borders.length;
      function mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {
        var _a, _b, _c, _d;
        if (shouldCrossfadeOpacity) {
          target.opacity = popmotion.mix(0, (_a = lead.opacity) !== null && _a !== void 0 ? _a : 1, easeCrossfadeIn(progress));
          target.opacityExit = popmotion.mix((_b = follow.opacity) !== null && _b !== void 0 ? _b : 1, 0, easeCrossfadeOut(progress));
        } else if (isOnlyMember) {
          target.opacity = popmotion.mix((_c = follow.opacity) !== null && _c !== void 0 ? _c : 1, (_d = lead.opacity) !== null && _d !== void 0 ? _d : 1, progress);
        }
        for (var i = 0; i < numBorders; i++) {
          var borderLabel = "border".concat(borders[i], "Radius");
          var followRadius = getRadius(follow, borderLabel);
          var leadRadius = getRadius(lead, borderLabel);
          if (followRadius === void 0 && leadRadius === void 0)
            continue;
          followRadius || (followRadius = 0);
          leadRadius || (leadRadius = 0);
          if (typeof followRadius === "number" && typeof leadRadius === "number") {
            var radius = Math.max(popmotion.mix(followRadius, leadRadius, progress), 0);
            target[borderLabel] = radius;
          }
        }
        if (follow.rotate || lead.rotate) {
          target.rotate = popmotion.mix(follow.rotate || 0, lead.rotate || 0, progress);
        }
      }
      function getRadius(values, radiusName) {
        var _a;
        return (_a = values[radiusName]) !== null && _a !== void 0 ? _a : values.borderRadius;
      }
      var easeCrossfadeIn = compress(0, 0.5, popmotion.circOut);
      var easeCrossfadeOut = compress(0.5, 0.95, popmotion.linear);
      function compress(min, max, easing) {
        return function(p) {
          if (p < min)
            return 0;
          if (p > max)
            return 1;
          return easing(popmotion.progress(min, max, p));
        };
      }
      function copyAxisInto(axis, originAxis) {
        axis.min = originAxis.min;
        axis.max = originAxis.max;
      }
      function copyBoxInto(box, originBox) {
        copyAxisInto(box.x, originBox.x);
        copyAxisInto(box.y, originBox.y);
      }
      function isIdentityScale(scale) {
        return scale === void 0 || scale === 1;
      }
      function hasScale(_a) {
        var scale = _a.scale, scaleX = _a.scaleX, scaleY = _a.scaleY;
        return !isIdentityScale(scale) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
      }
      function hasTransform(values) {
        return hasScale(values) || hasTranslate(values.x) || hasTranslate(values.y) || values.z || values.rotate || values.rotateX || values.rotateY;
      }
      function hasTranslate(value) {
        return value && value !== "0%";
      }
      function scalePoint(point, scale, originPoint) {
        var distanceFromOrigin = point - originPoint;
        var scaled = scale * distanceFromOrigin;
        return originPoint + scaled;
      }
      function applyPointDelta(point, translate, scale, originPoint, boxScale) {
        if (boxScale !== void 0) {
          point = scalePoint(point, boxScale, originPoint);
        }
        return scalePoint(point, scale, originPoint) + translate;
      }
      function applyAxisDelta(axis, translate, scale, originPoint, boxScale) {
        if (translate === void 0) {
          translate = 0;
        }
        if (scale === void 0) {
          scale = 1;
        }
        axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);
        axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);
      }
      function applyBoxDelta(box, _a) {
        var x = _a.x, y = _a.y;
        applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
        applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
      }
      function applyTreeDeltas(box, treeScale, treePath, isSharedTransition) {
        var _a, _b;
        if (isSharedTransition === void 0) {
          isSharedTransition = false;
        }
        var treeLength = treePath.length;
        if (!treeLength)
          return;
        treeScale.x = treeScale.y = 1;
        var node;
        var delta;
        for (var i = 0; i < treeLength; i++) {
          node = treePath[i];
          delta = node.projectionDelta;
          if (((_b = (_a = node.instance) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.display) === "contents")
            continue;
          if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {
            transformBox(box, { x: -node.scroll.x, y: -node.scroll.y });
          }
          if (delta) {
            treeScale.x *= delta.x.scale;
            treeScale.y *= delta.y.scale;
            applyBoxDelta(box, delta);
          }
          if (isSharedTransition && hasTransform(node.latestValues)) {
            transformBox(box, node.latestValues);
          }
        }
      }
      function translateAxis(axis, distance) {
        axis.min = axis.min + distance;
        axis.max = axis.max + distance;
      }
      function transformAxis(axis, transforms, _a) {
        var _b = tslib.__read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
        var axisOrigin = transforms[originKey] !== void 0 ? transforms[originKey] : 0.5;
        var originPoint = popmotion.mix(axis.min, axis.max, axisOrigin);
        applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);
      }
      var xKeys$1 = ["x", "scaleX", "originX"];
      var yKeys$1 = ["y", "scaleY", "originY"];
      function transformBox(box, transform2) {
        transformAxis(box.x, transform2, xKeys$1);
        transformAxis(box.y, transform2, yKeys$1);
      }
      function calcLength(axis) {
        return axis.max - axis.min;
      }
      function isNear(value, target, maxDistance) {
        if (target === void 0) {
          target = 0;
        }
        if (maxDistance === void 0) {
          maxDistance = 0.01;
        }
        return popmotion.distance(value, target) < maxDistance;
      }
      function calcAxisDelta(delta, source, target, origin) {
        if (origin === void 0) {
          origin = 0.5;
        }
        delta.origin = origin;
        delta.originPoint = popmotion.mix(source.min, source.max, delta.origin);
        delta.scale = calcLength(target) / calcLength(source);
        if (isNear(delta.scale, 1, 1e-4) || isNaN(delta.scale))
          delta.scale = 1;
        delta.translate = popmotion.mix(target.min, target.max, delta.origin) - delta.originPoint;
        if (isNear(delta.translate) || isNaN(delta.translate))
          delta.translate = 0;
      }
      function calcBoxDelta(delta, source, target, origin) {
        calcAxisDelta(delta.x, source.x, target.x, origin === null || origin === void 0 ? void 0 : origin.originX);
        calcAxisDelta(delta.y, source.y, target.y, origin === null || origin === void 0 ? void 0 : origin.originY);
      }
      function calcRelativeAxis(target, relative, parent) {
        target.min = parent.min + relative.min;
        target.max = target.min + calcLength(relative);
      }
      function calcRelativeBox(target, relative, parent) {
        calcRelativeAxis(target.x, relative.x, parent.x);
        calcRelativeAxis(target.y, relative.y, parent.y);
      }
      function calcRelativeAxisPosition(target, layout, parent) {
        target.min = layout.min - parent.min;
        target.max = target.min + calcLength(layout);
      }
      function calcRelativePosition(target, layout, parent) {
        calcRelativeAxisPosition(target.x, layout.x, parent.x);
        calcRelativeAxisPosition(target.y, layout.y, parent.y);
      }
      function removePointDelta(point, translate, scale, originPoint, boxScale) {
        point -= translate;
        point = scalePoint(point, 1 / scale, originPoint);
        if (boxScale !== void 0) {
          point = scalePoint(point, 1 / boxScale, originPoint);
        }
        return point;
      }
      function removeAxisDelta(axis, translate, scale, origin, boxScale, originAxis, sourceAxis) {
        if (translate === void 0) {
          translate = 0;
        }
        if (scale === void 0) {
          scale = 1;
        }
        if (origin === void 0) {
          origin = 0.5;
        }
        if (originAxis === void 0) {
          originAxis = axis;
        }
        if (sourceAxis === void 0) {
          sourceAxis = axis;
        }
        if (styleValueTypes.percent.test(translate)) {
          translate = parseFloat(translate);
          var relativeProgress = popmotion.mix(sourceAxis.min, sourceAxis.max, translate / 100);
          translate = relativeProgress - sourceAxis.min;
        }
        if (typeof translate !== "number")
          return;
        var originPoint = popmotion.mix(originAxis.min, originAxis.max, origin);
        if (axis === originAxis)
          originPoint -= translate;
        axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);
        axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);
      }
      function removeAxisTransforms(axis, transforms, _a, origin, sourceAxis) {
        var _b = tslib.__read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
        removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);
      }
      var xKeys = ["x", "scaleX", "originX"];
      var yKeys = ["y", "scaleY", "originY"];
      function removeBoxTransforms(box, transforms, originBox, sourceBox) {
        removeAxisTransforms(box.x, transforms, xKeys, originBox === null || originBox === void 0 ? void 0 : originBox.x, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.x);
        removeAxisTransforms(box.y, transforms, yKeys, originBox === null || originBox === void 0 ? void 0 : originBox.y, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.y);
      }
      var createAxisDelta = function() {
        return {
          translate: 0,
          scale: 1,
          origin: 0,
          originPoint: 0
        };
      };
      var createDelta = function() {
        return {
          x: createAxisDelta(),
          y: createAxisDelta()
        };
      };
      var createAxis = function() {
        return { min: 0, max: 0 };
      };
      var createBox = function() {
        return {
          x: createAxis(),
          y: createAxis()
        };
      };
      function isAxisDeltaZero(delta) {
        return delta.translate === 0 && delta.scale === 1;
      }
      function isDeltaZero(delta) {
        return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
      }
      function boxEquals(a, b) {
        return a.x.min === b.x.min && a.x.max === b.x.max && a.y.min === b.y.min && a.y.max === b.y.max;
      }
      var NodeStack = function() {
        function NodeStack2() {
          this.members = [];
        }
        NodeStack2.prototype.add = function(node) {
          addUniqueItem(this.members, node);
          node.scheduleRender();
        };
        NodeStack2.prototype.remove = function(node) {
          removeItem(this.members, node);
          if (node === this.prevLead) {
            this.prevLead = void 0;
          }
          if (node === this.lead) {
            var prevLead = this.members[this.members.length - 1];
            if (prevLead) {
              this.promote(prevLead);
            }
          }
        };
        NodeStack2.prototype.relegate = function(node) {
          var indexOfNode = this.members.findIndex(function(member2) {
            return node === member2;
          });
          if (indexOfNode === 0)
            return false;
          var prevLead;
          for (var i = indexOfNode; i >= 0; i--) {
            var member = this.members[i];
            if (member.isPresent !== false) {
              prevLead = member;
              break;
            }
          }
          if (prevLead) {
            this.promote(prevLead);
            return true;
          } else {
            return false;
          }
        };
        NodeStack2.prototype.promote = function(node, preserveFollowOpacity) {
          var _a;
          var prevLead = this.lead;
          if (node === prevLead)
            return;
          this.prevLead = prevLead;
          this.lead = node;
          node.show();
          if (prevLead) {
            prevLead.instance && prevLead.scheduleRender();
            node.scheduleRender();
            node.resumeFrom = prevLead;
            if (preserveFollowOpacity) {
              node.resumeFrom.preserveOpacity = true;
            }
            if (prevLead.snapshot) {
              node.snapshot = prevLead.snapshot;
              node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
              node.snapshot.isShared = true;
            }
            if ((_a = node.root) === null || _a === void 0 ? void 0 : _a.isUpdating) {
              node.isLayoutDirty = true;
            }
            var crossfade = node.options.crossfade;
            if (crossfade === false) {
              prevLead.hide();
            }
          }
        };
        NodeStack2.prototype.exitAnimationComplete = function() {
          this.members.forEach(function(node) {
            var _a, _b, _c, _d, _e;
            (_b = (_a = node.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);
            (_e = (_c = node.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d);
          });
        };
        NodeStack2.prototype.scheduleRender = function() {
          this.members.forEach(function(node) {
            node.instance && node.scheduleRender(false);
          });
        };
        NodeStack2.prototype.removeLeadSnapshot = function() {
          if (this.lead && this.lead.snapshot) {
            this.lead.snapshot = void 0;
          }
        };
        return NodeStack2;
      }();
      var scaleCorrectors = {};
      function addScaleCorrector(correctors) {
        Object.assign(scaleCorrectors, correctors);
      }
      var identityProjection = "translate3d(0px, 0px, 0) scale(1, 1)";
      function buildProjectionTransform(delta, treeScale, latestTransform) {
        var xTranslate = delta.x.translate / treeScale.x;
        var yTranslate = delta.y.translate / treeScale.y;
        var transform2 = "translate3d(".concat(xTranslate, "px, ").concat(yTranslate, "px, 0) ");
        if (latestTransform) {
          var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;
          if (rotate)
            transform2 += "rotate(".concat(rotate, "deg) ");
          if (rotateX)
            transform2 += "rotateX(".concat(rotateX, "deg) ");
          if (rotateY)
            transform2 += "rotateY(".concat(rotateY, "deg) ");
        }
        transform2 += "scale(".concat(delta.x.scale, ", ").concat(delta.y.scale, ")");
        return transform2 === identityProjection ? "none" : transform2;
      }
      function eachAxis(callback) {
        return [callback("x"), callback("y")];
      }
      var transformAxes = ["", "X", "Y", "Z"];
      var order = ["translate", "scale", "rotate", "skew"];
      var transformProps = ["transformPerspective", "x", "y", "z"];
      order.forEach(function(operationKey) {
        return transformAxes.forEach(function(axesKey) {
          return transformProps.push(operationKey + axesKey);
        });
      });
      function sortTransformProps(a, b) {
        return transformProps.indexOf(a) - transformProps.indexOf(b);
      }
      var transformPropSet = new Set(transformProps);
      function isTransformProp(key) {
        return transformPropSet.has(key);
      }
      var transformOriginProps = /* @__PURE__ */ new Set(["originX", "originY", "originZ"]);
      function isTransformOriginProp(key) {
        return transformOriginProps.has(key);
      }
      var compareByDepth = function(a, b) {
        return a.depth - b.depth;
      };
      var FlatTree = function() {
        function FlatTree2() {
          this.children = [];
          this.isDirty = false;
        }
        FlatTree2.prototype.add = function(child) {
          addUniqueItem(this.children, child);
          this.isDirty = true;
        };
        FlatTree2.prototype.remove = function(child) {
          removeItem(this.children, child);
          this.isDirty = true;
        };
        FlatTree2.prototype.forEach = function(callback) {
          this.isDirty && this.children.sort(compareByDepth);
          this.isDirty = false;
          this.children.forEach(callback);
        };
        return FlatTree2;
      }();
      function resolveMotionValue(value) {
        var unwrappedValue = isMotionValue(value) ? value.get() : value;
        return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
      }
      var animationTarget = 1e3;
      var globalProjectionState = {
        hasAnimatedSinceResize: true,
        hasEverUpdated: false
      };
      function createProjectionNode(_a) {
        var attachResizeListener = _a.attachResizeListener, defaultParent = _a.defaultParent, measureScroll = _a.measureScroll, resetTransform = _a.resetTransform;
        return function() {
          function ProjectionNode(id2, latestValues, parent) {
            var _this = this;
            if (latestValues === void 0) {
              latestValues = {};
            }
            if (parent === void 0) {
              parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();
            }
            this.children = /* @__PURE__ */ new Set();
            this.options = {};
            this.isTreeAnimating = false;
            this.isAnimationBlocked = false;
            this.isLayoutDirty = false;
            this.updateManuallyBlocked = false;
            this.updateBlockedByResize = false;
            this.isUpdating = false;
            this.isSVG = false;
            this.needsReset = false;
            this.shouldResetTransform = false;
            this.treeScale = { x: 1, y: 1 };
            this.eventHandlers = /* @__PURE__ */ new Map();
            this.potentialNodes = /* @__PURE__ */ new Map();
            this.checkUpdateFailed = function() {
              if (_this.isUpdating) {
                _this.isUpdating = false;
                _this.clearAllSnapshots();
              }
            };
            this.updateProjection = function() {
              _this.nodes.forEach(resolveTargetDelta);
              _this.nodes.forEach(calcProjection);
            };
            this.hasProjected = false;
            this.isVisible = true;
            this.animationProgress = 0;
            this.sharedNodes = /* @__PURE__ */ new Map();
            this.id = id2;
            this.latestValues = latestValues;
            this.root = parent ? parent.root || parent : this;
            this.path = parent ? tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(parent.path), false), [parent], false) : [];
            this.parent = parent;
            this.depth = parent ? parent.depth + 1 : 0;
            id2 && this.root.registerPotentialNode(id2, this);
            for (var i = 0; i < this.path.length; i++) {
              this.path[i].shouldResetTransform = true;
            }
            if (this.root === this)
              this.nodes = new FlatTree();
          }
          ProjectionNode.prototype.addEventListener = function(name, handler) {
            if (!this.eventHandlers.has(name)) {
              this.eventHandlers.set(name, new SubscriptionManager());
            }
            return this.eventHandlers.get(name).add(handler);
          };
          ProjectionNode.prototype.notifyListeners = function(name) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments[_i];
            }
            var subscriptionManager = this.eventHandlers.get(name);
            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, tslib.__spreadArray([], tslib.__read(args), false));
          };
          ProjectionNode.prototype.hasListeners = function(name) {
            return this.eventHandlers.has(name);
          };
          ProjectionNode.prototype.registerPotentialNode = function(id2, node) {
            this.potentialNodes.set(id2, node);
          };
          ProjectionNode.prototype.mount = function(instance, isLayoutDirty) {
            var _this = this;
            var _a2;
            if (isLayoutDirty === void 0) {
              isLayoutDirty = false;
            }
            if (this.instance)
              return;
            this.isSVG = instance instanceof SVGElement && instance.tagName !== "svg";
            this.instance = instance;
            var _b = this.options, layoutId = _b.layoutId, layout = _b.layout, visualElement2 = _b.visualElement;
            if (visualElement2 && !visualElement2.getInstance()) {
              visualElement2.mount(instance);
            }
            this.root.nodes.add(this);
            (_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.children.add(this);
            this.id && this.root.potentialNodes.delete(this.id);
            if (isLayoutDirty && (layout || layoutId)) {
              this.isLayoutDirty = true;
            }
            if (attachResizeListener) {
              var unblockTimeout_1;
              var resizeUnblockUpdate_1 = function() {
                return _this.root.updateBlockedByResize = false;
              };
              attachResizeListener(instance, function() {
                _this.root.updateBlockedByResize = true;
                clearTimeout(unblockTimeout_1);
                unblockTimeout_1 = setTimeout(resizeUnblockUpdate_1, 250);
                if (globalProjectionState.hasAnimatedSinceResize) {
                  globalProjectionState.hasAnimatedSinceResize = false;
                  _this.nodes.forEach(finishAnimation);
                }
              });
            }
            if (layoutId) {
              this.root.registerSharedNode(layoutId, this);
            }
            if (this.options.animate !== false && visualElement2 && (layoutId || layout)) {
              this.addEventListener("didUpdate", function(_a3) {
                var _b2, _c, _d, _e, _f;
                var delta = _a3.delta, hasLayoutChanged = _a3.hasLayoutChanged, hasRelativeTargetChanged = _a3.hasRelativeTargetChanged, newLayout = _a3.layout;
                if (_this.isTreeAnimationBlocked()) {
                  _this.target = void 0;
                  _this.relativeTarget = void 0;
                  return;
                }
                var layoutTransition = (_c = (_b2 = _this.options.transition) !== null && _b2 !== void 0 ? _b2 : visualElement2.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;
                var onLayoutAnimationComplete = visualElement2.getProps().onLayoutAnimationComplete;
                var targetChanged = !_this.targetLayout || !boxEquals(_this.targetLayout, newLayout) || hasRelativeTargetChanged;
                var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
                if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this.currentAnimation)) {
                  if (_this.resumeFrom) {
                    _this.resumingFrom = _this.resumeFrom;
                    _this.resumingFrom.resumingFrom = void 0;
                  }
                  _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
                  _this.startAnimation(tslib.__assign(tslib.__assign({}, getValueTransition(layoutTransition, "layout")), { onComplete: onLayoutAnimationComplete }));
                } else {
                  _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));
                }
                _this.targetLayout = newLayout;
              });
            }
          };
          ProjectionNode.prototype.unmount = function() {
            var _a2, _b;
            this.options.layoutId && this.willUpdate();
            this.root.nodes.remove(this);
            (_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.remove(this);
            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);
            this.instance = void 0;
            sync.cancelSync.preRender(this.updateProjection);
          };
          ProjectionNode.prototype.blockUpdate = function() {
            this.updateManuallyBlocked = true;
          };
          ProjectionNode.prototype.unblockUpdate = function() {
            this.updateManuallyBlocked = false;
          };
          ProjectionNode.prototype.isUpdateBlocked = function() {
            return this.updateManuallyBlocked || this.updateBlockedByResize;
          };
          ProjectionNode.prototype.isTreeAnimationBlocked = function() {
            var _a2;
            return this.isAnimationBlocked || ((_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.isTreeAnimationBlocked()) || false;
          };
          ProjectionNode.prototype.startUpdate = function() {
            var _a2;
            if (this.isUpdateBlocked())
              return;
            this.isUpdating = true;
            (_a2 = this.nodes) === null || _a2 === void 0 ? void 0 : _a2.forEach(resetRotation);
          };
          ProjectionNode.prototype.willUpdate = function(shouldNotifyListeners) {
            var _a2, _b, _c;
            if (shouldNotifyListeners === void 0) {
              shouldNotifyListeners = true;
            }
            if (this.root.isUpdateBlocked()) {
              (_b = (_a2 = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a2);
              return;
            }
            !this.root.isUpdating && this.root.startUpdate();
            if (this.isLayoutDirty)
              return;
            this.isLayoutDirty = true;
            for (var i = 0; i < this.path.length; i++) {
              var node = this.path[i];
              node.shouldResetTransform = true;
              node.updateScroll();
            }
            var _d = this.options, layoutId = _d.layoutId, layout = _d.layout;
            if (layoutId === void 0 && !layout)
              return;
            var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;
            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, "");
            this.updateSnapshot();
            shouldNotifyListeners && this.notifyListeners("willUpdate");
          };
          ProjectionNode.prototype.didUpdate = function() {
            var updateWasBlocked = this.isUpdateBlocked();
            if (updateWasBlocked) {
              this.unblockUpdate();
              this.clearAllSnapshots();
              this.nodes.forEach(clearMeasurements);
              return;
            }
            if (!this.isUpdating)
              return;
            this.isUpdating = false;
            if (this.potentialNodes.size) {
              this.potentialNodes.forEach(mountNodeEarly);
              this.potentialNodes.clear();
            }
            this.nodes.forEach(resetTransformStyle);
            this.nodes.forEach(updateLayout);
            this.nodes.forEach(notifyLayoutUpdate);
            this.clearAllSnapshots();
            sync.flushSync.update();
            sync.flushSync.preRender();
            sync.flushSync.render();
          };
          ProjectionNode.prototype.clearAllSnapshots = function() {
            this.nodes.forEach(clearSnapshot);
            this.sharedNodes.forEach(removeLeadSnapshots);
          };
          ProjectionNode.prototype.scheduleUpdateProjection = function() {
            sync__default["default"].preRender(this.updateProjection, false, true);
          };
          ProjectionNode.prototype.scheduleCheckAfterUnmount = function() {
            var _this = this;
            sync__default["default"].postRender(function() {
              if (_this.isLayoutDirty) {
                _this.root.didUpdate();
              } else {
                _this.root.checkUpdateFailed();
              }
            });
          };
          ProjectionNode.prototype.updateSnapshot = function() {
            if (this.snapshot || !this.instance)
              return;
            var measured = this.measure();
            var layout = this.removeTransform(this.removeElementScroll(measured));
            roundBox(layout);
            this.snapshot = {
              measured,
              layout,
              latestValues: {}
            };
          };
          ProjectionNode.prototype.updateLayout = function() {
            var _a2;
            if (!this.instance)
              return;
            this.updateScroll();
            if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
              return;
            }
            if (this.resumeFrom && !this.resumeFrom.instance) {
              for (var i = 0; i < this.path.length; i++) {
                var node = this.path[i];
                node.updateScroll();
              }
            }
            var measured = this.measure();
            roundBox(measured);
            var prevLayout = this.layout;
            this.layout = {
              measured,
              actual: this.removeElementScroll(measured)
            };
            this.layoutCorrected = createBox();
            this.isLayoutDirty = false;
            this.projectionDelta = void 0;
            this.notifyListeners("measure");
            (_a2 = this.options.visualElement) === null || _a2 === void 0 ? void 0 : _a2.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);
          };
          ProjectionNode.prototype.updateScroll = function() {
            if (this.options.layoutScroll && this.instance) {
              this.scroll = measureScroll(this.instance);
            }
          };
          ProjectionNode.prototype.resetTransform = function() {
            var _a2;
            if (!resetTransform)
              return;
            var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;
            var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
            var transformTemplate = (_a2 = this.options.visualElement) === null || _a2 === void 0 ? void 0 : _a2.getProps().transformTemplate;
            var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, "");
            var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
            if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {
              resetTransform(this.instance, transformTemplateValue);
              this.shouldResetTransform = false;
              this.scheduleRender();
            }
          };
          ProjectionNode.prototype.measure = function() {
            var visualElement2 = this.options.visualElement;
            if (!visualElement2)
              return createBox();
            var box = visualElement2.measureViewportBox();
            var scroll = this.root.scroll;
            if (scroll) {
              translateAxis(box.x, scroll.x);
              translateAxis(box.y, scroll.y);
            }
            return box;
          };
          ProjectionNode.prototype.removeElementScroll = function(box) {
            var boxWithoutScroll = createBox();
            copyBoxInto(boxWithoutScroll, box);
            for (var i = 0; i < this.path.length; i++) {
              var node = this.path[i];
              var scroll_1 = node.scroll, options = node.options;
              if (node !== this.root && scroll_1 && options.layoutScroll) {
                translateAxis(boxWithoutScroll.x, scroll_1.x);
                translateAxis(boxWithoutScroll.y, scroll_1.y);
              }
            }
            return boxWithoutScroll;
          };
          ProjectionNode.prototype.applyTransform = function(box, transformOnly) {
            if (transformOnly === void 0) {
              transformOnly = false;
            }
            var withTransforms = createBox();
            copyBoxInto(withTransforms, box);
            for (var i = 0; i < this.path.length; i++) {
              var node = this.path[i];
              if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {
                transformBox(withTransforms, {
                  x: -node.scroll.x,
                  y: -node.scroll.y
                });
              }
              if (!hasTransform(node.latestValues))
                continue;
              transformBox(withTransforms, node.latestValues);
            }
            if (hasTransform(this.latestValues)) {
              transformBox(withTransforms, this.latestValues);
            }
            return withTransforms;
          };
          ProjectionNode.prototype.removeTransform = function(box) {
            var _a2;
            var boxWithoutTransform = createBox();
            copyBoxInto(boxWithoutTransform, box);
            for (var i = 0; i < this.path.length; i++) {
              var node = this.path[i];
              if (!node.instance)
                continue;
              if (!hasTransform(node.latestValues))
                continue;
              hasScale(node.latestValues) && node.updateSnapshot();
              var sourceBox = createBox();
              var nodeBox = node.measure();
              copyBoxInto(sourceBox, nodeBox);
              removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a2 = node.snapshot) === null || _a2 === void 0 ? void 0 : _a2.layout, sourceBox);
            }
            if (hasTransform(this.latestValues)) {
              removeBoxTransforms(boxWithoutTransform, this.latestValues);
            }
            return boxWithoutTransform;
          };
          ProjectionNode.prototype.setTargetDelta = function(delta) {
            this.targetDelta = delta;
            this.root.scheduleUpdateProjection();
          };
          ProjectionNode.prototype.setOptions = function(options) {
            var _a2;
            this.options = tslib.__assign(tslib.__assign(tslib.__assign({}, this.options), options), { crossfade: (_a2 = options.crossfade) !== null && _a2 !== void 0 ? _a2 : true });
          };
          ProjectionNode.prototype.clearMeasurements = function() {
            this.scroll = void 0;
            this.layout = void 0;
            this.snapshot = void 0;
            this.prevTransformTemplateValue = void 0;
            this.targetDelta = void 0;
            this.target = void 0;
            this.isLayoutDirty = false;
          };
          ProjectionNode.prototype.resolveTargetDelta = function() {
            var _a2;
            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;
            if (!this.layout || !(layout || layoutId))
              return;
            if (!this.targetDelta && !this.relativeTarget) {
              this.relativeParent = this.getClosestProjectingParent();
              if (this.relativeParent && this.relativeParent.layout) {
                this.relativeTarget = createBox();
                this.relativeTargetOrigin = createBox();
                calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);
                copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
              }
            }
            if (!this.relativeTarget && !this.targetDelta)
              return;
            if (!this.target) {
              this.target = createBox();
              this.targetWithTransforms = createBox();
            }
            if (this.relativeTarget && this.relativeTargetOrigin && ((_a2 = this.relativeParent) === null || _a2 === void 0 ? void 0 : _a2.target)) {
              calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
            } else if (this.targetDelta) {
              if (Boolean(this.resumingFrom)) {
                this.target = this.applyTransform(this.layout.actual);
              } else {
                copyBoxInto(this.target, this.layout.actual);
              }
              applyBoxDelta(this.target, this.targetDelta);
            } else {
              copyBoxInto(this.target, this.layout.actual);
            }
            if (this.attemptToResolveRelativeTarget) {
              this.attemptToResolveRelativeTarget = false;
              this.relativeParent = this.getClosestProjectingParent();
              if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {
                this.relativeTarget = createBox();
                this.relativeTargetOrigin = createBox();
                calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);
                copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
              }
            }
          };
          ProjectionNode.prototype.getClosestProjectingParent = function() {
            if (!this.parent || hasTransform(this.parent.latestValues))
              return void 0;
            if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {
              return this.parent;
            } else {
              return this.parent.getClosestProjectingParent();
            }
          };
          ProjectionNode.prototype.calcProjection = function() {
            var _a2;
            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;
            this.isTreeAnimating = Boolean(((_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);
            if (!this.isTreeAnimating) {
              this.targetDelta = this.relativeTarget = void 0;
            }
            if (!this.layout || !(layout || layoutId))
              return;
            var lead = this.getLead();
            copyBoxInto(this.layoutCorrected, this.layout.actual);
            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);
            var target = lead.target;
            if (!target)
              return;
            if (!this.projectionDelta) {
              this.projectionDelta = createDelta();
              this.projectionDeltaWithTransform = createDelta();
            }
            var prevTreeScaleX = this.treeScale.x;
            var prevTreeScaleY = this.treeScale.y;
            var prevProjectionTransform = this.projectionTransform;
            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);
            if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {
              this.hasProjected = true;
              this.scheduleRender();
            }
          };
          ProjectionNode.prototype.hide = function() {
            this.isVisible = false;
          };
          ProjectionNode.prototype.show = function() {
            this.isVisible = true;
          };
          ProjectionNode.prototype.scheduleRender = function(notifyAll) {
            var _a2, _b, _c;
            if (notifyAll === void 0) {
              notifyAll = true;
            }
            (_b = (_a2 = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a2);
            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());
            if (this.resumingFrom && !this.resumingFrom.instance) {
              this.resumingFrom = void 0;
            }
          };
          ProjectionNode.prototype.setAnimationOrigin = function(delta, hasOnlyRelativeTargetChanged) {
            var _this = this;
            var _a2;
            if (hasOnlyRelativeTargetChanged === void 0) {
              hasOnlyRelativeTargetChanged = false;
            }
            var snapshot = this.snapshot;
            var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};
            var mixedValues = tslib.__assign({}, this.latestValues);
            var targetDelta = createDelta();
            this.relativeTarget = this.relativeTargetOrigin = void 0;
            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
            var relativeLayout = createBox();
            var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;
            var isOnlyMember = (((_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.members.length) || 0) <= 1;
            var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
            this.mixTargetDelta = function(latest) {
              var _a3;
              var progress = latest / 1e3;
              mixAxisDelta(targetDelta.x, delta.x, progress);
              mixAxisDelta(targetDelta.y, delta.y, progress);
              _this.setTargetDelta(targetDelta);
              if (_this.relativeTarget && _this.relativeTargetOrigin && _this.layout && ((_a3 = _this.relativeParent) === null || _a3 === void 0 ? void 0 : _a3.layout)) {
                calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);
                mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress);
              }
              if (isSharedLayoutAnimation) {
                _this.animationValues = mixedValues;
                mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);
              }
              _this.root.scheduleUpdateProjection();
              _this.scheduleRender();
            };
            this.mixTargetDelta(0);
          };
          ProjectionNode.prototype.startAnimation = function(options) {
            var _this = this;
            var _a2, _b;
            (_a2 = this.currentAnimation) === null || _a2 === void 0 ? void 0 : _a2.stop();
            if (this.resumingFrom) {
              (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();
            }
            if (this.pendingAnimation) {
              sync.cancelSync.update(this.pendingAnimation);
              this.pendingAnimation = void 0;
            }
            this.pendingAnimation = sync__default["default"].update(function() {
              globalProjectionState.hasAnimatedSinceResize = true;
              _this.currentAnimation = animate(0, animationTarget, tslib.__assign(tslib.__assign({}, options), { onUpdate: function(latest) {
                var _a3;
                _this.mixTargetDelta(latest);
                (_a3 = options.onUpdate) === null || _a3 === void 0 ? void 0 : _a3.call(options, latest);
              }, onComplete: function() {
                var _a3;
                (_a3 = options.onComplete) === null || _a3 === void 0 ? void 0 : _a3.call(options);
                _this.completeAnimation();
              } }));
              if (_this.resumingFrom) {
                _this.resumingFrom.currentAnimation = _this.currentAnimation;
              }
              _this.pendingAnimation = void 0;
            });
          };
          ProjectionNode.prototype.completeAnimation = function() {
            var _a2;
            if (this.resumingFrom) {
              this.resumingFrom.currentAnimation = void 0;
              this.resumingFrom.preserveOpacity = void 0;
            }
            (_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.exitAnimationComplete();
            this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
          };
          ProjectionNode.prototype.finishAnimation = function() {
            var _a2;
            if (this.currentAnimation) {
              (_a2 = this.mixTargetDelta) === null || _a2 === void 0 ? void 0 : _a2.call(this, animationTarget);
              this.currentAnimation.stop();
            }
            this.completeAnimation();
          };
          ProjectionNode.prototype.applyTransformsToTarget = function() {
            var _a2 = this.getLead(), targetWithTransforms = _a2.targetWithTransforms, target = _a2.target, layout = _a2.layout, latestValues = _a2.latestValues;
            if (!targetWithTransforms || !target || !layout)
              return;
            copyBoxInto(targetWithTransforms, target);
            transformBox(targetWithTransforms, latestValues);
            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
          };
          ProjectionNode.prototype.registerSharedNode = function(layoutId, node) {
            var _a2, _b, _c;
            if (!this.sharedNodes.has(layoutId)) {
              this.sharedNodes.set(layoutId, new NodeStack());
            }
            var stack = this.sharedNodes.get(layoutId);
            stack.add(node);
            node.promote({
              transition: (_a2 = node.options.initialPromotionConfig) === null || _a2 === void 0 ? void 0 : _a2.transition,
              preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)
            });
          };
          ProjectionNode.prototype.isLead = function() {
            var stack = this.getStack();
            return stack ? stack.lead === this : true;
          };
          ProjectionNode.prototype.getLead = function() {
            var _a2;
            var layoutId = this.options.layoutId;
            return layoutId ? ((_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.lead) || this : this;
          };
          ProjectionNode.prototype.getPrevLead = function() {
            var _a2;
            var layoutId = this.options.layoutId;
            return layoutId ? (_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.prevLead : void 0;
          };
          ProjectionNode.prototype.getStack = function() {
            var layoutId = this.options.layoutId;
            if (layoutId)
              return this.root.sharedNodes.get(layoutId);
          };
          ProjectionNode.prototype.promote = function(_a2) {
            var _b = _a2 === void 0 ? {} : _a2, needsReset = _b.needsReset, transition = _b.transition, preserveFollowOpacity = _b.preserveFollowOpacity;
            var stack = this.getStack();
            if (stack)
              stack.promote(this, preserveFollowOpacity);
            if (needsReset) {
              this.projectionDelta = void 0;
              this.needsReset = true;
            }
            if (transition)
              this.setOptions({ transition });
          };
          ProjectionNode.prototype.relegate = function() {
            var stack = this.getStack();
            if (stack) {
              return stack.relegate(this);
            } else {
              return false;
            }
          };
          ProjectionNode.prototype.resetRotation = function() {
            var visualElement2 = this.options.visualElement;
            if (!visualElement2)
              return;
            var hasRotate = false;
            var resetValues = {};
            for (var i = 0; i < transformAxes.length; i++) {
              var axis = transformAxes[i];
              var key = "rotate" + axis;
              if (!visualElement2.getStaticValue(key)) {
                continue;
              }
              hasRotate = true;
              resetValues[key] = visualElement2.getStaticValue(key);
              visualElement2.setStaticValue(key, 0);
            }
            if (!hasRotate)
              return;
            visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.syncRender();
            for (var key in resetValues) {
              visualElement2.setStaticValue(key, resetValues[key]);
            }
            visualElement2.scheduleRender();
          };
          ProjectionNode.prototype.getProjectionStyles = function(styleProp) {
            var _a2, _b, _c, _d, _e, _f;
            if (styleProp === void 0) {
              styleProp = {};
            }
            var styles = {};
            if (!this.instance || this.isSVG)
              return styles;
            if (!this.isVisible) {
              return { visibility: "hidden" };
            } else {
              styles.visibility = "";
            }
            var transformTemplate = (_a2 = this.options.visualElement) === null || _a2 === void 0 ? void 0 : _a2.getProps().transformTemplate;
            if (this.needsReset) {
              this.needsReset = false;
              styles.opacity = "";
              styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
              styles.transform = transformTemplate ? transformTemplate(this.latestValues, "") : "none";
              return styles;
            }
            var lead = this.getLead();
            if (!this.projectionDelta || !this.layout || !lead.target) {
              var emptyStyles = {};
              if (this.options.layoutId) {
                emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;
                emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
              }
              if (this.hasProjected && !hasTransform(this.latestValues)) {
                emptyStyles.transform = transformTemplate ? transformTemplate({}, "") : "none";
                this.hasProjected = false;
              }
              return emptyStyles;
            }
            var valuesToRender = lead.animationValues || lead.latestValues;
            this.applyTransformsToTarget();
            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
            if (transformTemplate) {
              styles.transform = transformTemplate(valuesToRender, styles.transform);
            }
            var _g = this.projectionDelta, x = _g.x, y = _g.y;
            styles.transformOrigin = "".concat(x.origin * 100, "% ").concat(y.origin * 100, "% 0");
            if (lead.animationValues) {
              styles.opacity = lead === this ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
            } else {
              styles.opacity = lead === this ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : "" : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;
            }
            for (var key in scaleCorrectors) {
              if (valuesToRender[key] === void 0)
                continue;
              var _h = scaleCorrectors[key], correct = _h.correct, applyTo = _h.applyTo;
              var corrected = correct(valuesToRender[key], lead);
              if (applyTo) {
                var num = applyTo.length;
                for (var i = 0; i < num; i++) {
                  styles[applyTo[i]] = corrected;
                }
              } else {
                styles[key] = corrected;
              }
            }
            if (this.options.layoutId) {
              styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || "" : "none";
            }
            return styles;
          };
          ProjectionNode.prototype.clearSnapshot = function() {
            this.resumeFrom = this.snapshot = void 0;
          };
          ProjectionNode.prototype.resetTree = function() {
            this.root.nodes.forEach(function(node) {
              var _a2;
              return (_a2 = node.currentAnimation) === null || _a2 === void 0 ? void 0 : _a2.stop();
            });
            this.root.nodes.forEach(clearMeasurements);
            this.root.sharedNodes.clear();
          };
          return ProjectionNode;
        }();
      }
      function updateLayout(node) {
        node.updateLayout();
      }
      function notifyLayoutUpdate(node) {
        var _a, _b, _c, _d;
        var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;
        if (node.isLead() && node.layout && snapshot && node.hasListeners("didUpdate")) {
          var _e = node.layout, layout_1 = _e.actual, measuredLayout = _e.measured;
          if (node.options.animationType === "size") {
            eachAxis(function(axis) {
              var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];
              var length = calcLength(axisSnapshot);
              axisSnapshot.min = layout_1[axis].min;
              axisSnapshot.max = axisSnapshot.min + length;
            });
          } else if (node.options.animationType === "position") {
            eachAxis(function(axis) {
              var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];
              var length = calcLength(layout_1[axis]);
              axisSnapshot.max = axisSnapshot.min + length;
            });
          }
          var layoutDelta = createDelta();
          calcBoxDelta(layoutDelta, layout_1, snapshot.layout);
          var visualDelta = createDelta();
          if (snapshot.isShared) {
            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);
          } else {
            calcBoxDelta(visualDelta, layout_1, snapshot.layout);
          }
          var hasLayoutChanged = !isDeltaZero(layoutDelta);
          var hasRelativeTargetChanged = false;
          if (!node.resumeFrom) {
            node.relativeParent = node.getClosestProjectingParent();
            if (node.relativeParent && !node.relativeParent.resumeFrom) {
              var _f = node.relativeParent, parentSnapshot = _f.snapshot, parentLayout = _f.layout;
              if (parentSnapshot && parentLayout) {
                var relativeSnapshot = createBox();
                calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);
                var relativeLayout = createBox();
                calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);
                if (!boxEquals(relativeSnapshot, relativeLayout)) {
                  hasRelativeTargetChanged = true;
                }
              }
            }
          }
          node.notifyListeners("didUpdate", {
            layout: layout_1,
            snapshot,
            delta: visualDelta,
            layoutDelta,
            hasLayoutChanged,
            hasRelativeTargetChanged
          });
        } else if (node.isLead()) {
          (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);
        }
        node.options.transition = void 0;
      }
      function clearSnapshot(node) {
        node.clearSnapshot();
      }
      function clearMeasurements(node) {
        node.clearMeasurements();
      }
      function resetTransformStyle(node) {
        node.resetTransform();
      }
      function finishAnimation(node) {
        node.finishAnimation();
        node.targetDelta = node.relativeTarget = node.target = void 0;
      }
      function resolveTargetDelta(node) {
        node.resolveTargetDelta();
      }
      function calcProjection(node) {
        node.calcProjection();
      }
      function resetRotation(node) {
        node.resetRotation();
      }
      function removeLeadSnapshots(stack) {
        stack.removeLeadSnapshot();
      }
      function mixAxisDelta(output, delta, p) {
        output.translate = popmotion.mix(delta.translate, 0, p);
        output.scale = popmotion.mix(delta.scale, 1, p);
        output.origin = delta.origin;
        output.originPoint = delta.originPoint;
      }
      function mixAxis(output, from, to, p) {
        output.min = popmotion.mix(from.min, to.min, p);
        output.max = popmotion.mix(from.max, to.max, p);
      }
      function mixBox(output, from, to, p) {
        mixAxis(output.x, from.x, to.x, p);
        mixAxis(output.y, from.y, to.y, p);
      }
      function hasOpacityCrossfade(node) {
        return node.animationValues && node.animationValues.opacityExit !== void 0;
      }
      var defaultLayoutTransition = {
        duration: 0.45,
        ease: [0.4, 0, 0.1, 1]
      };
      function mountNodeEarly(node, id2) {
        var searchNode = node.root;
        for (var i = node.path.length - 1; i >= 0; i--) {
          if (Boolean(node.path[i].instance)) {
            searchNode = node.path[i];
            break;
          }
        }
        var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;
        var element = searchElement.querySelector('[data-projection-id="'.concat(id2, '"]'));
        if (element)
          node.mount(element, true);
      }
      function roundAxis(axis) {
        axis.min = Math.round(axis.min);
        axis.max = Math.round(axis.max);
      }
      function roundBox(box) {
        roundAxis(box.x);
        roundAxis(box.y);
      }
      var id$1 = 1;
      function useProjectionId() {
        return useConstant(function() {
          if (globalProjectionState.hasEverUpdated) {
            return id$1++;
          }
        });
      }
      var LayoutGroupContext = React.createContext({});
      var SwitchLayoutGroupContext = React.createContext({});
      function useProjection(projectionId, _a, visualElement2, ProjectionNodeConstructor) {
        var _b;
        var layoutId = _a.layoutId, layout = _a.layout, drag2 = _a.drag, dragConstraints = _a.dragConstraints, layoutScroll = _a.layoutScroll;
        var initialPromotionConfig = React.useContext(SwitchLayoutGroupContext);
        if (!ProjectionNodeConstructor || !visualElement2 || (visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.projection)) {
          return;
        }
        visualElement2.projection = new ProjectionNodeConstructor(projectionId, visualElement2.getLatestValues(), (_b = visualElement2.parent) === null || _b === void 0 ? void 0 : _b.projection);
        visualElement2.projection.setOptions({
          layoutId,
          layout,
          alwaysMeasureLayout: Boolean(drag2) || dragConstraints && isRefObject(dragConstraints),
          visualElement: visualElement2,
          scheduleRender: function() {
            return visualElement2.scheduleRender();
          },
          animationType: typeof layout === "string" ? layout : "both",
          initialPromotionConfig,
          layoutScroll
        });
      }
      var VisualElementHandler = function(_super) {
        tslib.__extends(VisualElementHandler2, _super);
        function VisualElementHandler2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        VisualElementHandler2.prototype.getSnapshotBeforeUpdate = function() {
          this.updateProps();
          return null;
        };
        VisualElementHandler2.prototype.componentDidUpdate = function() {
        };
        VisualElementHandler2.prototype.updateProps = function() {
          var _a = this.props, visualElement2 = _a.visualElement, props = _a.props;
          if (visualElement2)
            visualElement2.setProps(props);
        };
        VisualElementHandler2.prototype.render = function() {
          return this.props.children;
        };
        return VisualElementHandler2;
      }(React__default["default"].Component);
      function createMotionComponent(_a) {
        var preloadedFeatures = _a.preloadedFeatures, createVisualElement = _a.createVisualElement, projectionNodeConstructor = _a.projectionNodeConstructor, useRender = _a.useRender, useVisualState2 = _a.useVisualState, Component = _a.Component;
        preloadedFeatures && loadFeatures(preloadedFeatures);
        function MotionComponent(props, externalRef) {
          var layoutId = useLayoutId(props);
          props = tslib.__assign(tslib.__assign({}, props), { layoutId });
          var config = React.useContext(MotionConfigContext);
          var features = null;
          var context = useCreateMotionContext(props);
          var projectionId = useProjectionId();
          var visualState = useVisualState2(props, config.isStatic);
          if (!config.isStatic && isBrowser) {
            context.visualElement = useVisualElement(Component, visualState, tslib.__assign(tslib.__assign({}, config), props), createVisualElement);
            useProjection(projectionId, props, context.visualElement, projectionNodeConstructor || featureDefinitions.projectionNodeConstructor);
            features = useFeatures(props, context.visualElement, preloadedFeatures);
          }
          return React__namespace.createElement(VisualElementHandler, { visualElement: context.visualElement, props: tslib.__assign(tslib.__assign({}, config), props) }, features, React__namespace.createElement(MotionContext.Provider, { value: context }, useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, config.isStatic)));
        }
        return React.forwardRef(MotionComponent);
      }
      function useLayoutId(_a) {
        var _b;
        var layoutId = _a.layoutId;
        var layoutGroupId = (_b = React.useContext(LayoutGroupContext)) === null || _b === void 0 ? void 0 : _b.id;
        return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
      }
      function createMotionProxy(createConfig) {
        function custom(Component, customMotionComponentConfig) {
          if (customMotionComponentConfig === void 0) {
            customMotionComponentConfig = {};
          }
          return createMotionComponent(createConfig(Component, customMotionComponentConfig));
        }
        if (typeof Proxy === "undefined") {
          return custom;
        }
        var componentCache = /* @__PURE__ */ new Map();
        return new Proxy(custom, {
          get: function(_target, key) {
            if (!componentCache.has(key)) {
              componentCache.set(key, custom(key));
            }
            return componentCache.get(key);
          }
        });
      }
      var lowercaseSVGElements = [
        "animate",
        "circle",
        "defs",
        "desc",
        "ellipse",
        "g",
        "image",
        "line",
        "filter",
        "marker",
        "mask",
        "metadata",
        "path",
        "pattern",
        "polygon",
        "polyline",
        "rect",
        "stop",
        "svg",
        "switch",
        "symbol",
        "text",
        "tspan",
        "use",
        "view"
      ];
      function isSVGComponent(Component) {
        if (typeof Component !== "string" || Component.includes("-")) {
          return false;
        } else if (lowercaseSVGElements.indexOf(Component) > -1 || /[A-Z]/.test(Component)) {
          return true;
        }
        return false;
      }
      function isForcedMotionValue(key, _a) {
        var layout = _a.layout, layoutId = _a.layoutId;
        return isTransformProp(key) || isTransformOriginProp(key) || (layout || layoutId !== void 0) && (!!scaleCorrectors[key] || key === "opacity");
      }
      var translateAlias = {
        x: "translateX",
        y: "translateY",
        z: "translateZ",
        transformPerspective: "perspective"
      };
      function buildTransform(_a, _b, transformIsDefault, transformTemplate) {
        var transform2 = _a.transform, transformKeys2 = _a.transformKeys;
        var _c = _b.enableHardwareAcceleration, enableHardwareAcceleration = _c === void 0 ? true : _c, _d = _b.allowTransformNone, allowTransformNone = _d === void 0 ? true : _d;
        var transformString = "";
        transformKeys2.sort(sortTransformProps);
        var transformHasZ = false;
        var numTransformKeys = transformKeys2.length;
        for (var i = 0; i < numTransformKeys; i++) {
          var key = transformKeys2[i];
          transformString += "".concat(translateAlias[key] || key, "(").concat(transform2[key], ") ");
          if (key === "z")
            transformHasZ = true;
        }
        if (!transformHasZ && enableHardwareAcceleration) {
          transformString += "translateZ(0)";
        } else {
          transformString = transformString.trim();
        }
        if (transformTemplate) {
          transformString = transformTemplate(transform2, transformIsDefault ? "" : transformString);
        } else if (allowTransformNone && transformIsDefault) {
          transformString = "none";
        }
        return transformString;
      }
      function buildTransformOrigin(_a) {
        var _b = _a.originX, originX = _b === void 0 ? "50%" : _b, _c = _a.originY, originY = _c === void 0 ? "50%" : _c, _d = _a.originZ, originZ = _d === void 0 ? 0 : _d;
        return "".concat(originX, " ").concat(originY, " ").concat(originZ);
      }
      function isCSSVariable$1(key) {
        return key.startsWith("--");
      }
      var getValueAsType = function(value, type) {
        return type && typeof value === "number" ? type.transform(value) : value;
      };
      function buildHTMLStyles(state, latestValues, options, transformTemplate) {
        var _a;
        var style = state.style, vars = state.vars, transform2 = state.transform, transformKeys2 = state.transformKeys, transformOrigin = state.transformOrigin;
        transformKeys2.length = 0;
        var hasTransform2 = false;
        var hasTransformOrigin = false;
        var transformIsNone = true;
        for (var key in latestValues) {
          var value = latestValues[key];
          if (isCSSVariable$1(key)) {
            vars[key] = value;
            continue;
          }
          var valueType = numberValueTypes[key];
          var valueAsType = getValueAsType(value, valueType);
          if (isTransformProp(key)) {
            hasTransform2 = true;
            transform2[key] = valueAsType;
            transformKeys2.push(key);
            if (!transformIsNone)
              continue;
            if (value !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0))
              transformIsNone = false;
          } else if (isTransformOriginProp(key)) {
            transformOrigin[key] = valueAsType;
            hasTransformOrigin = true;
          } else {
            style[key] = valueAsType;
          }
        }
        if (hasTransform2) {
          style.transform = buildTransform(state, options, transformIsNone, transformTemplate);
        } else if (transformTemplate) {
          style.transform = transformTemplate({}, "");
        }
        if (hasTransformOrigin) {
          style.transformOrigin = buildTransformOrigin(transformOrigin);
        }
      }
      var createHtmlRenderState = function() {
        return {
          style: {},
          transform: {},
          transformKeys: [],
          transformOrigin: {},
          vars: {}
        };
      };
      function copyRawValuesOnly(target, source, props) {
        for (var key in source) {
          if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
            target[key] = source[key];
          }
        }
      }
      function useInitialMotionValues(_a, visualState, isStatic) {
        var transformTemplate = _a.transformTemplate;
        return React.useMemo(function() {
          var state = createHtmlRenderState();
          buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);
          var vars = state.vars, style = state.style;
          return tslib.__assign(tslib.__assign({}, vars), style);
        }, [visualState]);
      }
      function useStyle(props, visualState, isStatic) {
        var styleProp = props.style || {};
        var style = {};
        copyRawValuesOnly(style, styleProp, props);
        Object.assign(style, useInitialMotionValues(props, visualState, isStatic));
        if (props.transformValues) {
          style = props.transformValues(style);
        }
        return style;
      }
      function useHTMLProps(props, visualState, isStatic) {
        var htmlProps = {};
        var style = useStyle(props, visualState, isStatic);
        if (Boolean(props.drag) && props.dragListener !== false) {
          htmlProps.draggable = false;
          style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
          style.touchAction = props.drag === true ? "none" : "pan-".concat(props.drag === "x" ? "y" : "x");
        }
        htmlProps.style = style;
        return htmlProps;
      }
      var validMotionProps = /* @__PURE__ */ new Set([
        "initial",
        "animate",
        "exit",
        "style",
        "variants",
        "transition",
        "transformTemplate",
        "transformValues",
        "custom",
        "inherit",
        "layout",
        "layoutId",
        "layoutDependency",
        "onLayoutAnimationComplete",
        "onLayoutMeasure",
        "onBeforeLayoutMeasure",
        "onAnimationStart",
        "onAnimationComplete",
        "onUpdate",
        "onDragStart",
        "onDrag",
        "onDragEnd",
        "onMeasureDragConstraints",
        "onDirectionLock",
        "onDragTransitionEnd",
        "drag",
        "dragControls",
        "dragListener",
        "dragConstraints",
        "dragDirectionLock",
        "dragSnapToOrigin",
        "_dragX",
        "_dragY",
        "dragElastic",
        "dragMomentum",
        "dragPropagation",
        "dragTransition",
        "whileDrag",
        "onPan",
        "onPanStart",
        "onPanEnd",
        "onPanSessionStart",
        "onTap",
        "onTapStart",
        "onTapCancel",
        "onHoverStart",
        "onHoverEnd",
        "whileFocus",
        "whileTap",
        "whileHover",
        "whileInView",
        "onViewportEnter",
        "onViewportLeave",
        "viewport",
        "layoutScroll"
      ]);
      function isValidMotionProp(key) {
        return validMotionProps.has(key);
      }
      var shouldForward = function(key) {
        return !isValidMotionProp(key);
      };
      try {
        emotionIsPropValid_1 = require_is_prop_valid_browser_cjs().default;
        shouldForward = function(key) {
          if (key.startsWith("on")) {
            return !isValidMotionProp(key);
          } else {
            return emotionIsPropValid_1(key);
          }
        };
      } catch (_a) {
      }
      var emotionIsPropValid_1;
      function filterProps(props, isDom, forwardMotionProps) {
        var filteredProps = {};
        for (var key in props) {
          if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || props["draggable"] && key.startsWith("onDrag")) {
            filteredProps[key] = props[key];
          }
        }
        return filteredProps;
      }
      function calcOrigin$1(origin, offset, size) {
        return typeof origin === "string" ? origin : styleValueTypes.px.transform(offset + size * origin);
      }
      function calcSVGTransformOrigin(dimensions, originX, originY) {
        var pxOriginX = calcOrigin$1(originX, dimensions.x, dimensions.width);
        var pxOriginY = calcOrigin$1(originY, dimensions.y, dimensions.height);
        return "".concat(pxOriginX, " ").concat(pxOriginY);
      }
      var dashKeys = {
        offset: "stroke-dashoffset",
        array: "stroke-dasharray"
      };
      var camelKeys = {
        offset: "strokeDashoffset",
        array: "strokeDasharray"
      };
      function buildSVGPath(attrs, length, spacing, offset, useDashCase) {
        if (spacing === void 0) {
          spacing = 1;
        }
        if (offset === void 0) {
          offset = 0;
        }
        if (useDashCase === void 0) {
          useDashCase = true;
        }
        attrs.pathLength = 1;
        var keys = useDashCase ? dashKeys : camelKeys;
        attrs[keys.offset] = styleValueTypes.px.transform(-offset);
        var pathLength = styleValueTypes.px.transform(length);
        var pathSpacing = styleValueTypes.px.transform(spacing);
        attrs[keys.array] = "".concat(pathLength, " ").concat(pathSpacing);
      }
      function buildSVGAttrs(state, _a, options, transformTemplate) {
        var attrX = _a.attrX, attrY = _a.attrY, originX = _a.originX, originY = _a.originY, pathLength = _a.pathLength, _b = _a.pathSpacing, pathSpacing = _b === void 0 ? 1 : _b, _c = _a.pathOffset, pathOffset = _c === void 0 ? 0 : _c, latest = tslib.__rest(_a, ["attrX", "attrY", "originX", "originY", "pathLength", "pathSpacing", "pathOffset"]);
        buildHTMLStyles(state, latest, options, transformTemplate);
        state.attrs = state.style;
        state.style = {};
        var attrs = state.attrs, style = state.style, dimensions = state.dimensions;
        if (attrs.transform) {
          if (dimensions)
            style.transform = attrs.transform;
          delete attrs.transform;
        }
        if (dimensions && (originX !== void 0 || originY !== void 0 || style.transform)) {
          style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
        }
        if (attrX !== void 0)
          attrs.x = attrX;
        if (attrY !== void 0)
          attrs.y = attrY;
        if (pathLength !== void 0) {
          buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
        }
      }
      var createSvgRenderState = function() {
        return tslib.__assign(tslib.__assign({}, createHtmlRenderState()), { attrs: {} });
      };
      function useSVGProps(props, visualState) {
        var visualProps = React.useMemo(function() {
          var state = createSvgRenderState();
          buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, props.transformTemplate);
          return tslib.__assign(tslib.__assign({}, state.attrs), { style: tslib.__assign({}, state.style) });
        }, [visualState]);
        if (props.style) {
          var rawStyles = {};
          copyRawValuesOnly(rawStyles, props.style, props);
          visualProps.style = tslib.__assign(tslib.__assign({}, rawStyles), visualProps.style);
        }
        return visualProps;
      }
      function createUseRender(forwardMotionProps) {
        if (forwardMotionProps === void 0) {
          forwardMotionProps = false;
        }
        var useRender = function(Component, props, projectionId, ref, _a, isStatic) {
          var latestValues = _a.latestValues;
          var useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;
          var visualProps = useVisualProps(props, latestValues, isStatic);
          var filteredProps = filterProps(props, typeof Component === "string", forwardMotionProps);
          var elementProps = tslib.__assign(tslib.__assign(tslib.__assign({}, filteredProps), visualProps), { ref });
          if (projectionId) {
            elementProps["data-projection-id"] = projectionId;
          }
          return React.createElement(Component, elementProps);
        };
        return useRender;
      }
      var CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;
      var REPLACE_TEMPLATE = "$1-$2";
      var camelToDash = function(str) {
        return str.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();
      };
      function renderHTML(element, _a, styleProp, projection) {
        var style = _a.style, vars = _a.vars;
        Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
        for (var key in vars) {
          element.style.setProperty(key, vars[key]);
        }
      }
      var camelCaseAttributes = /* @__PURE__ */ new Set([
        "baseFrequency",
        "diffuseConstant",
        "kernelMatrix",
        "kernelUnitLength",
        "keySplines",
        "keyTimes",
        "limitingConeAngle",
        "markerHeight",
        "markerWidth",
        "numOctaves",
        "targetX",
        "targetY",
        "surfaceScale",
        "specularConstant",
        "specularExponent",
        "stdDeviation",
        "tableValues",
        "viewBox",
        "gradientTransform",
        "pathLength"
      ]);
      function renderSVG(element, renderState) {
        renderHTML(element, renderState);
        for (var key in renderState.attrs) {
          element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
        }
      }
      function scrapeMotionValuesFromProps$1(props) {
        var style = props.style;
        var newValues = {};
        for (var key in style) {
          if (isMotionValue(style[key]) || isForcedMotionValue(key, props)) {
            newValues[key] = style[key];
          }
        }
        return newValues;
      }
      function scrapeMotionValuesFromProps(props) {
        var newValues = scrapeMotionValuesFromProps$1(props);
        for (var key in props) {
          if (isMotionValue(props[key])) {
            var targetKey = key === "x" || key === "y" ? "attr" + key.toUpperCase() : key;
            newValues[targetKey] = props[key];
          }
        }
        return newValues;
      }
      function isAnimationControls(v) {
        return typeof v === "object" && typeof v.start === "function";
      }
      function makeState(_a, props, context, presenceContext) {
        var scrapeMotionValuesFromProps2 = _a.scrapeMotionValuesFromProps, createRenderState = _a.createRenderState, onMount = _a.onMount;
        var state = {
          latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps2),
          renderState: createRenderState()
        };
        if (onMount) {
          state.mount = function(instance) {
            return onMount(props, instance, state);
          };
        }
        return state;
      }
      var makeUseVisualState = function(config) {
        return function(props, isStatic) {
          var context = React.useContext(MotionContext);
          var presenceContext = React.useContext(PresenceContext);
          return isStatic ? makeState(config, props, context, presenceContext) : useConstant(function() {
            return makeState(config, props, context, presenceContext);
          });
        };
      };
      function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
        var values = {};
        var blockInitialAnimation = (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false;
        var motionValues = scrapeMotionValues(props);
        for (var key in motionValues) {
          values[key] = resolveMotionValue(motionValues[key]);
        }
        var initial = props.initial, animate2 = props.animate;
        var isControllingVariants = checkIfControllingVariants(props);
        var isVariantNode = checkIfVariantNode(props);
        if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {
          initial !== null && initial !== void 0 ? initial : initial = context.initial;
          animate2 !== null && animate2 !== void 0 ? animate2 : animate2 = context.animate;
        }
        var initialAnimationIsBlocked = blockInitialAnimation || initial === false;
        var variantToSet = initialAnimationIsBlocked ? animate2 : initial;
        if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
          var list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
          list.forEach(function(definition) {
            var resolved = resolveVariantFromProps(props, definition);
            if (!resolved)
              return;
            var transitionEnd = resolved.transitionEnd;
            resolved.transition;
            var target = tslib.__rest(resolved, ["transitionEnd", "transition"]);
            for (var key2 in target) {
              var valueTarget = target[key2];
              if (Array.isArray(valueTarget)) {
                var index = initialAnimationIsBlocked ? valueTarget.length - 1 : 0;
                valueTarget = valueTarget[index];
              }
              if (valueTarget !== null) {
                values[key2] = valueTarget;
              }
            }
            for (var key2 in transitionEnd)
              values[key2] = transitionEnd[key2];
          });
        }
        return values;
      }
      var svgMotionConfig = {
        useVisualState: makeUseVisualState({
          scrapeMotionValuesFromProps,
          createRenderState: createSvgRenderState,
          onMount: function(props, instance, _a) {
            var renderState = _a.renderState, latestValues = _a.latestValues;
            try {
              renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
            } catch (e) {
              renderState.dimensions = {
                x: 0,
                y: 0,
                width: 0,
                height: 0
              };
            }
            buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, props.transformTemplate);
            renderSVG(instance, renderState);
          }
        })
      };
      var htmlMotionConfig = {
        useVisualState: makeUseVisualState({
          scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,
          createRenderState: createHtmlRenderState
        })
      };
      function createDomMotionConfig(Component, _a, preloadedFeatures, createVisualElement, projectionNodeConstructor) {
        var _b = _a.forwardMotionProps, forwardMotionProps = _b === void 0 ? false : _b;
        var baseConfig = isSVGComponent(Component) ? svgMotionConfig : htmlMotionConfig;
        return tslib.__assign(tslib.__assign({}, baseConfig), { preloadedFeatures, useRender: createUseRender(forwardMotionProps), createVisualElement, projectionNodeConstructor, Component });
      }
      var AnimationType;
      (function(AnimationType2) {
        AnimationType2["Animate"] = "animate";
        AnimationType2["Hover"] = "whileHover";
        AnimationType2["Tap"] = "whileTap";
        AnimationType2["Drag"] = "whileDrag";
        AnimationType2["Focus"] = "whileFocus";
        AnimationType2["InView"] = "whileInView";
        AnimationType2["Exit"] = "exit";
      })(AnimationType || (AnimationType = {}));
      function addDomEvent(target, eventName, handler, options) {
        target.addEventListener(eventName, handler, options);
        return function() {
          return target.removeEventListener(eventName, handler, options);
        };
      }
      function useDomEvent(ref, eventName, handler, options) {
        React.useEffect(function() {
          var element = ref.current;
          if (handler && element) {
            return addDomEvent(element, eventName, handler, options);
          }
        }, [ref, eventName, handler, options]);
      }
      function useFocusGesture(_a) {
        var whileFocus = _a.whileFocus, visualElement2 = _a.visualElement;
        var onFocus = function() {
          var _a2;
          (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Focus, true);
        };
        var onBlur = function() {
          var _a2;
          (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Focus, false);
        };
        useDomEvent(visualElement2, "focus", whileFocus ? onFocus : void 0);
        useDomEvent(visualElement2, "blur", whileFocus ? onBlur : void 0);
      }
      function isMouseEvent(event) {
        if (typeof PointerEvent !== "undefined" && event instanceof PointerEvent) {
          return !!(event.pointerType === "mouse");
        }
        return event instanceof MouseEvent;
      }
      function isTouchEvent(event) {
        var hasTouches = !!event.touches;
        return hasTouches;
      }
      function filterPrimaryPointer(eventHandler) {
        return function(event) {
          var isMouseEvent2 = event instanceof MouseEvent;
          var isPrimaryPointer = !isMouseEvent2 || isMouseEvent2 && event.button === 0;
          if (isPrimaryPointer) {
            eventHandler(event);
          }
        };
      }
      var defaultPagePoint = { pageX: 0, pageY: 0 };
      function pointFromTouch(e, pointType) {
        if (pointType === void 0) {
          pointType = "page";
        }
        var primaryTouch = e.touches[0] || e.changedTouches[0];
        var point = primaryTouch || defaultPagePoint;
        return {
          x: point[pointType + "X"],
          y: point[pointType + "Y"]
        };
      }
      function pointFromMouse(point, pointType) {
        if (pointType === void 0) {
          pointType = "page";
        }
        return {
          x: point[pointType + "X"],
          y: point[pointType + "Y"]
        };
      }
      function extractEventInfo(event, pointType) {
        if (pointType === void 0) {
          pointType = "page";
        }
        return {
          point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)
        };
      }
      var wrapHandler = function(handler, shouldFilterPrimaryPointer) {
        if (shouldFilterPrimaryPointer === void 0) {
          shouldFilterPrimaryPointer = false;
        }
        var listener = function(event) {
          return handler(event, extractEventInfo(event));
        };
        return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;
      };
      var supportsPointerEvents = function() {
        return isBrowser && window.onpointerdown === null;
      };
      var supportsTouchEvents = function() {
        return isBrowser && window.ontouchstart === null;
      };
      var supportsMouseEvents = function() {
        return isBrowser && window.onmousedown === null;
      };
      var mouseEventNames = {
        pointerdown: "mousedown",
        pointermove: "mousemove",
        pointerup: "mouseup",
        pointercancel: "mousecancel",
        pointerover: "mouseover",
        pointerout: "mouseout",
        pointerenter: "mouseenter",
        pointerleave: "mouseleave"
      };
      var touchEventNames = {
        pointerdown: "touchstart",
        pointermove: "touchmove",
        pointerup: "touchend",
        pointercancel: "touchcancel"
      };
      function getPointerEventName(name) {
        if (supportsPointerEvents()) {
          return name;
        } else if (supportsTouchEvents()) {
          return touchEventNames[name];
        } else if (supportsMouseEvents()) {
          return mouseEventNames[name];
        }
        return name;
      }
      function addPointerEvent(target, eventName, handler, options) {
        return addDomEvent(target, getPointerEventName(eventName), wrapHandler(handler, eventName === "pointerdown"), options);
      }
      function usePointerEvent(ref, eventName, handler, options) {
        return useDomEvent(ref, getPointerEventName(eventName), handler && wrapHandler(handler, eventName === "pointerdown"), options);
      }
      function createLock(name) {
        var lock = null;
        return function() {
          var openLock = function() {
            lock = null;
          };
          if (lock === null) {
            lock = name;
            return openLock;
          }
          return false;
        };
      }
      var globalHorizontalLock = createLock("dragHorizontal");
      var globalVerticalLock = createLock("dragVertical");
      function getGlobalLock(drag2) {
        var lock = false;
        if (drag2 === "y") {
          lock = globalVerticalLock();
        } else if (drag2 === "x") {
          lock = globalHorizontalLock();
        } else {
          var openHorizontal_1 = globalHorizontalLock();
          var openVertical_1 = globalVerticalLock();
          if (openHorizontal_1 && openVertical_1) {
            lock = function() {
              openHorizontal_1();
              openVertical_1();
            };
          } else {
            if (openHorizontal_1)
              openHorizontal_1();
            if (openVertical_1)
              openVertical_1();
          }
        }
        return lock;
      }
      function isDragActive() {
        var openGestureLock = getGlobalLock(true);
        if (!openGestureLock)
          return true;
        openGestureLock();
        return false;
      }
      function createHoverEvent(visualElement2, isActive, callback) {
        return function(event, info) {
          var _a;
          if (!isMouseEvent(event) || isDragActive())
            return;
          (_a = visualElement2.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Hover, isActive);
          callback === null || callback === void 0 ? void 0 : callback(event, info);
        };
      }
      function useHoverGesture(_a) {
        var onHoverStart = _a.onHoverStart, onHoverEnd = _a.onHoverEnd, whileHover = _a.whileHover, visualElement2 = _a.visualElement;
        usePointerEvent(visualElement2, "pointerenter", onHoverStart || whileHover ? createHoverEvent(visualElement2, true, onHoverStart) : void 0);
        usePointerEvent(visualElement2, "pointerleave", onHoverEnd || whileHover ? createHoverEvent(visualElement2, false, onHoverEnd) : void 0);
      }
      var isNodeOrChild = function(parent, child) {
        if (!child) {
          return false;
        } else if (parent === child) {
          return true;
        } else {
          return isNodeOrChild(parent, child.parentElement);
        }
      };
      function useUnmountEffect(callback) {
        return React.useEffect(function() {
          return function() {
            return callback();
          };
        }, []);
      }
      function useTapGesture(_a) {
        var onTap = _a.onTap, onTapStart = _a.onTapStart, onTapCancel = _a.onTapCancel, whileTap = _a.whileTap, visualElement2 = _a.visualElement;
        var hasPressListeners = onTap || onTapStart || onTapCancel || whileTap;
        var isPressing = React.useRef(false);
        var cancelPointerEndListeners = React.useRef(null);
        function removePointerEndListener() {
          var _a2;
          (_a2 = cancelPointerEndListeners.current) === null || _a2 === void 0 ? void 0 : _a2.call(cancelPointerEndListeners);
          cancelPointerEndListeners.current = null;
        }
        function checkPointerEnd() {
          var _a2;
          removePointerEndListener();
          isPressing.current = false;
          (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Tap, false);
          return !isDragActive();
        }
        function onPointerUp(event, info) {
          if (!checkPointerEnd())
            return;
          !isNodeOrChild(visualElement2.getInstance(), event.target) ? onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info) : onTap === null || onTap === void 0 ? void 0 : onTap(event, info);
        }
        function onPointerCancel(event, info) {
          if (!checkPointerEnd())
            return;
          onTapCancel === null || onTapCancel === void 0 ? void 0 : onTapCancel(event, info);
        }
        function onPointerDown(event, info) {
          var _a2;
          removePointerEndListener();
          if (isPressing.current)
            return;
          isPressing.current = true;
          cancelPointerEndListeners.current = popmotion.pipe(addPointerEvent(window, "pointerup", onPointerUp), addPointerEvent(window, "pointercancel", onPointerCancel));
          (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Tap, true);
          onTapStart === null || onTapStart === void 0 ? void 0 : onTapStart(event, info);
        }
        usePointerEvent(visualElement2, "pointerdown", hasPressListeners ? onPointerDown : void 0);
        useUnmountEffect(removePointerEndListener);
      }
      var warned = /* @__PURE__ */ new Set();
      function warnOnce(condition, message, element) {
        if (condition || warned.has(message))
          return;
        console.warn(message);
        if (element)
          console.warn(element);
        warned.add(message);
      }
      var observerCallbacks = new WeakMap();
      var observers = new WeakMap();
      var fireObserverCallback = function(entry) {
        var _a;
        (_a = observerCallbacks.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);
      };
      var fireAllObserverCallbacks = function(entries) {
        entries.forEach(fireObserverCallback);
      };
      function initIntersectionObserver(_a) {
        var root = _a.root, options = tslib.__rest(_a, ["root"]);
        var lookupRoot = root || document;
        if (!observers.has(lookupRoot)) {
          observers.set(lookupRoot, {});
        }
        var rootObservers = observers.get(lookupRoot);
        var key = JSON.stringify(options);
        if (!rootObservers[key]) {
          rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, tslib.__assign({ root }, options));
        }
        return rootObservers[key];
      }
      function observeIntersection(element, options, callback) {
        var rootInteresectionObserver = initIntersectionObserver(options);
        observerCallbacks.set(element, callback);
        rootInteresectionObserver.observe(element);
        return function() {
          observerCallbacks.delete(element);
          rootInteresectionObserver.unobserve(element);
        };
      }
      function useViewport(_a) {
        var visualElement2 = _a.visualElement, whileInView = _a.whileInView, onViewportEnter = _a.onViewportEnter, onViewportLeave = _a.onViewportLeave, _b = _a.viewport, viewport = _b === void 0 ? {} : _b;
        var state = React.useRef({
          hasEnteredView: false,
          isInView: false
        });
        var shouldObserve = Boolean(whileInView || onViewportEnter || onViewportLeave);
        if (viewport.once && state.current.hasEnteredView)
          shouldObserve = false;
        var useObserver = typeof IntersectionObserver === "undefined" ? useMissingIntersectionObserver : useIntersectionObserver;
        useObserver(shouldObserve, state.current, visualElement2, viewport);
      }
      var thresholdNames = {
        some: 0,
        all: 1
      };
      function useIntersectionObserver(shouldObserve, state, visualElement2, _a) {
        var root = _a.root, rootMargin = _a.margin, _b = _a.amount, amount = _b === void 0 ? "some" : _b, once = _a.once;
        React.useEffect(function() {
          if (!shouldObserve)
            return;
          var options = {
            root: root === null || root === void 0 ? void 0 : root.current,
            rootMargin,
            threshold: typeof amount === "number" ? amount : thresholdNames[amount]
          };
          var intersectionCallback = function(entry) {
            var _a2;
            var isIntersecting = entry.isIntersecting;
            if (state.isInView === isIntersecting)
              return;
            state.isInView = isIntersecting;
            if (once && !isIntersecting && state.hasEnteredView) {
              return;
            } else if (isIntersecting) {
              state.hasEnteredView = true;
            }
            (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.InView, isIntersecting);
            var props = visualElement2.getProps();
            var callback = isIntersecting ? props.onViewportEnter : props.onViewportLeave;
            callback === null || callback === void 0 ? void 0 : callback(entry);
          };
          return observeIntersection(visualElement2.getInstance(), options, intersectionCallback);
        }, [shouldObserve, root, rootMargin, amount]);
      }
      function useMissingIntersectionObserver(shouldObserve, state, visualElement2) {
        React.useEffect(function() {
          if (!shouldObserve)
            return;
          if (true) {
            warnOnce(false, "IntersectionObserver not available on this device. whileInView animations will trigger on mount.");
          }
          requestAnimationFrame(function() {
            var _a;
            state.hasEnteredView = true;
            var onViewportEnter = visualElement2.getProps().onViewportEnter;
            onViewportEnter === null || onViewportEnter === void 0 ? void 0 : onViewportEnter(null);
            (_a = visualElement2.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.InView, true);
          });
        }, [shouldObserve]);
      }
      var makeRenderlessComponent = function(hook) {
        return function(props) {
          hook(props);
          return null;
        };
      };
      var gestureAnimations = {
        inView: makeRenderlessComponent(useViewport),
        tap: makeRenderlessComponent(useTapGesture),
        focus: makeRenderlessComponent(useFocusGesture),
        hover: makeRenderlessComponent(useHoverGesture)
      };
      function usePresence() {
        var context = React.useContext(PresenceContext);
        if (context === null)
          return [true, null];
        var isPresent2 = context.isPresent, onExitComplete = context.onExitComplete, register = context.register;
        var id2 = useUniqueId();
        React.useEffect(function() {
          return register(id2);
        }, []);
        var safeToRemove = function() {
          return onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id2);
        };
        return !isPresent2 && onExitComplete ? [false, safeToRemove] : [true];
      }
      function useIsPresent() {
        return isPresent(React.useContext(PresenceContext));
      }
      function isPresent(context) {
        return context === null ? true : context.isPresent;
      }
      var counter = 0;
      var incrementId = function() {
        return counter++;
      };
      var useUniqueId = function() {
        return useConstant(incrementId);
      };
      function shallowCompare(next, prev) {
        if (!Array.isArray(prev))
          return false;
        var prevLength = prev.length;
        if (prevLength !== next.length)
          return false;
        for (var i = 0; i < prevLength; i++) {
          if (prev[i] !== next[i])
            return false;
        }
        return true;
      }
      var isNumericalString = function(v) {
        return /^\-?\d*\.?\d+$/.test(v);
      };
      var isZeroValueString = function(v) {
        return /^0[^.\s]+$/.test(v);
      };
      var testValueType = function(v) {
        return function(type) {
          return type.test(v);
        };
      };
      var auto = {
        test: function(v) {
          return v === "auto";
        },
        parse: function(v) {
          return v;
        }
      };
      var dimensionValueTypes = [styleValueTypes.number, styleValueTypes.px, styleValueTypes.percent, styleValueTypes.degrees, styleValueTypes.vw, styleValueTypes.vh, auto];
      var findDimensionValueType = function(v) {
        return dimensionValueTypes.find(testValueType(v));
      };
      var valueTypes = tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(dimensionValueTypes), false), [styleValueTypes.color, styleValueTypes.complex], false);
      var findValueType = function(v) {
        return valueTypes.find(testValueType(v));
      };
      function setMotionValue(visualElement2, key, value) {
        if (visualElement2.hasValue(key)) {
          visualElement2.getValue(key).set(value);
        } else {
          visualElement2.addValue(key, motionValue(value));
        }
      }
      function setTarget(visualElement2, definition) {
        var resolved = resolveVariant(visualElement2, definition);
        var _a = resolved ? visualElement2.makeTargetAnimatable(resolved, false) : {}, _b = _a.transitionEnd, transitionEnd = _b === void 0 ? {} : _b;
        _a.transition;
        var target = tslib.__rest(_a, ["transitionEnd", "transition"]);
        target = tslib.__assign(tslib.__assign({}, target), transitionEnd);
        for (var key in target) {
          var value = resolveFinalValueInKeyframes(target[key]);
          setMotionValue(visualElement2, key, value);
        }
      }
      function setVariants(visualElement2, variantLabels) {
        var reversedLabels = tslib.__spreadArray([], tslib.__read(variantLabels), false).reverse();
        reversedLabels.forEach(function(key) {
          var _a;
          var variant = visualElement2.getVariant(key);
          variant && setTarget(visualElement2, variant);
          (_a = visualElement2.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function(child) {
            setVariants(child, variantLabels);
          });
        });
      }
      function setValues(visualElement2, definition) {
        if (Array.isArray(definition)) {
          return setVariants(visualElement2, definition);
        } else if (typeof definition === "string") {
          return setVariants(visualElement2, [definition]);
        } else {
          setTarget(visualElement2, definition);
        }
      }
      function checkTargetForNewValues(visualElement2, target, origin) {
        var _a, _b, _c;
        var _d;
        var newValueKeys = Object.keys(target).filter(function(key2) {
          return !visualElement2.hasValue(key2);
        });
        var numNewValues = newValueKeys.length;
        if (!numNewValues)
          return;
        for (var i = 0; i < numNewValues; i++) {
          var key = newValueKeys[i];
          var targetValue = target[key];
          var value = null;
          if (Array.isArray(targetValue)) {
            value = targetValue[0];
          }
          if (value === null) {
            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement2.readValue(key)) !== null && _b !== void 0 ? _b : target[key];
          }
          if (value === void 0 || value === null)
            continue;
          if (typeof value === "string" && (isNumericalString(value) || isZeroValueString(value))) {
            value = parseFloat(value);
          } else if (!findValueType(value) && styleValueTypes.complex.test(targetValue)) {
            value = getAnimatableNone(key, targetValue);
          }
          visualElement2.addValue(key, motionValue(value));
          (_c = (_d = origin)[key]) !== null && _c !== void 0 ? _c : _d[key] = value;
          visualElement2.setBaseTarget(key, value);
        }
      }
      function getOriginFromTransition(key, transition) {
        if (!transition)
          return;
        var valueTransition = transition[key] || transition["default"] || transition;
        return valueTransition.from;
      }
      function getOrigin(target, transition, visualElement2) {
        var _a, _b;
        var origin = {};
        for (var key in target) {
          origin[key] = (_a = getOriginFromTransition(key, transition)) !== null && _a !== void 0 ? _a : (_b = visualElement2.getValue(key)) === null || _b === void 0 ? void 0 : _b.get();
        }
        return origin;
      }
      function animateVisualElement(visualElement2, definition, options) {
        if (options === void 0) {
          options = {};
        }
        visualElement2.notifyAnimationStart(definition);
        var animation;
        if (Array.isArray(definition)) {
          var animations2 = definition.map(function(variant) {
            return animateVariant(visualElement2, variant, options);
          });
          animation = Promise.all(animations2);
        } else if (typeof definition === "string") {
          animation = animateVariant(visualElement2, definition, options);
        } else {
          var resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement2, definition, options.custom) : definition;
          animation = animateTarget(visualElement2, resolvedDefinition, options);
        }
        return animation.then(function() {
          return visualElement2.notifyAnimationComplete(definition);
        });
      }
      function animateVariant(visualElement2, variant, options) {
        var _a;
        if (options === void 0) {
          options = {};
        }
        var resolved = resolveVariant(visualElement2, variant, options.custom);
        var _b = (resolved || {}).transition, transition = _b === void 0 ? visualElement2.getDefaultTransition() || {} : _b;
        if (options.transitionOverride) {
          transition = options.transitionOverride;
        }
        var getAnimation2 = resolved ? function() {
          return animateTarget(visualElement2, resolved, options);
        } : function() {
          return Promise.resolve();
        };
        var getChildAnimations = ((_a = visualElement2.variantChildren) === null || _a === void 0 ? void 0 : _a.size) ? function(forwardDelay) {
          if (forwardDelay === void 0) {
            forwardDelay = 0;
          }
          var _a2 = transition.delayChildren, delayChildren = _a2 === void 0 ? 0 : _a2, staggerChildren = transition.staggerChildren, staggerDirection = transition.staggerDirection;
          return animateChildren(visualElement2, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
        } : function() {
          return Promise.resolve();
        };
        var when = transition.when;
        if (when) {
          var _c = tslib.__read(when === "beforeChildren" ? [getAnimation2, getChildAnimations] : [getChildAnimations, getAnimation2], 2), first = _c[0], last = _c[1];
          return first().then(last);
        } else {
          return Promise.all([getAnimation2(), getChildAnimations(options.delay)]);
        }
      }
      function animateTarget(visualElement2, definition, _a) {
        var _b;
        var _c = _a === void 0 ? {} : _a, _d = _c.delay, delay = _d === void 0 ? 0 : _d, transitionOverride = _c.transitionOverride, type = _c.type;
        var _e = visualElement2.makeTargetAnimatable(definition), _f = _e.transition, transition = _f === void 0 ? visualElement2.getDefaultTransition() : _f, transitionEnd = _e.transitionEnd, target = tslib.__rest(_e, ["transition", "transitionEnd"]);
        if (transitionOverride)
          transition = transitionOverride;
        var animations2 = [];
        var animationTypeState = type && ((_b = visualElement2.animationState) === null || _b === void 0 ? void 0 : _b.getState()[type]);
        for (var key in target) {
          var value = visualElement2.getValue(key);
          var valueTarget = target[key];
          if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
            continue;
          }
          var animation = startAnimation(key, value, valueTarget, tslib.__assign({ delay }, transition));
          animations2.push(animation);
        }
        return Promise.all(animations2).then(function() {
          transitionEnd && setTarget(visualElement2, transitionEnd);
        });
      }
      function animateChildren(visualElement2, variant, delayChildren, staggerChildren, staggerDirection, options) {
        if (delayChildren === void 0) {
          delayChildren = 0;
        }
        if (staggerChildren === void 0) {
          staggerChildren = 0;
        }
        if (staggerDirection === void 0) {
          staggerDirection = 1;
        }
        var animations2 = [];
        var maxStaggerDuration = (visualElement2.variantChildren.size - 1) * staggerChildren;
        var generateStaggerDuration = staggerDirection === 1 ? function(i) {
          if (i === void 0) {
            i = 0;
          }
          return i * staggerChildren;
        } : function(i) {
          if (i === void 0) {
            i = 0;
          }
          return maxStaggerDuration - i * staggerChildren;
        };
        Array.from(visualElement2.variantChildren).sort(sortByTreeOrder).forEach(function(child, i) {
          animations2.push(animateVariant(child, variant, tslib.__assign(tslib.__assign({}, options), { delay: delayChildren + generateStaggerDuration(i) })).then(function() {
            return child.notifyAnimationComplete(variant);
          }));
        });
        return Promise.all(animations2);
      }
      function stopAnimation(visualElement2) {
        visualElement2.forEachValue(function(value) {
          return value.stop();
        });
      }
      function sortByTreeOrder(a, b) {
        return a.sortNodePosition(b);
      }
      function shouldBlockAnimation(_a, key) {
        var protectedKeys = _a.protectedKeys, needsAnimating = _a.needsAnimating;
        var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
        needsAnimating[key] = false;
        return shouldBlock;
      }
      var variantPriorityOrder = [
        AnimationType.Animate,
        AnimationType.InView,
        AnimationType.Focus,
        AnimationType.Hover,
        AnimationType.Tap,
        AnimationType.Drag,
        AnimationType.Exit
      ];
      var reversePriorityOrder = tslib.__spreadArray([], tslib.__read(variantPriorityOrder), false).reverse();
      var numAnimationTypes = variantPriorityOrder.length;
      function animateList(visualElement2) {
        return function(animations2) {
          return Promise.all(animations2.map(function(_a) {
            var animation = _a.animation, options = _a.options;
            return animateVisualElement(visualElement2, animation, options);
          }));
        };
      }
      function createAnimationState(visualElement2) {
        var animate2 = animateList(visualElement2);
        var state = createState();
        var allAnimatedKeys = {};
        var isInitialRender = true;
        var buildResolvedTypeValues = function(acc, definition) {
          var resolved = resolveVariant(visualElement2, definition);
          if (resolved) {
            resolved.transition;
            var transitionEnd = resolved.transitionEnd, target = tslib.__rest(resolved, ["transition", "transitionEnd"]);
            acc = tslib.__assign(tslib.__assign(tslib.__assign({}, acc), target), transitionEnd);
          }
          return acc;
        };
        function isAnimated(key) {
          return allAnimatedKeys[key] !== void 0;
        }
        function setAnimateFunction(makeAnimator) {
          animate2 = makeAnimator(visualElement2);
        }
        function animateChanges(options, changedActiveType) {
          var _a;
          var props = visualElement2.getProps();
          var context = visualElement2.getVariantContext(true) || {};
          var animations2 = [];
          var removedKeys = /* @__PURE__ */ new Set();
          var encounteredKeys = {};
          var removedVariantIndex = Infinity;
          var _loop_1 = function(i2) {
            var type = reversePriorityOrder[i2];
            var typeState = state[type];
            var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];
            var propIsVariant = isVariantLabel(prop);
            var activeDelta = type === changedActiveType ? typeState.isActive : null;
            if (activeDelta === false)
              removedVariantIndex = i2;
            var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
            if (isInherited && isInitialRender && visualElement2.manuallyAnimateOnMount) {
              isInherited = false;
            }
            typeState.protectedKeys = tslib.__assign({}, encounteredKeys);
            if (!typeState.isActive && activeDelta === null || !prop && !typeState.prevProp || isAnimationControls(prop) || typeof prop === "boolean") {
              return "continue";
            }
            var variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
            var shouldAnimateType = variantDidChange || type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || i2 > removedVariantIndex && propIsVariant;
            var definitionList = Array.isArray(prop) ? prop : [prop];
            var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
            if (activeDelta === false)
              resolvedValues = {};
            var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;
            var allKeys = tslib.__assign(tslib.__assign({}, prevResolvedValues), resolvedValues);
            var markToAnimate = function(key2) {
              shouldAnimateType = true;
              removedKeys.delete(key2);
              typeState.needsAnimating[key2] = true;
            };
            for (var key in allKeys) {
              var next = resolvedValues[key];
              var prev = prevResolvedValues[key];
              if (encounteredKeys.hasOwnProperty(key))
                continue;
              if (next !== prev) {
                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
                  if (!shallowCompare(next, prev) || variantDidChange) {
                    markToAnimate(key);
                  } else {
                    typeState.protectedKeys[key] = true;
                  }
                } else if (next !== void 0) {
                  markToAnimate(key);
                } else {
                  removedKeys.add(key);
                }
              } else if (next !== void 0 && removedKeys.has(key)) {
                markToAnimate(key);
              } else {
                typeState.protectedKeys[key] = true;
              }
            }
            typeState.prevProp = prop;
            typeState.prevResolvedValues = resolvedValues;
            if (typeState.isActive) {
              encounteredKeys = tslib.__assign(tslib.__assign({}, encounteredKeys), resolvedValues);
            }
            if (isInitialRender && visualElement2.blockInitialAnimation) {
              shouldAnimateType = false;
            }
            if (shouldAnimateType && !isInherited) {
              animations2.push.apply(animations2, tslib.__spreadArray([], tslib.__read(definitionList.map(function(animation) {
                return {
                  animation,
                  options: tslib.__assign({ type }, options)
                };
              })), false));
            }
          };
          for (var i = 0; i < numAnimationTypes; i++) {
            _loop_1(i);
          }
          allAnimatedKeys = tslib.__assign({}, encounteredKeys);
          if (removedKeys.size) {
            var fallbackAnimation_1 = {};
            removedKeys.forEach(function(key) {
              var fallbackTarget = visualElement2.getBaseTarget(key);
              if (fallbackTarget !== void 0) {
                fallbackAnimation_1[key] = fallbackTarget;
              }
            });
            animations2.push({ animation: fallbackAnimation_1 });
          }
          var shouldAnimate = Boolean(animations2.length);
          if (isInitialRender && props.initial === false && !visualElement2.manuallyAnimateOnMount) {
            shouldAnimate = false;
          }
          isInitialRender = false;
          return shouldAnimate ? animate2(animations2) : Promise.resolve();
        }
        function setActive(type, isActive, options) {
          var _a;
          if (state[type].isActive === isActive)
            return Promise.resolve();
          (_a = visualElement2.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function(child) {
            var _a2;
            return (_a2 = child.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(type, isActive);
          });
          state[type].isActive = isActive;
          return animateChanges(options, type);
        }
        return {
          isAnimated,
          animateChanges,
          setActive,
          setAnimateFunction,
          getState: function() {
            return state;
          }
        };
      }
      function checkVariantsDidChange(prev, next) {
        if (typeof next === "string") {
          return next !== prev;
        } else if (isVariantLabels(next)) {
          return !shallowCompare(next, prev);
        }
        return false;
      }
      function createTypeState(isActive) {
        if (isActive === void 0) {
          isActive = false;
        }
        return {
          isActive,
          protectedKeys: {},
          needsAnimating: {},
          prevResolvedValues: {}
        };
      }
      function createState() {
        var _a;
        return _a = {}, _a[AnimationType.Animate] = createTypeState(true), _a[AnimationType.InView] = createTypeState(), _a[AnimationType.Hover] = createTypeState(), _a[AnimationType.Tap] = createTypeState(), _a[AnimationType.Drag] = createTypeState(), _a[AnimationType.Focus] = createTypeState(), _a[AnimationType.Exit] = createTypeState(), _a;
      }
      var animations = {
        animation: makeRenderlessComponent(function(_a) {
          var visualElement2 = _a.visualElement, animate2 = _a.animate;
          visualElement2.animationState || (visualElement2.animationState = createAnimationState(visualElement2));
          if (isAnimationControls(animate2)) {
            React.useEffect(function() {
              return animate2.subscribe(visualElement2);
            }, [animate2]);
          }
        }),
        exit: makeRenderlessComponent(function(props) {
          var custom = props.custom, visualElement2 = props.visualElement;
          var _a = tslib.__read(usePresence(), 2), isPresent2 = _a[0], safeToRemove = _a[1];
          var presenceContext = React.useContext(PresenceContext);
          React.useEffect(function() {
            var _a2, _b;
            visualElement2.isPresent = isPresent2;
            var animation = (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Exit, !isPresent2, { custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom });
            !isPresent2 && (animation === null || animation === void 0 ? void 0 : animation.then(safeToRemove));
          }, [isPresent2]);
        })
      };
      var PanSession = function() {
        function PanSession2(event, handlers, _a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a, transformPagePoint = _b.transformPagePoint;
          this.startEvent = null;
          this.lastMoveEvent = null;
          this.lastMoveEventInfo = null;
          this.handlers = {};
          this.updatePoint = function() {
            if (!(_this.lastMoveEvent && _this.lastMoveEventInfo))
              return;
            var info2 = getPanInfo(_this.lastMoveEventInfo, _this.history);
            var isPanStarted = _this.startEvent !== null;
            var isDistancePastThreshold = popmotion.distance(info2.offset, { x: 0, y: 0 }) >= 3;
            if (!isPanStarted && !isDistancePastThreshold)
              return;
            var point2 = info2.point;
            var timestamp2 = sync.getFrameData().timestamp;
            _this.history.push(tslib.__assign(tslib.__assign({}, point2), { timestamp: timestamp2 }));
            var _a2 = _this.handlers, onStart = _a2.onStart, onMove = _a2.onMove;
            if (!isPanStarted) {
              onStart && onStart(_this.lastMoveEvent, info2);
              _this.startEvent = _this.lastMoveEvent;
            }
            onMove && onMove(_this.lastMoveEvent, info2);
          };
          this.handlePointerMove = function(event2, info2) {
            _this.lastMoveEvent = event2;
            _this.lastMoveEventInfo = transformPoint(info2, _this.transformPagePoint);
            if (isMouseEvent(event2) && event2.buttons === 0) {
              _this.handlePointerUp(event2, info2);
              return;
            }
            sync__default["default"].update(_this.updatePoint, true);
          };
          this.handlePointerUp = function(event2, info2) {
            _this.end();
            var _a2 = _this.handlers, onEnd = _a2.onEnd, onSessionEnd = _a2.onSessionEnd;
            var panInfo = getPanInfo(transformPoint(info2, _this.transformPagePoint), _this.history);
            if (_this.startEvent && onEnd) {
              onEnd(event2, panInfo);
            }
            onSessionEnd && onSessionEnd(event2, panInfo);
          };
          if (isTouchEvent(event) && event.touches.length > 1)
            return;
          this.handlers = handlers;
          this.transformPagePoint = transformPagePoint;
          var info = extractEventInfo(event);
          var initialInfo = transformPoint(info, this.transformPagePoint);
          var point = initialInfo.point;
          var timestamp = sync.getFrameData().timestamp;
          this.history = [tslib.__assign(tslib.__assign({}, point), { timestamp })];
          var onSessionStart = handlers.onSessionStart;
          onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
          this.removeListeners = popmotion.pipe(addPointerEvent(window, "pointermove", this.handlePointerMove), addPointerEvent(window, "pointerup", this.handlePointerUp), addPointerEvent(window, "pointercancel", this.handlePointerUp));
        }
        PanSession2.prototype.updateHandlers = function(handlers) {
          this.handlers = handlers;
        };
        PanSession2.prototype.end = function() {
          this.removeListeners && this.removeListeners();
          sync.cancelSync.update(this.updatePoint);
        };
        return PanSession2;
      }();
      function transformPoint(info, transformPagePoint) {
        return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
      }
      function subtractPoint(a, b) {
        return { x: a.x - b.x, y: a.y - b.y };
      }
      function getPanInfo(_a, history) {
        var point = _a.point;
        return {
          point,
          delta: subtractPoint(point, lastDevicePoint(history)),
          offset: subtractPoint(point, startDevicePoint(history)),
          velocity: getVelocity(history, 0.1)
        };
      }
      function startDevicePoint(history) {
        return history[0];
      }
      function lastDevicePoint(history) {
        return history[history.length - 1];
      }
      function getVelocity(history, timeDelta) {
        if (history.length < 2) {
          return { x: 0, y: 0 };
        }
        var i = history.length - 1;
        var timestampedPoint = null;
        var lastPoint = lastDevicePoint(history);
        while (i >= 0) {
          timestampedPoint = history[i];
          if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
            break;
          }
          i--;
        }
        if (!timestampedPoint) {
          return { x: 0, y: 0 };
        }
        var time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
        if (time === 0) {
          return { x: 0, y: 0 };
        }
        var currentVelocity = {
          x: (lastPoint.x - timestampedPoint.x) / time,
          y: (lastPoint.y - timestampedPoint.y) / time
        };
        if (currentVelocity.x === Infinity) {
          currentVelocity.x = 0;
        }
        if (currentVelocity.y === Infinity) {
          currentVelocity.y = 0;
        }
        return currentVelocity;
      }
      function applyConstraints(point, _a, elastic) {
        var min = _a.min, max = _a.max;
        if (min !== void 0 && point < min) {
          point = elastic ? popmotion.mix(min, point, elastic.min) : Math.max(point, min);
        } else if (max !== void 0 && point > max) {
          point = elastic ? popmotion.mix(max, point, elastic.max) : Math.min(point, max);
        }
        return point;
      }
      function calcRelativeAxisConstraints(axis, min, max) {
        return {
          min: min !== void 0 ? axis.min + min : void 0,
          max: max !== void 0 ? axis.max + max - (axis.max - axis.min) : void 0
        };
      }
      function calcRelativeConstraints(layoutBox, _a) {
        var top = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;
        return {
          x: calcRelativeAxisConstraints(layoutBox.x, left, right),
          y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)
        };
      }
      function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
        var _a;
        var min = constraintsAxis.min - layoutAxis.min;
        var max = constraintsAxis.max - layoutAxis.max;
        if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
          _a = tslib.__read([max, min], 2), min = _a[0], max = _a[1];
        }
        return { min, max };
      }
      function calcViewportConstraints(layoutBox, constraintsBox) {
        return {
          x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
          y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
        };
      }
      function calcOrigin(source, target) {
        var origin = 0.5;
        var sourceLength = calcLength(source);
        var targetLength = calcLength(target);
        if (targetLength > sourceLength) {
          origin = popmotion.progress(target.min, target.max - sourceLength, source.min);
        } else if (sourceLength > targetLength) {
          origin = popmotion.progress(source.min, source.max - targetLength, target.min);
        }
        return popmotion.clamp(0, 1, origin);
      }
      function rebaseAxisConstraints(layout, constraints) {
        var relativeConstraints = {};
        if (constraints.min !== void 0) {
          relativeConstraints.min = constraints.min - layout.min;
        }
        if (constraints.max !== void 0) {
          relativeConstraints.max = constraints.max - layout.min;
        }
        return relativeConstraints;
      }
      var defaultElastic = 0.35;
      function resolveDragElastic(dragElastic) {
        if (dragElastic === void 0) {
          dragElastic = defaultElastic;
        }
        if (dragElastic === false) {
          dragElastic = 0;
        } else if (dragElastic === true) {
          dragElastic = defaultElastic;
        }
        return {
          x: resolveAxisElastic(dragElastic, "left", "right"),
          y: resolveAxisElastic(dragElastic, "top", "bottom")
        };
      }
      function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
        return {
          min: resolvePointElastic(dragElastic, minLabel),
          max: resolvePointElastic(dragElastic, maxLabel)
        };
      }
      function resolvePointElastic(dragElastic, label) {
        var _a;
        return typeof dragElastic === "number" ? dragElastic : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;
      }
      function convertBoundingBoxToBox(_a) {
        var top = _a.top, left = _a.left, right = _a.right, bottom = _a.bottom;
        return {
          x: { min: left, max: right },
          y: { min: top, max: bottom }
        };
      }
      function convertBoxToBoundingBox(_a) {
        var x = _a.x, y = _a.y;
        return { top: y.min, right: x.max, bottom: y.max, left: x.min };
      }
      function transformBoxPoints(point, transformPoint2) {
        if (!transformPoint2)
          return point;
        var topLeft = transformPoint2({ x: point.left, y: point.top });
        var bottomRight = transformPoint2({ x: point.right, y: point.bottom });
        return {
          top: topLeft.y,
          left: topLeft.x,
          bottom: bottomRight.y,
          right: bottomRight.x
        };
      }
      function measureViewportBox(instance, transformPoint2) {
        return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint2));
      }
      function measurePageBox(element, rootProjectionNode2, transformPagePoint) {
        var viewportBox = measureViewportBox(element, transformPagePoint);
        var scroll = rootProjectionNode2.scroll;
        if (scroll) {
          translateAxis(viewportBox.x, scroll.x);
          translateAxis(viewportBox.y, scroll.y);
        }
        return viewportBox;
      }
      var elementDragControls = new WeakMap();
      var VisualElementDragControls = function() {
        function VisualElementDragControls2(visualElement2) {
          this.openGlobalLock = null;
          this.isDragging = false;
          this.currentDirection = null;
          this.originPoint = { x: 0, y: 0 };
          this.constraints = false;
          this.hasMutatedConstraints = false;
          this.elastic = createBox();
          this.visualElement = visualElement2;
        }
        VisualElementDragControls2.prototype.start = function(originEvent, _a) {
          var _this = this;
          var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c;
          if (this.visualElement.isPresent === false)
            return;
          var onSessionStart = function(event) {
            _this.stopAnimation();
            if (snapToCursor) {
              _this.snapToCursor(extractEventInfo(event, "page").point);
            }
          };
          var onStart = function(event, info) {
            var _a2;
            var _b2 = _this.getProps(), drag2 = _b2.drag, dragPropagation = _b2.dragPropagation, onDragStart = _b2.onDragStart;
            if (drag2 && !dragPropagation) {
              if (_this.openGlobalLock)
                _this.openGlobalLock();
              _this.openGlobalLock = getGlobalLock(drag2);
              if (!_this.openGlobalLock)
                return;
            }
            _this.isDragging = true;
            _this.currentDirection = null;
            _this.resolveConstraints();
            if (_this.visualElement.projection) {
              _this.visualElement.projection.isAnimationBlocked = true;
              _this.visualElement.projection.target = void 0;
            }
            eachAxis(function(axis) {
              var _a3, _b3;
              var current = _this.getAxisMotionValue(axis).get() || 0;
              if (styleValueTypes.percent.test(current)) {
                var measuredAxis = (_b3 = (_a3 = _this.visualElement.projection) === null || _a3 === void 0 ? void 0 : _a3.layout) === null || _b3 === void 0 ? void 0 : _b3.actual[axis];
                if (measuredAxis) {
                  var length_1 = calcLength(measuredAxis);
                  current = length_1 * (parseFloat(current) / 100);
                }
              }
              _this.originPoint[axis] = current;
            });
            onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);
            (_a2 = _this.visualElement.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Drag, true);
          };
          var onMove = function(event, info) {
            var _a2 = _this.getProps(), dragPropagation = _a2.dragPropagation, dragDirectionLock = _a2.dragDirectionLock, onDirectionLock = _a2.onDirectionLock, onDrag = _a2.onDrag;
            if (!dragPropagation && !_this.openGlobalLock)
              return;
            var offset = info.offset;
            if (dragDirectionLock && _this.currentDirection === null) {
              _this.currentDirection = getCurrentDirection(offset);
              if (_this.currentDirection !== null) {
                onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);
              }
              return;
            }
            _this.updateAxis("x", info.point, offset);
            _this.updateAxis("y", info.point, offset);
            _this.visualElement.syncRender();
            onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);
          };
          var onSessionEnd = function(event, info) {
            return _this.stop(event, info);
          };
          this.panSession = new PanSession(originEvent, {
            onSessionStart,
            onStart,
            onMove,
            onSessionEnd
          }, { transformPagePoint: this.visualElement.getTransformPagePoint() });
        };
        VisualElementDragControls2.prototype.stop = function(event, info) {
          var isDragging = this.isDragging;
          this.cancel();
          if (!isDragging)
            return;
          var velocity = info.velocity;
          this.startAnimation(velocity);
          var onDragEnd = this.getProps().onDragEnd;
          onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);
        };
        VisualElementDragControls2.prototype.cancel = function() {
          var _a, _b;
          this.isDragging = false;
          if (this.visualElement.projection) {
            this.visualElement.projection.isAnimationBlocked = false;
          }
          (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();
          this.panSession = void 0;
          var dragPropagation = this.getProps().dragPropagation;
          if (!dragPropagation && this.openGlobalLock) {
            this.openGlobalLock();
            this.openGlobalLock = null;
          }
          (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);
        };
        VisualElementDragControls2.prototype.updateAxis = function(axis, _point, offset) {
          var drag2 = this.getProps().drag;
          if (!offset || !shouldDrag(axis, drag2, this.currentDirection))
            return;
          var axisValue = this.getAxisMotionValue(axis);
          var next = this.originPoint[axis] + offset[axis];
          if (this.constraints && this.constraints[axis]) {
            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);
          }
          axisValue.set(next);
        };
        VisualElementDragControls2.prototype.resolveConstraints = function() {
          var _this = this;
          var _a = this.getProps(), dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;
          var layout = (this.visualElement.projection || {}).layout;
          var prevConstraints = this.constraints;
          if (dragConstraints && isRefObject(dragConstraints)) {
            if (!this.constraints) {
              this.constraints = this.resolveRefConstraints();
            }
          } else {
            if (dragConstraints && layout) {
              this.constraints = calcRelativeConstraints(layout.actual, dragConstraints);
            } else {
              this.constraints = false;
            }
          }
          this.elastic = resolveDragElastic(dragElastic);
          if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {
            eachAxis(function(axis) {
              if (_this.getAxisMotionValue(axis)) {
                _this.constraints[axis] = rebaseAxisConstraints(layout.actual[axis], _this.constraints[axis]);
              }
            });
          }
        };
        VisualElementDragControls2.prototype.resolveRefConstraints = function() {
          var _a = this.getProps(), constraints = _a.dragConstraints, onMeasureDragConstraints = _a.onMeasureDragConstraints;
          if (!constraints || !isRefObject(constraints))
            return false;
          var constraintsElement = constraints.current;
          heyListen.invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
          var projection = this.visualElement.projection;
          if (!projection || !projection.layout)
            return false;
          var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
          var measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);
          if (onMeasureDragConstraints) {
            var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
            this.hasMutatedConstraints = !!userConstraints;
            if (userConstraints) {
              measuredConstraints = convertBoundingBoxToBox(userConstraints);
            }
          }
          return measuredConstraints;
        };
        VisualElementDragControls2.prototype.startAnimation = function(velocity) {
          var _this = this;
          var _a = this.getProps(), drag2 = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition, dragSnapToOrigin = _a.dragSnapToOrigin, onDragTransitionEnd = _a.onDragTransitionEnd;
          var constraints = this.constraints || {};
          var momentumAnimations = eachAxis(function(axis) {
            var _a2;
            if (!shouldDrag(axis, drag2, _this.currentDirection)) {
              return;
            }
            var transition = (_a2 = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a2 !== void 0 ? _a2 : {};
            if (dragSnapToOrigin)
              transition = { min: 0, max: 0 };
            var bounceStiffness = dragElastic ? 200 : 1e6;
            var bounceDamping = dragElastic ? 40 : 1e7;
            var inertia = tslib.__assign(tslib.__assign({ type: "inertia", velocity: dragMomentum ? velocity[axis] : 0, bounceStiffness, bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition);
            return _this.startAxisValueAnimation(axis, inertia);
          });
          return Promise.all(momentumAnimations).then(onDragTransitionEnd);
        };
        VisualElementDragControls2.prototype.startAxisValueAnimation = function(axis, transition) {
          var axisValue = this.getAxisMotionValue(axis);
          return startAnimation(axis, axisValue, 0, transition);
        };
        VisualElementDragControls2.prototype.stopAnimation = function() {
          var _this = this;
          eachAxis(function(axis) {
            return _this.getAxisMotionValue(axis).stop();
          });
        };
        VisualElementDragControls2.prototype.getAxisMotionValue = function(axis) {
          var _a, _b;
          var dragKey = "_drag" + axis.toUpperCase();
          var externalMotionValue = this.visualElement.getProps()[dragKey];
          return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);
        };
        VisualElementDragControls2.prototype.snapToCursor = function(point) {
          var _this = this;
          eachAxis(function(axis) {
            var drag2 = _this.getProps().drag;
            if (!shouldDrag(axis, drag2, _this.currentDirection))
              return;
            var projection = _this.visualElement.projection;
            var axisValue = _this.getAxisMotionValue(axis);
            if (projection && projection.layout) {
              var _a = projection.layout.actual[axis], min = _a.min, max = _a.max;
              axisValue.set(point[axis] - popmotion.mix(min, max, 0.5));
            }
          });
        };
        VisualElementDragControls2.prototype.scalePositionWithinConstraints = function() {
          var _this = this;
          var _a;
          var _b = this.getProps(), drag2 = _b.drag, dragConstraints = _b.dragConstraints;
          var projection = this.visualElement.projection;
          if (!isRefObject(dragConstraints) || !projection || !this.constraints)
            return;
          this.stopAnimation();
          var boxProgress = { x: 0, y: 0 };
          eachAxis(function(axis) {
            var axisValue = _this.getAxisMotionValue(axis);
            if (axisValue) {
              var latest = axisValue.get();
              boxProgress[axis] = calcOrigin({ min: latest, max: latest }, _this.constraints[axis]);
            }
          });
          var transformTemplate = this.visualElement.getProps().transformTemplate;
          this.visualElement.getInstance().style.transform = transformTemplate ? transformTemplate({}, "") : "none";
          (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();
          projection.updateLayout();
          this.resolveConstraints();
          eachAxis(function(axis) {
            if (!shouldDrag(axis, drag2, null))
              return;
            var axisValue = _this.getAxisMotionValue(axis);
            var _a2 = _this.constraints[axis], min = _a2.min, max = _a2.max;
            axisValue.set(popmotion.mix(min, max, boxProgress[axis]));
          });
        };
        VisualElementDragControls2.prototype.addListeners = function() {
          var _this = this;
          var _a;
          elementDragControls.set(this.visualElement, this);
          var element = this.visualElement.getInstance();
          var stopPointerListener = addPointerEvent(element, "pointerdown", function(event) {
            var _a2 = _this.getProps(), drag2 = _a2.drag, _b = _a2.dragListener, dragListener = _b === void 0 ? true : _b;
            drag2 && dragListener && _this.start(event);
          });
          var measureDragConstraints = function() {
            var dragConstraints = _this.getProps().dragConstraints;
            if (isRefObject(dragConstraints)) {
              _this.constraints = _this.resolveRefConstraints();
            }
          };
          var projection = this.visualElement.projection;
          var stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
          if (projection && !projection.layout) {
            (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();
            projection.updateLayout();
          }
          measureDragConstraints();
          var stopResizeListener = addDomEvent(window, "resize", function() {
            _this.scalePositionWithinConstraints();
          });
          projection.addEventListener("didUpdate", function(_a2) {
            var delta = _a2.delta, hasLayoutChanged = _a2.hasLayoutChanged;
            if (_this.isDragging && hasLayoutChanged) {
              eachAxis(function(axis) {
                var motionValue2 = _this.getAxisMotionValue(axis);
                if (!motionValue2)
                  return;
                _this.originPoint[axis] += delta[axis].translate;
                motionValue2.set(motionValue2.get() + delta[axis].translate);
              });
              _this.visualElement.syncRender();
            }
          });
          return function() {
            stopResizeListener();
            stopPointerListener();
            stopMeasureLayoutListener();
          };
        };
        VisualElementDragControls2.prototype.getProps = function() {
          var props = this.visualElement.getProps();
          var _a = props.drag, drag2 = _a === void 0 ? false : _a, _b = props.dragDirectionLock, dragDirectionLock = _b === void 0 ? false : _b, _c = props.dragPropagation, dragPropagation = _c === void 0 ? false : _c, _d = props.dragConstraints, dragConstraints = _d === void 0 ? false : _d, _e = props.dragElastic, dragElastic = _e === void 0 ? defaultElastic : _e, _f = props.dragMomentum, dragMomentum = _f === void 0 ? true : _f;
          return tslib.__assign(tslib.__assign({}, props), { drag: drag2, dragDirectionLock, dragPropagation, dragConstraints, dragElastic, dragMomentum });
        };
        return VisualElementDragControls2;
      }();
      function shouldDrag(direction, drag2, currentDirection) {
        return (drag2 === true || drag2 === direction) && (currentDirection === null || currentDirection === direction);
      }
      function getCurrentDirection(offset, lockThreshold) {
        if (lockThreshold === void 0) {
          lockThreshold = 10;
        }
        var direction = null;
        if (Math.abs(offset.y) > lockThreshold) {
          direction = "y";
        } else if (Math.abs(offset.x) > lockThreshold) {
          direction = "x";
        }
        return direction;
      }
      function useDrag(props) {
        var groupDragControls = props.dragControls, visualElement2 = props.visualElement;
        var dragControls = useConstant(function() {
          return new VisualElementDragControls(visualElement2);
        });
        React.useEffect(function() {
          return groupDragControls && groupDragControls.subscribe(dragControls);
        }, [dragControls, groupDragControls]);
        React.useEffect(function() {
          return dragControls.addListeners();
        }, [dragControls]);
      }
      function usePanGesture(_a) {
        var onPan = _a.onPan, onPanStart = _a.onPanStart, onPanEnd = _a.onPanEnd, onPanSessionStart = _a.onPanSessionStart, visualElement2 = _a.visualElement;
        var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;
        var panSession = React.useRef(null);
        var transformPagePoint = React.useContext(MotionConfigContext).transformPagePoint;
        var handlers = {
          onSessionStart: onPanSessionStart,
          onStart: onPanStart,
          onMove: onPan,
          onEnd: function(event, info) {
            panSession.current = null;
            onPanEnd && onPanEnd(event, info);
          }
        };
        React.useEffect(function() {
          if (panSession.current !== null) {
            panSession.current.updateHandlers(handlers);
          }
        });
        function onPointerDown(event) {
          panSession.current = new PanSession(event, handlers, {
            transformPagePoint
          });
        }
        usePointerEvent(visualElement2, "pointerdown", hasPanEvents && onPointerDown);
        useUnmountEffect(function() {
          return panSession.current && panSession.current.end();
        });
      }
      var drag = {
        pan: makeRenderlessComponent(usePanGesture),
        drag: makeRenderlessComponent(useDrag)
      };
      var names = [
        "LayoutMeasure",
        "BeforeLayoutMeasure",
        "LayoutUpdate",
        "ViewportBoxUpdate",
        "Update",
        "Render",
        "AnimationComplete",
        "LayoutAnimationComplete",
        "AnimationStart",
        "SetAxisTarget",
        "Unmount"
      ];
      function createLifecycles() {
        var managers = names.map(function() {
          return new SubscriptionManager();
        });
        var propSubscriptions = {};
        var lifecycles = {
          clearAllListeners: function() {
            return managers.forEach(function(manager) {
              return manager.clear();
            });
          },
          updatePropListeners: function(props) {
            names.forEach(function(name) {
              var _a;
              var on = "on" + name;
              var propListener = props[on];
              (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions);
              if (propListener) {
                propSubscriptions[name] = lifecycles[on](propListener);
              }
            });
          }
        };
        managers.forEach(function(manager, i) {
          lifecycles["on" + names[i]] = function(handler) {
            return manager.add(handler);
          };
          lifecycles["notify" + names[i]] = function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            manager.notify.apply(manager, tslib.__spreadArray([], tslib.__read(args), false));
          };
        });
        return lifecycles;
      }
      function updateMotionValuesFromProps(element, next, prev) {
        var _a;
        for (var key in next) {
          var nextValue = next[key];
          var prevValue = prev[key];
          if (isMotionValue(nextValue)) {
            element.addValue(key, nextValue);
          } else if (isMotionValue(prevValue)) {
            element.addValue(key, motionValue(nextValue));
          } else if (prevValue !== nextValue) {
            if (element.hasValue(key)) {
              var existingValue = element.getValue(key);
              !existingValue.hasAnimated && existingValue.set(nextValue);
            } else {
              element.addValue(key, motionValue((_a = element.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));
            }
          }
        }
        for (var key in prev) {
          if (next[key] === void 0)
            element.removeValue(key);
        }
        return next;
      }
      var visualElement = function(_a) {
        var _b = _a.treeType, treeType = _b === void 0 ? "" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox2 = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps2 = _a.scrapeMotionValuesFromProps;
        return function(_a2, options) {
          var parent = _a2.parent, props = _a2.props, presenceId2 = _a2.presenceId, blockInitialAnimation = _a2.blockInitialAnimation, visualState = _a2.visualState;
          if (options === void 0) {
            options = {};
          }
          var isMounted = false;
          var latestValues = visualState.latestValues, renderState = visualState.renderState;
          var instance;
          var lifecycles = createLifecycles();
          var values = /* @__PURE__ */ new Map();
          var valueSubscriptions = /* @__PURE__ */ new Map();
          var prevMotionValues = {};
          var baseTarget = tslib.__assign({}, latestValues);
          var removeFromVariantTree;
          function render() {
            if (!instance || !isMounted)
              return;
            triggerBuild();
            renderInstance(instance, renderState, props.style, element.projection);
          }
          function triggerBuild() {
            build(element, renderState, latestValues, options, props);
          }
          function update() {
            lifecycles.notifyUpdate(latestValues);
          }
          function bindToMotionValue(key2, value2) {
            var removeOnChange = value2.onChange(function(latestValue) {
              latestValues[key2] = latestValue;
              props.onUpdate && sync__default["default"].update(update, false, true);
            });
            var removeOnRenderRequest = value2.onRenderRequest(element.scheduleRender);
            valueSubscriptions.set(key2, function() {
              removeOnChange();
              removeOnRenderRequest();
            });
          }
          var initialMotionValues = scrapeMotionValuesFromProps2(props);
          for (var key in initialMotionValues) {
            var value = initialMotionValues[key];
            if (latestValues[key] !== void 0 && isMotionValue(value)) {
              value.set(latestValues[key], false);
            }
          }
          var isControllingVariants = checkIfControllingVariants(props);
          var isVariantNode = checkIfVariantNode(props);
          var element = tslib.__assign(tslib.__assign({
            treeType,
            current: null,
            depth: parent ? parent.depth + 1 : 0,
            parent,
            children: /* @__PURE__ */ new Set(),
            presenceId: presenceId2,
            variantChildren: isVariantNode ? /* @__PURE__ */ new Set() : void 0,
            isVisible: void 0,
            manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),
            blockInitialAnimation,
            isMounted: function() {
              return Boolean(instance);
            },
            mount: function(newInstance) {
              isMounted = true;
              instance = element.current = newInstance;
              if (element.projection) {
                element.projection.mount(newInstance);
              }
              if (isVariantNode && parent && !isControllingVariants) {
                removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);
              }
              parent === null || parent === void 0 ? void 0 : parent.children.add(element);
              element.setProps(props);
            },
            unmount: function() {
              var _a3;
              (_a3 = element.projection) === null || _a3 === void 0 ? void 0 : _a3.unmount();
              sync.cancelSync.update(update);
              sync.cancelSync.render(render);
              valueSubscriptions.forEach(function(remove) {
                return remove();
              });
              removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();
              parent === null || parent === void 0 ? void 0 : parent.children.delete(element);
              lifecycles.clearAllListeners();
              instance = void 0;
              isMounted = false;
            },
            addVariantChild: function(child) {
              var _a3;
              var closestVariantNode = element.getClosestVariantNode();
              if (closestVariantNode) {
                (_a3 = closestVariantNode.variantChildren) === null || _a3 === void 0 ? void 0 : _a3.add(child);
                return function() {
                  return closestVariantNode.variantChildren.delete(child);
                };
              }
            },
            sortNodePosition: function(other) {
              if (!sortNodePosition || treeType !== other.treeType)
                return 0;
              return sortNodePosition(element.getInstance(), other.getInstance());
            },
            getClosestVariantNode: function() {
              return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();
            },
            getLayoutId: function() {
              return props.layoutId;
            },
            getInstance: function() {
              return instance;
            },
            getStaticValue: function(key2) {
              return latestValues[key2];
            },
            setStaticValue: function(key2, value2) {
              return latestValues[key2] = value2;
            },
            getLatestValues: function() {
              return latestValues;
            },
            setVisibility: function(visibility) {
              if (element.isVisible === visibility)
                return;
              element.isVisible = visibility;
              element.scheduleRender();
            },
            makeTargetAnimatable: function(target, canMutate) {
              if (canMutate === void 0) {
                canMutate = true;
              }
              return makeTargetAnimatable(element, target, props, canMutate);
            },
            measureViewportBox: function() {
              return measureViewportBox2(instance, props);
            },
            addValue: function(key2, value2) {
              if (element.hasValue(key2))
                element.removeValue(key2);
              values.set(key2, value2);
              latestValues[key2] = value2.get();
              bindToMotionValue(key2, value2);
            },
            removeValue: function(key2) {
              var _a3;
              values.delete(key2);
              (_a3 = valueSubscriptions.get(key2)) === null || _a3 === void 0 ? void 0 : _a3();
              valueSubscriptions.delete(key2);
              delete latestValues[key2];
              removeValueFromRenderState(key2, renderState);
            },
            hasValue: function(key2) {
              return values.has(key2);
            },
            getValue: function(key2, defaultValue) {
              var value2 = values.get(key2);
              if (value2 === void 0 && defaultValue !== void 0) {
                value2 = motionValue(defaultValue);
                element.addValue(key2, value2);
              }
              return value2;
            },
            forEachValue: function(callback) {
              return values.forEach(callback);
            },
            readValue: function(key2) {
              var _a3;
              return (_a3 = latestValues[key2]) !== null && _a3 !== void 0 ? _a3 : readValueFromInstance(instance, key2, options);
            },
            setBaseTarget: function(key2, value2) {
              baseTarget[key2] = value2;
            },
            getBaseTarget: function(key2) {
              if (getBaseTarget) {
                var target = getBaseTarget(props, key2);
                if (target !== void 0 && !isMotionValue(target))
                  return target;
              }
              return baseTarget[key2];
            }
          }, lifecycles), {
            build: function() {
              triggerBuild();
              return renderState;
            },
            scheduleRender: function() {
              sync__default["default"].render(render, false, true);
            },
            syncRender: render,
            setProps: function(newProps) {
              props = newProps;
              lifecycles.updatePropListeners(newProps);
              prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps2(props), prevMotionValues);
            },
            getProps: function() {
              return props;
            },
            getVariant: function(name) {
              var _a3;
              return (_a3 = props.variants) === null || _a3 === void 0 ? void 0 : _a3[name];
            },
            getDefaultTransition: function() {
              return props.transition;
            },
            getTransformPagePoint: function() {
              return props.transformPagePoint;
            },
            getVariantContext: function(startAtParent) {
              if (startAtParent === void 0) {
                startAtParent = false;
              }
              if (startAtParent)
                return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();
              if (!isControllingVariants) {
                var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};
                if (props.initial !== void 0) {
                  context_1.initial = props.initial;
                }
                return context_1;
              }
              var context = {};
              for (var i = 0; i < numVariantProps; i++) {
                var name_1 = variantProps[i];
                var prop = props[name_1];
                if (isVariantLabel(prop) || prop === false) {
                  context[name_1] = prop;
                }
              }
              return context;
            }
          });
          return element;
        };
      };
      var variantProps = tslib.__spreadArray(["initial"], tslib.__read(variantPriorityOrder), false);
      var numVariantProps = variantProps.length;
      function isCSSVariable(value) {
        return typeof value === "string" && value.startsWith("var(--");
      }
      var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
      function parseCSSVariable(current) {
        var match = cssVariableRegex.exec(current);
        if (!match)
          return [,];
        var _a = tslib.__read(match, 3), token = _a[1], fallback = _a[2];
        return [token, fallback];
      }
      var maxDepth = 4;
      function getVariableValue(current, element, depth) {
        if (depth === void 0) {
          depth = 1;
        }
        heyListen.invariant(depth <= maxDepth, 'Max CSS variable fallback depth detected in property "'.concat(current, '". This may indicate a circular fallback dependency.'));
        var _a = tslib.__read(parseCSSVariable(current), 2), token = _a[0], fallback = _a[1];
        if (!token)
          return;
        var resolved = window.getComputedStyle(element).getPropertyValue(token);
        if (resolved) {
          return resolved.trim();
        } else if (isCSSVariable(fallback)) {
          return getVariableValue(fallback, element, depth + 1);
        } else {
          return fallback;
        }
      }
      function resolveCSSVariables(visualElement2, _a, transitionEnd) {
        var _b;
        var target = tslib.__rest(_a, []);
        var element = visualElement2.getInstance();
        if (!(element instanceof Element))
          return { target, transitionEnd };
        if (transitionEnd) {
          transitionEnd = tslib.__assign({}, transitionEnd);
        }
        visualElement2.forEachValue(function(value) {
          var current2 = value.get();
          if (!isCSSVariable(current2))
            return;
          var resolved2 = getVariableValue(current2, element);
          if (resolved2)
            value.set(resolved2);
        });
        for (var key in target) {
          var current = target[key];
          if (!isCSSVariable(current))
            continue;
          var resolved = getVariableValue(current, element);
          if (!resolved)
            continue;
          target[key] = resolved;
          if (transitionEnd)
            (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : transitionEnd[key] = current;
        }
        return { target, transitionEnd };
      }
      var positionalKeys = /* @__PURE__ */ new Set([
        "width",
        "height",
        "top",
        "left",
        "right",
        "bottom",
        "x",
        "y"
      ]);
      var isPositionalKey = function(key) {
        return positionalKeys.has(key);
      };
      var hasPositionalKey = function(target) {
        return Object.keys(target).some(isPositionalKey);
      };
      var setAndResetVelocity = function(value, to) {
        value.set(to, false);
        value.set(to);
      };
      var isNumOrPxType = function(v) {
        return v === styleValueTypes.number || v === styleValueTypes.px;
      };
      var BoundingBoxDimension;
      (function(BoundingBoxDimension2) {
        BoundingBoxDimension2["width"] = "width";
        BoundingBoxDimension2["height"] = "height";
        BoundingBoxDimension2["left"] = "left";
        BoundingBoxDimension2["right"] = "right";
        BoundingBoxDimension2["top"] = "top";
        BoundingBoxDimension2["bottom"] = "bottom";
      })(BoundingBoxDimension || (BoundingBoxDimension = {}));
      var getPosFromMatrix = function(matrix, pos) {
        return parseFloat(matrix.split(", ")[pos]);
      };
      var getTranslateFromMatrix = function(pos2, pos3) {
        return function(_bbox, _a) {
          var transform2 = _a.transform;
          if (transform2 === "none" || !transform2)
            return 0;
          var matrix3d = transform2.match(/^matrix3d\((.+)\)$/);
          if (matrix3d) {
            return getPosFromMatrix(matrix3d[1], pos3);
          } else {
            var matrix = transform2.match(/^matrix\((.+)\)$/);
            if (matrix) {
              return getPosFromMatrix(matrix[1], pos2);
            } else {
              return 0;
            }
          }
        };
      };
      var transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
      var nonTranslationalTransformKeys = transformProps.filter(function(key) {
        return !transformKeys.has(key);
      });
      function removeNonTranslationalTransform(visualElement2) {
        var removedTransforms = [];
        nonTranslationalTransformKeys.forEach(function(key) {
          var value = visualElement2.getValue(key);
          if (value !== void 0) {
            removedTransforms.push([key, value.get()]);
            value.set(key.startsWith("scale") ? 1 : 0);
          }
        });
        if (removedTransforms.length)
          visualElement2.syncRender();
        return removedTransforms;
      }
      var positionalValues = {
        width: function(_a, _b) {
          var x = _a.x;
          var _c = _b.paddingLeft, paddingLeft = _c === void 0 ? "0" : _c, _d = _b.paddingRight, paddingRight = _d === void 0 ? "0" : _d;
          return x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight);
        },
        height: function(_a, _b) {
          var y = _a.y;
          var _c = _b.paddingTop, paddingTop = _c === void 0 ? "0" : _c, _d = _b.paddingBottom, paddingBottom = _d === void 0 ? "0" : _d;
          return y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom);
        },
        top: function(_bbox, _a) {
          var top = _a.top;
          return parseFloat(top);
        },
        left: function(_bbox, _a) {
          var left = _a.left;
          return parseFloat(left);
        },
        bottom: function(_a, _b) {
          var y = _a.y;
          var top = _b.top;
          return parseFloat(top) + (y.max - y.min);
        },
        right: function(_a, _b) {
          var x = _a.x;
          var left = _b.left;
          return parseFloat(left) + (x.max - x.min);
        },
        x: getTranslateFromMatrix(4, 13),
        y: getTranslateFromMatrix(5, 14)
      };
      var convertChangedValueTypes = function(target, visualElement2, changedKeys) {
        var originBbox = visualElement2.measureViewportBox();
        var element = visualElement2.getInstance();
        var elementComputedStyle = getComputedStyle(element);
        var display = elementComputedStyle.display;
        var origin = {};
        if (display === "none") {
          visualElement2.setStaticValue("display", target.display || "block");
        }
        changedKeys.forEach(function(key) {
          origin[key] = positionalValues[key](originBbox, elementComputedStyle);
        });
        visualElement2.syncRender();
        var targetBbox = visualElement2.measureViewportBox();
        changedKeys.forEach(function(key) {
          var value = visualElement2.getValue(key);
          setAndResetVelocity(value, origin[key]);
          target[key] = positionalValues[key](targetBbox, elementComputedStyle);
        });
        return target;
      };
      var checkAndConvertChangedValueTypes = function(visualElement2, target, origin, transitionEnd) {
        if (origin === void 0) {
          origin = {};
        }
        if (transitionEnd === void 0) {
          transitionEnd = {};
        }
        target = tslib.__assign({}, target);
        transitionEnd = tslib.__assign({}, transitionEnd);
        var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
        var removedTransformValues = [];
        var hasAttemptedToRemoveTransformValues = false;
        var changedValueTypeKeys = [];
        targetPositionalKeys.forEach(function(key) {
          var value = visualElement2.getValue(key);
          if (!visualElement2.hasValue(key))
            return;
          var from = origin[key];
          var fromType = findDimensionValueType(from);
          var to = target[key];
          var toType;
          if (isKeyframesTarget(to)) {
            var numKeyframes = to.length;
            var fromIndex = to[0] === null ? 1 : 0;
            from = to[fromIndex];
            fromType = findDimensionValueType(from);
            for (var i = fromIndex; i < numKeyframes; i++) {
              if (!toType) {
                toType = findDimensionValueType(to[i]);
                heyListen.invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
              } else {
                heyListen.invariant(findDimensionValueType(to[i]) === toType, "All keyframes must be of the same type");
              }
            }
          } else {
            toType = findDimensionValueType(to);
          }
          if (fromType !== toType) {
            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
              var current = value.get();
              if (typeof current === "string") {
                value.set(parseFloat(current));
              }
              if (typeof to === "string") {
                target[key] = parseFloat(to);
              } else if (Array.isArray(to) && toType === styleValueTypes.px) {
                target[key] = to.map(parseFloat);
              }
            } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {
              if (from === 0) {
                value.set(toType.transform(from));
              } else {
                target[key] = fromType.transform(to);
              }
            } else {
              if (!hasAttemptedToRemoveTransformValues) {
                removedTransformValues = removeNonTranslationalTransform(visualElement2);
                hasAttemptedToRemoveTransformValues = true;
              }
              changedValueTypeKeys.push(key);
              transitionEnd[key] = transitionEnd[key] !== void 0 ? transitionEnd[key] : target[key];
              setAndResetVelocity(value, to);
            }
          }
        });
        if (changedValueTypeKeys.length) {
          var convertedTarget = convertChangedValueTypes(target, visualElement2, changedValueTypeKeys);
          if (removedTransformValues.length) {
            removedTransformValues.forEach(function(_a) {
              var _b = tslib.__read(_a, 2), key = _b[0], value = _b[1];
              visualElement2.getValue(key).set(value);
            });
          }
          visualElement2.syncRender();
          return { target: convertedTarget, transitionEnd };
        } else {
          return { target, transitionEnd };
        }
      };
      function unitConversion(visualElement2, target, origin, transitionEnd) {
        return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement2, target, origin, transitionEnd) : { target, transitionEnd };
      }
      var parseDomVariant = function(visualElement2, target, origin, transitionEnd) {
        var resolved = resolveCSSVariables(visualElement2, target, transitionEnd);
        target = resolved.target;
        transitionEnd = resolved.transitionEnd;
        return unitConversion(visualElement2, target, origin, transitionEnd);
      };
      function getComputedStyle$1(element) {
        return window.getComputedStyle(element);
      }
      var htmlConfig = {
        treeType: "dom",
        readValueFromInstance: function(domElement, key) {
          if (isTransformProp(key)) {
            var defaultType = getDefaultValueType(key);
            return defaultType ? defaultType.default || 0 : 0;
          } else {
            var computedStyle = getComputedStyle$1(domElement);
            return (isCSSVariable$1(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
          }
        },
        sortNodePosition: function(a, b) {
          return a.compareDocumentPosition(b) & 2 ? 1 : -1;
        },
        getBaseTarget: function(props, key) {
          var _a;
          return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];
        },
        measureViewportBox: function(element, _a) {
          var transformPagePoint = _a.transformPagePoint;
          return measureViewportBox(element, transformPagePoint);
        },
        resetTransform: function(element, domElement, props) {
          var transformTemplate = props.transformTemplate;
          domElement.style.transform = transformTemplate ? transformTemplate({}, "") : "none";
          element.scheduleRender();
        },
        restoreTransform: function(instance, mutableState) {
          instance.style.transform = mutableState.style.transform;
        },
        removeValueFromRenderState: function(key, _a) {
          var vars = _a.vars, style = _a.style;
          delete vars[key];
          delete style[key];
        },
        makeTargetAnimatable: function(element, _a, _b, isMounted) {
          var transformValues = _b.transformValues;
          if (isMounted === void 0) {
            isMounted = true;
          }
          var transition = _a.transition, transitionEnd = _a.transitionEnd, target = tslib.__rest(_a, ["transition", "transitionEnd"]);
          var origin = getOrigin(target, transition || {}, element);
          if (transformValues) {
            if (transitionEnd)
              transitionEnd = transformValues(transitionEnd);
            if (target)
              target = transformValues(target);
            if (origin)
              origin = transformValues(origin);
          }
          if (isMounted) {
            checkTargetForNewValues(element, target, origin);
            var parsed = parseDomVariant(element, target, origin, transitionEnd);
            transitionEnd = parsed.transitionEnd;
            target = parsed.target;
          }
          return tslib.__assign({ transition, transitionEnd }, target);
        },
        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps$1,
        build: function(element, renderState, latestValues, options, props) {
          if (element.isVisible !== void 0) {
            renderState.style.visibility = element.isVisible ? "visible" : "hidden";
          }
          buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);
        },
        render: renderHTML
      };
      var htmlVisualElement = visualElement(htmlConfig);
      var svgVisualElement = visualElement(tslib.__assign(tslib.__assign({}, htmlConfig), { getBaseTarget: function(props, key) {
        return props[key];
      }, readValueFromInstance: function(domElement, key) {
        var _a;
        if (isTransformProp(key)) {
          return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;
        }
        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
        return domElement.getAttribute(key);
      }, scrapeMotionValuesFromProps, build: function(_element, renderState, latestValues, options, props) {
        buildSVGAttrs(renderState, latestValues, options, props.transformTemplate);
      }, render: renderSVG }));
      var createDomVisualElement = function(Component, options) {
        return isSVGComponent(Component) ? svgVisualElement(options, { enableHardwareAcceleration: false }) : htmlVisualElement(options, { enableHardwareAcceleration: true });
      };
      function pixelsToPercent(pixels, axis) {
        if (axis.max === axis.min)
          return 0;
        return pixels / (axis.max - axis.min) * 100;
      }
      var correctBorderRadius = {
        correct: function(latest, node) {
          if (!node.target)
            return latest;
          if (typeof latest === "string") {
            if (styleValueTypes.px.test(latest)) {
              latest = parseFloat(latest);
            } else {
              return latest;
            }
          }
          var x = pixelsToPercent(latest, node.target.x);
          var y = pixelsToPercent(latest, node.target.y);
          return "".concat(x, "% ").concat(y, "%");
        }
      };
      var varToken = "_$css";
      var correctBoxShadow = {
        correct: function(latest, _a) {
          var treeScale = _a.treeScale, projectionDelta = _a.projectionDelta;
          var original = latest;
          var containsCSSVariables = latest.includes("var(");
          var cssVariables = [];
          if (containsCSSVariables) {
            latest = latest.replace(cssVariableRegex, function(match) {
              cssVariables.push(match);
              return varToken;
            });
          }
          var shadow = styleValueTypes.complex.parse(latest);
          if (shadow.length > 5)
            return original;
          var template = styleValueTypes.complex.createTransformer(latest);
          var offset = typeof shadow[0] !== "number" ? 1 : 0;
          var xScale = projectionDelta.x.scale * treeScale.x;
          var yScale = projectionDelta.y.scale * treeScale.y;
          shadow[0 + offset] /= xScale;
          shadow[1 + offset] /= yScale;
          var averageScale = popmotion.mix(xScale, yScale, 0.5);
          if (typeof shadow[2 + offset] === "number")
            shadow[2 + offset] /= averageScale;
          if (typeof shadow[3 + offset] === "number")
            shadow[3 + offset] /= averageScale;
          var output = template(shadow);
          if (containsCSSVariables) {
            var i_1 = 0;
            output = output.replace(varToken, function() {
              var cssVariable = cssVariables[i_1];
              i_1++;
              return cssVariable;
            });
          }
          return output;
        }
      };
      var MeasureLayoutWithContext = function(_super) {
        tslib.__extends(MeasureLayoutWithContext2, _super);
        function MeasureLayoutWithContext2() {
          return _super !== null && _super.apply(this, arguments) || this;
        }
        MeasureLayoutWithContext2.prototype.componentDidMount = function() {
          var _this = this;
          var _a = this.props, visualElement2 = _a.visualElement, layoutGroup = _a.layoutGroup, switchLayoutGroup = _a.switchLayoutGroup, layoutId = _a.layoutId;
          var projection = visualElement2.projection;
          addScaleCorrector(defaultScaleCorrectors);
          if (projection) {
            if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)
              layoutGroup.group.add(projection);
            if ((switchLayoutGroup === null || switchLayoutGroup === void 0 ? void 0 : switchLayoutGroup.register) && layoutId) {
              switchLayoutGroup.register(projection);
            }
            projection.root.didUpdate();
            projection.addEventListener("animationComplete", function() {
              _this.safeToRemove();
            });
            projection.setOptions(tslib.__assign(tslib.__assign({}, projection.options), { onExitComplete: function() {
              return _this.safeToRemove();
            } }));
          }
          globalProjectionState.hasEverUpdated = true;
        };
        MeasureLayoutWithContext2.prototype.getSnapshotBeforeUpdate = function(prevProps) {
          var _this = this;
          var _a = this.props, layoutDependency = _a.layoutDependency, visualElement2 = _a.visualElement, drag2 = _a.drag, isPresent2 = _a.isPresent;
          var projection = visualElement2.projection;
          if (!projection)
            return null;
          projection.isPresent = isPresent2;
          if (drag2 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0) {
            projection.willUpdate();
          } else {
            this.safeToRemove();
          }
          if (prevProps.isPresent !== isPresent2) {
            if (isPresent2) {
              projection.promote();
            } else if (!projection.relegate()) {
              sync__default["default"].postRender(function() {
                var _a2;
                if (!((_a2 = projection.getStack()) === null || _a2 === void 0 ? void 0 : _a2.members.length)) {
                  _this.safeToRemove();
                }
              });
            }
          }
          return null;
        };
        MeasureLayoutWithContext2.prototype.componentDidUpdate = function() {
          var projection = this.props.visualElement.projection;
          if (projection) {
            projection.root.didUpdate();
            if (!projection.currentAnimation && projection.isLead()) {
              this.safeToRemove();
            }
          }
        };
        MeasureLayoutWithContext2.prototype.componentWillUnmount = function() {
          var _a = this.props, visualElement2 = _a.visualElement, layoutGroup = _a.layoutGroup, promoteContext = _a.switchLayoutGroup;
          var projection = visualElement2.projection;
          if (projection) {
            projection.scheduleCheckAfterUnmount();
            if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)
              layoutGroup.group.remove(projection);
            if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister)
              promoteContext.deregister(projection);
          }
        };
        MeasureLayoutWithContext2.prototype.safeToRemove = function() {
          var safeToRemove = this.props.safeToRemove;
          safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();
        };
        MeasureLayoutWithContext2.prototype.render = function() {
          return null;
        };
        return MeasureLayoutWithContext2;
      }(React__default["default"].Component);
      function MeasureLayout(props) {
        var _a = tslib.__read(usePresence(), 2), isPresent2 = _a[0], safeToRemove = _a[1];
        var layoutGroup = React.useContext(LayoutGroupContext);
        return React__default["default"].createElement(MeasureLayoutWithContext, tslib.__assign({}, props, { layoutGroup, switchLayoutGroup: React.useContext(SwitchLayoutGroupContext), isPresent: isPresent2, safeToRemove }));
      }
      var defaultScaleCorrectors = {
        borderRadius: tslib.__assign(tslib.__assign({}, correctBorderRadius), { applyTo: [
          "borderTopLeftRadius",
          "borderTopRightRadius",
          "borderBottomLeftRadius",
          "borderBottomRightRadius"
        ] }),
        borderTopLeftRadius: correctBorderRadius,
        borderTopRightRadius: correctBorderRadius,
        borderBottomLeftRadius: correctBorderRadius,
        borderBottomRightRadius: correctBorderRadius,
        boxShadow: correctBoxShadow
      };
      var layoutFeatures = {
        measureLayout: MeasureLayout
      };
      var DocumentProjectionNode = createProjectionNode({
        attachResizeListener: function(ref, notify2) {
          ref.addEventListener("resize", notify2, { passive: true });
          return function() {
            return ref.removeEventListener("resize", notify2);
          };
        },
        measureScroll: function() {
          return {
            x: document.documentElement.scrollLeft || document.body.scrollLeft,
            y: document.documentElement.scrollTop || document.body.scrollTop
          };
        }
      });
      var rootProjectionNode = {
        current: void 0
      };
      var HTMLProjectionNode = createProjectionNode({
        measureScroll: function(instance) {
          return {
            x: instance.scrollLeft,
            y: instance.scrollTop
          };
        },
        defaultParent: function() {
          if (!rootProjectionNode.current) {
            var documentNode = new DocumentProjectionNode(0, {});
            documentNode.mount(window);
            documentNode.setOptions({ layoutScroll: true });
            rootProjectionNode.current = documentNode;
          }
          return rootProjectionNode.current;
        },
        resetTransform: function(instance, value) {
          instance.style.transform = value !== null && value !== void 0 ? value : "none";
        }
      });
      var featureBundle = tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({}, animations), gestureAnimations), drag), layoutFeatures);
      var motion = /* @__PURE__ */ createMotionProxy(function(Component, config) {
        return createDomMotionConfig(Component, config, featureBundle, createDomVisualElement, HTMLProjectionNode);
      });
      function createDomMotionComponent(key) {
        return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, featureBundle, createDomVisualElement, HTMLProjectionNode));
      }
      var m = createMotionProxy(createDomMotionConfig);
      function useForceUpdate() {
        var isUnmountingRef = React.useRef(false);
        var _a = tslib.__read(React.useState(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];
        useUnmountEffect(function() {
          return isUnmountingRef.current = true;
        });
        var forceRender = React.useCallback(function() {
          !isUnmountingRef.current && setForcedRenderCount(forcedRenderCount + 1);
        }, [forcedRenderCount]);
        var deferredForceRender = React.useCallback(function() {
          return sync__default["default"].postRender(forceRender);
        }, [forceRender]);
        return [deferredForceRender, forcedRenderCount];
      }
      var presenceId = 0;
      function getPresenceId() {
        var id2 = presenceId;
        presenceId++;
        return id2;
      }
      var PresenceChild = function(_a) {
        var children = _a.children, initial = _a.initial, isPresent2 = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;
        var presenceChildren = useConstant(newChildrenMap);
        var id2 = useConstant(getPresenceId);
        var context = React.useMemo(function() {
          return {
            id: id2,
            initial,
            isPresent: isPresent2,
            custom,
            onExitComplete: function(childId) {
              var e_1, _a2;
              presenceChildren.set(childId, true);
              try {
                for (var _b = tslib.__values(presenceChildren.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                  var isComplete = _c.value;
                  if (!isComplete)
                    return;
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (_c && !_c.done && (_a2 = _b.return))
                    _a2.call(_b);
                } finally {
                  if (e_1)
                    throw e_1.error;
                }
              }
              onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete();
            },
            register: function(childId) {
              presenceChildren.set(childId, false);
              return function() {
                return presenceChildren.delete(childId);
              };
            }
          };
        }, presenceAffectsLayout ? void 0 : [isPresent2]);
        React.useMemo(function() {
          presenceChildren.forEach(function(_, key) {
            return presenceChildren.set(key, false);
          });
        }, [isPresent2]);
        React__namespace.useEffect(function() {
          !isPresent2 && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());
        }, [isPresent2]);
        return React__namespace.createElement(PresenceContext.Provider, { value: context }, children);
      };
      function newChildrenMap() {
        return /* @__PURE__ */ new Map();
      }
      function getChildKey(child) {
        return child.key || "";
      }
      function updateChildLookup(children, allChildren) {
        var seenChildren = true ? /* @__PURE__ */ new Set() : null;
        children.forEach(function(child) {
          var key = getChildKey(child);
          if (seenChildren) {
            if (seenChildren.has(key)) {
              console.warn('Children of AnimatePresence require unique keys. "'.concat(key, '" is a duplicate.'));
            }
            seenChildren.add(key);
          }
          allChildren.set(key, child);
        });
      }
      function onlyElements(children) {
        var filtered = [];
        React.Children.forEach(children, function(child) {
          if (React.isValidElement(child))
            filtered.push(child);
        });
        return filtered;
      }
      var AnimatePresence = function(_a) {
        var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;
        var _d = tslib.__read(useForceUpdate(), 1), forceRender = _d[0];
        var forceRenderLayoutGroup = React.useContext(LayoutGroupContext).forceRender;
        if (forceRenderLayoutGroup)
          forceRender = forceRenderLayoutGroup;
        var isInitialRender = React.useRef(true);
        var isMounted = React.useRef(true);
        React.useEffect(function() {
          return function() {
            isMounted.current = false;
          };
        }, []);
        var filteredChildren = onlyElements(children);
        var presentChildren = React.useRef(filteredChildren);
        var allChildren = React.useRef(/* @__PURE__ */ new Map()).current;
        var exiting = React.useRef(/* @__PURE__ */ new Set()).current;
        updateChildLookup(filteredChildren, allChildren);
        if (isInitialRender.current) {
          isInitialRender.current = false;
          return React__namespace.createElement(React__namespace.Fragment, null, filteredChildren.map(function(child) {
            return React__namespace.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? void 0 : false, presenceAffectsLayout }, child);
          }));
        }
        var childrenToRender = tslib.__spreadArray([], tslib.__read(filteredChildren), false);
        var presentKeys = presentChildren.current.map(getChildKey);
        var targetKeys = filteredChildren.map(getChildKey);
        var numPresent = presentKeys.length;
        for (var i = 0; i < numPresent; i++) {
          var key = presentKeys[i];
          if (targetKeys.indexOf(key) === -1) {
            exiting.add(key);
          } else {
            exiting.delete(key);
          }
        }
        if (exitBeforeEnter && exiting.size) {
          childrenToRender = [];
        }
        exiting.forEach(function(key2) {
          if (targetKeys.indexOf(key2) !== -1)
            return;
          var child = allChildren.get(key2);
          if (!child)
            return;
          var insertionIndex = presentKeys.indexOf(key2);
          var onExit = function() {
            allChildren.delete(key2);
            exiting.delete(key2);
            var removeIndex = presentChildren.current.findIndex(function(presentChild) {
              return presentChild.key === key2;
            });
            presentChildren.current.splice(removeIndex, 1);
            if (!exiting.size) {
              presentChildren.current = filteredChildren;
              if (isMounted.current === false) {
                return;
              }
              forceRender();
              onExitComplete && onExitComplete();
            }
          };
          childrenToRender.splice(insertionIndex, 0, React__namespace.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom, presenceAffectsLayout }, child));
        });
        childrenToRender = childrenToRender.map(function(child) {
          var key2 = child.key;
          return exiting.has(key2) ? child : React__namespace.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout }, child);
        });
        presentChildren.current = childrenToRender;
        if (exitBeforeEnter && childrenToRender.length > 1) {
          console.warn("You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.");
        }
        return React__namespace.createElement(React__namespace.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(function(child) {
          return React.cloneElement(child);
        }));
      };
      var DeprecatedLayoutGroupContext = React.createContext(null);
      var notify = function(node) {
        return !node.isLayoutDirty && node.willUpdate(false);
      };
      function nodeGroup() {
        var nodes = /* @__PURE__ */ new Set();
        var subscriptions = new WeakMap();
        var dirtyAll = function() {
          return nodes.forEach(notify);
        };
        return {
          add: function(node) {
            nodes.add(node);
            subscriptions.set(node, node.addEventListener("willUpdate", dirtyAll));
          },
          remove: function(node) {
            var _a;
            nodes.delete(node);
            (_a = subscriptions.get(node)) === null || _a === void 0 ? void 0 : _a();
            subscriptions.delete(node);
            dirtyAll();
          },
          dirty: dirtyAll
        };
      }
      var LayoutGroup = function(_a) {
        var _b, _c;
        var children = _a.children, id2 = _a.id, _d = _a.inheritId, inheritId = _d === void 0 ? true : _d;
        var layoutGroupContext = React.useContext(LayoutGroupContext);
        var deprecatedLayoutGroupContext = React.useContext(DeprecatedLayoutGroupContext);
        var _e = tslib.__read(useForceUpdate(), 2), forceRender = _e[0], key = _e[1];
        var context = React.useRef(null);
        var upstreamId = (_b = layoutGroupContext.id) !== null && _b !== void 0 ? _b : deprecatedLayoutGroupContext;
        if (context.current === null) {
          if (inheritId && upstreamId) {
            id2 = id2 ? upstreamId + "-" + id2 : upstreamId;
          }
          context.current = {
            id: id2,
            group: inheritId ? (_c = layoutGroupContext === null || layoutGroupContext === void 0 ? void 0 : layoutGroupContext.group) !== null && _c !== void 0 ? _c : nodeGroup() : nodeGroup()
          };
        }
        var memoizedContext = React.useMemo(function() {
          return tslib.__assign(tslib.__assign({}, context.current), { forceRender });
        }, [key]);
        return React__namespace.createElement(LayoutGroupContext.Provider, { value: memoizedContext }, children);
      };
      var id = 0;
      var AnimateSharedLayout = function(_a) {
        var children = _a.children;
        return React__namespace.createElement(LayoutGroup, { id: useConstant(function() {
          return "asl-".concat(id++);
        }) }, children);
      };
      function MotionConfig(_a) {
        var children = _a.children, config = tslib.__rest(_a, ["children"]);
        config = tslib.__assign(tslib.__assign({}, React.useContext(MotionConfigContext)), config);
        config.isStatic = useConstant(function() {
          return config.isStatic;
        });
        var transitionDependency = typeof config.transition === "object" ? config.transition.toString() : "";
        var context = React.useMemo(function() {
          return config;
        }, [
          transitionDependency,
          config.transformPagePoint
        ]);
        return React__namespace.createElement(MotionConfigContext.Provider, { value: context }, children);
      }
      function LazyMotion(_a) {
        var children = _a.children, features = _a.features, _b = _a.strict, strict = _b === void 0 ? false : _b;
        var _c = tslib.__read(React.useState(!isLazyBundle(features)), 2), setIsLoaded = _c[1];
        var loadedRenderer = React.useRef(void 0);
        if (!isLazyBundle(features)) {
          var renderer = features.renderer, loadedFeatures = tslib.__rest(features, ["renderer"]);
          loadedRenderer.current = renderer;
          loadFeatures(loadedFeatures);
        }
        React.useEffect(function() {
          if (isLazyBundle(features)) {
            features().then(function(_a2) {
              var renderer2 = _a2.renderer, loadedFeatures2 = tslib.__rest(_a2, ["renderer"]);
              loadFeatures(loadedFeatures2);
              loadedRenderer.current = renderer2;
              setIsLoaded(true);
            });
          }
        }, []);
        return React__namespace.createElement(LazyContext.Provider, { value: { renderer: loadedRenderer.current, strict } }, children);
      }
      function isLazyBundle(features) {
        return typeof features === "function";
      }
      var ReorderContext = React.createContext(null);
      function checkReorder(order2, value, offset, velocity) {
        if (!velocity)
          return order2;
        var index = order2.findIndex(function(item2) {
          return item2.value === value;
        });
        if (index === -1)
          return order2;
        var nextOffset = velocity > 0 ? 1 : -1;
        var nextItem = order2[index + nextOffset];
        if (!nextItem)
          return order2;
        var item = order2[index];
        var nextLayout = nextItem.layout;
        var nextItemCenter = popmotion.mix(nextLayout.min, nextLayout.max, 0.5);
        if (nextOffset === 1 && item.layout.max + offset > nextItemCenter || nextOffset === -1 && item.layout.min + offset < nextItemCenter) {
          return moveItem(order2, index, index + nextOffset);
        }
        return order2;
      }
      function ReorderGroup(_a, externalRef) {
        var children = _a.children, _b = _a.as, as = _b === void 0 ? "ul" : _b, _c = _a.axis, axis = _c === void 0 ? "y" : _c, onReorder = _a.onReorder, values = _a.values, props = tslib.__rest(_a, ["children", "as", "axis", "onReorder", "values"]);
        var Component = useConstant(function() {
          return motion(as);
        });
        var order2 = [];
        var isReordering = React.useRef(false);
        heyListen.invariant(Boolean(values), "Reorder.Group must be provided a values prop");
        var context = {
          axis,
          registerItem: function(value, layout) {
            if (layout && order2.findIndex(function(entry) {
              return value === entry.value;
            }) === -1) {
              order2.push({ value, layout: layout[axis] });
              order2.sort(compareMin);
            }
          },
          updateOrder: function(id2, offset, velocity) {
            if (isReordering.current)
              return;
            var newOrder = checkReorder(order2, id2, offset, velocity);
            if (order2 !== newOrder) {
              isReordering.current = true;
              onReorder(newOrder.map(getValue).filter(function(value) {
                return values.indexOf(value) !== -1;
              }));
            }
          }
        };
        React.useEffect(function() {
          isReordering.current = false;
        });
        return React__namespace.createElement(Component, tslib.__assign({}, props, { ref: externalRef }), React__namespace.createElement(ReorderContext.Provider, { value: context }, children));
      }
      var Group = React.forwardRef(ReorderGroup);
      function getValue(item) {
        return item.value;
      }
      function compareMin(a, b) {
        return a.layout.min - b.layout.min;
      }
      function useMotionValue(initial) {
        var value = useConstant(function() {
          return motionValue(initial);
        });
        var isStatic = React.useContext(MotionConfigContext).isStatic;
        if (isStatic) {
          var _a = tslib.__read(React.useState(initial), 2), setLatest_1 = _a[1];
          React.useEffect(function() {
            return value.onChange(setLatest_1);
          }, []);
        }
        return value;
      }
      var isCustomValueType = function(v) {
        return typeof v === "object" && v.mix;
      };
      var getMixer = function(v) {
        return isCustomValueType(v) ? v.mix : void 0;
      };
      function transform() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var useImmediate = !Array.isArray(args[0]);
        var argOffset = useImmediate ? 0 : -1;
        var inputValue = args[0 + argOffset];
        var inputRange = args[1 + argOffset];
        var outputRange = args[2 + argOffset];
        var options = args[3 + argOffset];
        var interpolator = popmotion.interpolate(inputRange, outputRange, tslib.__assign({ mixer: getMixer(outputRange[0]) }, options));
        return useImmediate ? interpolator(inputValue) : interpolator;
      }
      function useOnChange(value, callback) {
        React.useEffect(function() {
          if (isMotionValue(value))
            return value.onChange(callback);
        }, [callback]);
      }
      function useMultiOnChange(values, handler) {
        React.useEffect(function() {
          var subscriptions = values.map(function(value) {
            return value.onChange(handler);
          });
          return function() {
            return subscriptions.forEach(function(unsubscribe) {
              return unsubscribe();
            });
          };
        });
      }
      function useCombineMotionValues(values, combineValues) {
        var value = useMotionValue(combineValues());
        var updateValue = function() {
          return value.set(combineValues());
        };
        updateValue();
        useMultiOnChange(values, function() {
          return sync__default["default"].update(updateValue, false, true);
        });
        return value;
      }
      function useTransform(input, inputRangeOrTransformer, outputRange, options) {
        var transformer = typeof inputRangeOrTransformer === "function" ? inputRangeOrTransformer : transform(inputRangeOrTransformer, outputRange, options);
        return Array.isArray(input) ? useListTransform(input, transformer) : useListTransform([input], function(_a) {
          var _b = tslib.__read(_a, 1), latest = _b[0];
          return transformer(latest);
        });
      }
      function useListTransform(values, transformer) {
        var latest = useConstant(function() {
          return [];
        });
        return useCombineMotionValues(values, function() {
          latest.length = 0;
          var numValues = values.length;
          for (var i = 0; i < numValues; i++) {
            latest[i] = values[i].get();
          }
          return transformer(latest);
        });
      }
      function useDefaultMotionValue(value, defaultValue) {
        if (defaultValue === void 0) {
          defaultValue = 0;
        }
        return isMotionValue(value) ? value : useMotionValue(defaultValue);
      }
      function ReorderItem(_a, externalRef) {
        var children = _a.children, style = _a.style, value = _a.value, _b = _a.as, as = _b === void 0 ? "li" : _b, onDrag = _a.onDrag, props = tslib.__rest(_a, ["children", "style", "value", "as", "onDrag"]);
        var Component = useConstant(function() {
          return motion(as);
        });
        var context = React.useContext(ReorderContext);
        var point = {
          x: useDefaultMotionValue(style === null || style === void 0 ? void 0 : style.x),
          y: useDefaultMotionValue(style === null || style === void 0 ? void 0 : style.y)
        };
        var zIndex = useTransform([point.x, point.y], function(_a2) {
          var _b2 = tslib.__read(_a2, 2), latestX = _b2[0], latestY = _b2[1];
          return latestX || latestY ? 1 : "unset";
        });
        var layout = React.useRef(null);
        heyListen.invariant(Boolean(context), "Reorder.Item must be a child of Reorder.Group");
        var _c = context, axis = _c.axis, registerItem = _c.registerItem, updateOrder = _c.updateOrder;
        React.useEffect(function() {
          registerItem(value, layout.current);
        }, [context]);
        return React__namespace.createElement(Component, tslib.__assign({ drag: axis }, props, { dragSnapToOrigin: true, style: tslib.__assign(tslib.__assign({}, style), { x: point.x, y: point.y, zIndex }), layout: true, onDrag: function(event, gesturePoint) {
          var velocity = gesturePoint.velocity;
          velocity[axis] && updateOrder(value, point[axis].get(), velocity[axis]);
          onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, gesturePoint);
        }, onLayoutMeasure: function(measured) {
          layout.current = measured;
        }, ref: externalRef }), children);
      }
      var Item = React.forwardRef(ReorderItem);
      var Reorder = {
        Group,
        Item
      };
      var domAnimation = tslib.__assign(tslib.__assign({ renderer: createDomVisualElement }, animations), gestureAnimations);
      var domMax = tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({}, domAnimation), drag), layoutFeatures), { projectionNodeConstructor: HTMLProjectionNode });
      function useMotionTemplate(fragments) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          values[_i - 1] = arguments[_i];
        }
        var numFragments = fragments.length;
        function buildValue() {
          var output = "";
          for (var i = 0; i < numFragments; i++) {
            output += fragments[i];
            var value = values[i];
            if (value)
              output += values[i].get();
          }
          return output;
        }
        return useCombineMotionValues(values, buildValue);
      }
      function useSpring(source, config) {
        if (config === void 0) {
          config = {};
        }
        var isStatic = React.useContext(MotionConfigContext).isStatic;
        var activeSpringAnimation = React.useRef(null);
        var value = useMotionValue(isMotionValue(source) ? source.get() : source);
        React.useMemo(function() {
          return value.attach(function(v, set) {
            if (isStatic)
              return set(v);
            if (activeSpringAnimation.current) {
              activeSpringAnimation.current.stop();
            }
            activeSpringAnimation.current = popmotion.animate(tslib.__assign(tslib.__assign({ from: value.get(), to: v, velocity: value.getVelocity() }, config), { onUpdate: set }));
            return value.get();
          });
        }, Object.values(config));
        useOnChange(source, function(v) {
          return value.set(parseFloat(v));
        });
        return value;
      }
      function useVelocity(value) {
        var velocity = useMotionValue(value.getVelocity());
        React.useEffect(function() {
          return value.velocityUpdateSubscribers.add(function(newVelocity) {
            velocity.set(newVelocity);
          });
        }, [value]);
        return velocity;
      }
      function createScrollMotionValues() {
        return {
          scrollX: motionValue(0),
          scrollY: motionValue(0),
          scrollXProgress: motionValue(0),
          scrollYProgress: motionValue(0)
        };
      }
      function setProgress(offset, maxOffset, value) {
        value.set(!offset || !maxOffset ? 0 : offset / maxOffset);
      }
      function createScrollUpdater(values, getOffsets) {
        var update = function() {
          var _a = getOffsets(), xOffset = _a.xOffset, yOffset = _a.yOffset, xMaxOffset = _a.xMaxOffset, yMaxOffset = _a.yMaxOffset;
          values.scrollX.set(xOffset);
          values.scrollY.set(yOffset);
          setProgress(xOffset, xMaxOffset, values.scrollXProgress);
          setProgress(yOffset, yMaxOffset, values.scrollYProgress);
        };
        update();
        return update;
      }
      var getElementScrollOffsets = function(element) {
        return function() {
          return {
            xOffset: element.scrollLeft,
            yOffset: element.scrollTop,
            xMaxOffset: element.scrollWidth - element.offsetWidth,
            yMaxOffset: element.scrollHeight - element.offsetHeight
          };
        };
      };
      function useElementScroll(ref) {
        var values = useConstant(createScrollMotionValues);
        useIsomorphicLayoutEffect(function() {
          var element = ref.current;
          heyListen.invariant(!!element, "ref provided to useScroll must be passed into a HTML element.");
          if (!element)
            return;
          var updateScrollValues = createScrollUpdater(values, getElementScrollOffsets(element));
          var scrollListener = addDomEvent(element, "scroll", updateScrollValues, { passive: true });
          var resizeListener = addDomEvent(element, "resize", updateScrollValues);
          return function() {
            scrollListener && scrollListener();
            resizeListener && resizeListener();
          };
        }, []);
        return values;
      }
      var viewportScrollValues;
      function getViewportScrollOffsets() {
        return {
          xOffset: window.pageXOffset,
          yOffset: window.pageYOffset,
          xMaxOffset: document.body.clientWidth - window.innerWidth,
          yMaxOffset: document.body.clientHeight - window.innerHeight
        };
      }
      var hasListeners = false;
      function addEventListeners() {
        hasListeners = true;
        if (typeof window === "undefined")
          return;
        var updateScrollValues = createScrollUpdater(viewportScrollValues, getViewportScrollOffsets);
        addDomEvent(window, "scroll", updateScrollValues, { passive: true });
        addDomEvent(window, "resize", updateScrollValues);
      }
      function useViewportScroll() {
        if (!viewportScrollValues) {
          viewportScrollValues = createScrollMotionValues();
        }
        useIsomorphicLayoutEffect(function() {
          !hasListeners && addEventListeners();
        }, []);
        return viewportScrollValues;
      }
      var prefersReducedMotion;
      function initPrefersReducedMotion() {
        prefersReducedMotion = motionValue(null);
        if (typeof window === "undefined")
          return;
        if (window.matchMedia) {
          var motionMediaQuery_1 = window.matchMedia("(prefers-reduced-motion)");
          var setReducedMotionPreferences = function() {
            return prefersReducedMotion.set(motionMediaQuery_1.matches);
          };
          motionMediaQuery_1.addListener(setReducedMotionPreferences);
          setReducedMotionPreferences();
        } else {
          prefersReducedMotion.set(false);
        }
      }
      function useReducedMotion() {
        !prefersReducedMotion && initPrefersReducedMotion();
        var _a = tslib.__read(React.useState(prefersReducedMotion.get()), 2), shouldReduceMotion = _a[0], setShouldReduceMotion = _a[1];
        useOnChange(prefersReducedMotion, setShouldReduceMotion);
        return shouldReduceMotion;
      }
      function animationControls() {
        var hasMounted = false;
        var pendingAnimations = [];
        var subscribers = /* @__PURE__ */ new Set();
        var controls = {
          subscribe: function(visualElement2) {
            subscribers.add(visualElement2);
            return function() {
              return void subscribers.delete(visualElement2);
            };
          },
          start: function(definition, transitionOverride) {
            if (hasMounted) {
              var animations_1 = [];
              subscribers.forEach(function(visualElement2) {
                animations_1.push(animateVisualElement(visualElement2, definition, {
                  transitionOverride
                }));
              });
              return Promise.all(animations_1);
            } else {
              return new Promise(function(resolve) {
                pendingAnimations.push({
                  animation: [definition, transitionOverride],
                  resolve
                });
              });
            }
          },
          set: function(definition) {
            heyListen.invariant(hasMounted, "controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook.");
            return subscribers.forEach(function(visualElement2) {
              setValues(visualElement2, definition);
            });
          },
          stop: function() {
            subscribers.forEach(function(visualElement2) {
              stopAnimation(visualElement2);
            });
          },
          mount: function() {
            hasMounted = true;
            pendingAnimations.forEach(function(_a) {
              var animation = _a.animation, resolve = _a.resolve;
              controls.start.apply(controls, tslib.__spreadArray([], tslib.__read(animation), false)).then(resolve);
            });
            return function() {
              hasMounted = false;
              controls.stop();
            };
          }
        };
        return controls;
      }
      function useAnimation() {
        var controls = useConstant(animationControls);
        React.useEffect(controls.mount, []);
        return controls;
      }
      function useCycle() {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          items[_i] = arguments[_i];
        }
        var index = React.useRef(0);
        var _a = tslib.__read(React.useState(items[index.current]), 2), item = _a[0], setItem = _a[1];
        return [
          item,
          function(next) {
            index.current = typeof next !== "number" ? popmotion.wrap(0, items.length, index.current + 1) : next;
            setItem(items[index.current]);
          }
        ];
      }
      var DragControls = function() {
        function DragControls2() {
          this.componentControls = /* @__PURE__ */ new Set();
        }
        DragControls2.prototype.subscribe = function(controls) {
          var _this = this;
          this.componentControls.add(controls);
          return function() {
            return _this.componentControls.delete(controls);
          };
        };
        DragControls2.prototype.start = function(event, options) {
          this.componentControls.forEach(function(controls) {
            controls.start(event.nativeEvent || event, options);
          });
        };
        return DragControls2;
      }();
      var createDragControls = function() {
        return new DragControls();
      };
      function useDragControls() {
        return useConstant(createDragControls);
      }
      function useInstantLayoutTransition() {
        return startTransition;
      }
      function startTransition(cb) {
        if (!rootProjectionNode.current)
          return;
        rootProjectionNode.current.isUpdating = false;
        rootProjectionNode.current.blockUpdate();
        cb === null || cb === void 0 ? void 0 : cb();
      }
      function useInstantTransition() {
        var _a = tslib.__read(useForceUpdate(), 2), forceUpdate = _a[0], forcedRenderCount = _a[1];
        var startInstantLayoutTransition = useInstantLayoutTransition();
        React.useEffect(function() {
          sync__default["default"].postRender(function() {
            return sync__default["default"].postRender(function() {
              return instantAnimationState.current = false;
            });
          });
        }, [forcedRenderCount]);
        return function(callback) {
          startInstantLayoutTransition(function() {
            instantAnimationState.current = true;
            forceUpdate();
            callback();
          });
        };
      }
      function useResetProjection() {
        var reset = React__namespace.useCallback(function() {
          var root = rootProjectionNode.current;
          if (!root)
            return;
          root.resetTree();
        }, []);
        return reset;
      }
      var createObject = function() {
        return {};
      };
      var stateVisualElement = visualElement({
        build: function() {
        },
        measureViewportBox: createBox,
        resetTransform: function() {
        },
        restoreTransform: function() {
        },
        removeValueFromRenderState: function() {
        },
        render: function() {
        },
        scrapeMotionValuesFromProps: createObject,
        readValueFromInstance: function(_state, key, options) {
          return options.initialState[key] || 0;
        },
        makeTargetAnimatable: function(element, _a) {
          var transition = _a.transition, transitionEnd = _a.transitionEnd, target = tslib.__rest(_a, ["transition", "transitionEnd"]);
          var origin = getOrigin(target, transition || {}, element);
          checkTargetForNewValues(element, target, origin);
          return tslib.__assign({ transition, transitionEnd }, target);
        }
      });
      var useVisualState = makeUseVisualState({
        scrapeMotionValuesFromProps: createObject,
        createRenderState: createObject
      });
      function useAnimatedState(initialState) {
        var _a = tslib.__read(React.useState(initialState), 2), animationState = _a[0], setAnimationState = _a[1];
        var visualState = useVisualState({}, false);
        var element = useConstant(function() {
          return stateVisualElement({ props: {}, visualState }, { initialState });
        });
        React.useEffect(function() {
          element.mount({});
          return element.unmount();
        }, []);
        React.useEffect(function() {
          element.setProps({
            onUpdate: function(v) {
              return setAnimationState(tslib.__assign({}, v));
            }
          });
        });
        var startAnimation2 = useConstant(function() {
          return function(animationDefinition) {
            return animateVisualElement(element, animationDefinition);
          };
        });
        return [animationState, startAnimation2];
      }
      var maxScale = 1e5;
      var invertScale = function(scale) {
        return scale > 1e-3 ? 1 / scale : maxScale;
      };
      var hasWarned = false;
      function useInvertedScale(scale) {
        var parentScaleX = useMotionValue(1);
        var parentScaleY = useMotionValue(1);
        var visualElement2 = useVisualElementContext();
        heyListen.invariant(!!(scale || visualElement2), "If no scale values are provided, useInvertedScale must be used within a child of another motion component.");
        heyListen.warning(hasWarned, "useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.");
        hasWarned = true;
        if (scale) {
          parentScaleX = scale.scaleX || parentScaleX;
          parentScaleY = scale.scaleY || parentScaleY;
        } else if (visualElement2) {
          parentScaleX = visualElement2.getValue("scaleX", 1);
          parentScaleY = visualElement2.getValue("scaleY", 1);
        }
        var scaleX = useTransform(parentScaleX, invertScale);
        var scaleY = useTransform(parentScaleY, invertScale);
        return { scaleX, scaleY };
      }
      exports.AnimatePresence = AnimatePresence;
      exports.AnimateSharedLayout = AnimateSharedLayout;
      exports.DeprecatedLayoutGroupContext = DeprecatedLayoutGroupContext;
      exports.DragControls = DragControls;
      exports.FlatTree = FlatTree;
      exports.LayoutGroup = LayoutGroup;
      exports.LayoutGroupContext = LayoutGroupContext;
      exports.LazyMotion = LazyMotion;
      exports.MotionConfig = MotionConfig;
      exports.MotionConfigContext = MotionConfigContext;
      exports.MotionValue = MotionValue;
      exports.PresenceContext = PresenceContext;
      exports.Reorder = Reorder;
      exports.SwitchLayoutGroupContext = SwitchLayoutGroupContext;
      exports.addScaleCorrector = addScaleCorrector;
      exports.animate = animate;
      exports.animateVisualElement = animateVisualElement;
      exports.animationControls = animationControls;
      exports.createDomMotionComponent = createDomMotionComponent;
      exports.createMotionComponent = createMotionComponent;
      exports.domAnimation = domAnimation;
      exports.domMax = domMax;
      exports.isValidMotionProp = isValidMotionProp;
      exports.m = m;
      exports.motion = motion;
      exports.motionValue = motionValue;
      exports.resolveMotionValue = resolveMotionValue;
      exports.transform = transform;
      exports.useAnimation = useAnimation;
      exports.useCycle = useCycle;
      exports.useDeprecatedAnimatedState = useAnimatedState;
      exports.useDeprecatedInvertedScale = useInvertedScale;
      exports.useDomEvent = useDomEvent;
      exports.useDragControls = useDragControls;
      exports.useElementScroll = useElementScroll;
      exports.useInstantLayoutTransition = useInstantLayoutTransition;
      exports.useInstantTransition = useInstantTransition;
      exports.useIsPresent = useIsPresent;
      exports.useMotionTemplate = useMotionTemplate;
      exports.useMotionValue = useMotionValue;
      exports.usePresence = usePresence;
      exports.useReducedMotion = useReducedMotion;
      exports.useResetProjection = useResetProjection;
      exports.useSpring = useSpring;
      exports.useTransform = useTransform;
      exports.useVelocity = useVelocity;
      exports.useViewportScroll = useViewportScroll;
      exports.visualElement = visualElement;
    }
  });

  // output/Framer.Motion.MotionComponent/foreign.js
  var require_foreign17 = __commonJS({
    "output/Framer.Motion.MotionComponent/foreign.js"(exports) {
      var framerMotion = require_framer_motion_cjs();
      var React = require_react();
      var createElement = React.createElement;
      exports.motionComponentImpl = (str) => {
        const html = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "webview"];
        const svg = ["animate", "circle", "clipPath", "defs", "desc", "ellipse", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "metadata", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "switch", "symbol", "text", "textPath", "tspan", "use", "view"];
        if (html.indexOf(str) === -1 && svg.indexOf(str) === -1) {
          console.error("Tried to use non-existing motion component " + str);
        }
        const flattenDataProp = (props, ref) => {
          var data = null;
          if (props._data != null) {
            data = { _data: void 0 };
            Object.entries(props._data).forEach(function(entry) {
              data["data-" + entry[0]] = entry[1];
            });
          }
          var aria = null;
          if (props._aria != null) {
            aria = { _aria: void 0 };
            Object.entries(props._aria).forEach(function(entry) {
              aria["aria-" + entry[0]] = entry[1];
            });
          }
          return Object.assign({ ref }, props, data, aria);
        };
        const element = (component) => (props) => Array.isArray(props.children) ? createElement.apply(null, [component, props].concat(props.children)) : createElement(component, props);
        return React.forwardRef((props, ref) => {
          return element(framerMotion.motion[str])(flattenDataProp(props, ref));
        });
      };
      exports.custom = (component) => () => {
        return framerMotion.motion(component);
      };
    }
  });

  // output/Framer.Motion.MotionComponent/index.js
  var require_Framer_Motion = __commonJS({
    "output/Framer.Motion.MotionComponent/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign17();
      var wbrImpl = $foreign.motionComponentImpl("wbr");
      var wbr = function(dictUnion) {
        return wbrImpl;
      };
      var viewImpl = $foreign.motionComponentImpl("view");
      var view = function(dictUnion) {
        return viewImpl;
      };
      var videoImpl = $foreign.motionComponentImpl("video");
      var video = function(dictUnion) {
        return videoImpl;
      };
      var varImpl = $foreign.motionComponentImpl("var");
      var $$var = function(dictUnion) {
        return varImpl;
      };
      var useImpl = $foreign.motionComponentImpl("use");
      var use = function(dictUnion) {
        return useImpl;
      };
      var ulImpl = $foreign.motionComponentImpl("ul");
      var ul = function(dictUnion) {
        return ulImpl;
      };
      var uImpl = $foreign.motionComponentImpl("u");
      var u = function(dictUnion) {
        return uImpl;
      };
      var tspanImpl = $foreign.motionComponentImpl("tspan");
      var tspan = function(dictUnion) {
        return tspanImpl;
      };
      var trackImpl = $foreign.motionComponentImpl("track");
      var track = function(dictUnion) {
        return trackImpl;
      };
      var trImpl = $foreign.motionComponentImpl("tr");
      var tr = function(dictUnion) {
        return trImpl;
      };
      var titleImpl = $foreign.motionComponentImpl("title");
      var title = function(dictUnion) {
        return titleImpl;
      };
      var timeImpl = $foreign.motionComponentImpl("time");
      var time = function(dictUnion) {
        return timeImpl;
      };
      var theadImpl = $foreign.motionComponentImpl("thead");
      var thead = function(dictUnion) {
        return theadImpl;
      };
      var thImpl = $foreign.motionComponentImpl("th");
      var th = function(dictUnion) {
        return thImpl;
      };
      var tfootImpl = $foreign.motionComponentImpl("tfoot");
      var tfoot = function(dictUnion) {
        return tfootImpl;
      };
      var textareaImpl = $foreign.motionComponentImpl("textarea");
      var textarea = function(dictUnion) {
        return textareaImpl;
      };
      var textPathImpl = $foreign.motionComponentImpl("textPath");
      var textPath = function(dictUnion) {
        return textPathImpl;
      };
      var textImpl = $foreign.motionComponentImpl("text");
      var text = function(dictUnion) {
        return textImpl;
      };
      var tdImpl = $foreign.motionComponentImpl("td");
      var td = function(dictUnion) {
        return tdImpl;
      };
      var tbodyImpl = $foreign.motionComponentImpl("tbody");
      var tbody = function(dictUnion) {
        return tbodyImpl;
      };
      var tableImpl = $foreign.motionComponentImpl("table");
      var table = function(dictUnion) {
        return tableImpl;
      };
      var symbolImpl = $foreign.motionComponentImpl("symbol");
      var symbol = function(dictUnion) {
        return symbolImpl;
      };
      var svgSwitchImpl = $foreign.motionComponentImpl("switch");
      var svgSwitch = function(dictUnion) {
        return svgSwitchImpl;
      };
      var svgImpl = $foreign.motionComponentImpl("svg");
      var svgAnimateImpl = $foreign.motionComponentImpl("animate");
      var svgAnimate = function(dictUnion) {
        return svgAnimateImpl;
      };
      var svg = function(dictUnion) {
        return svgImpl;
      };
      var supImpl = $foreign.motionComponentImpl("sup");
      var sup = function(dictUnion) {
        return supImpl;
      };
      var summaryImpl = $foreign.motionComponentImpl("summary");
      var summary = function(dictUnion) {
        return summaryImpl;
      };
      var subImpl = $foreign.motionComponentImpl("sub");
      var sub = function(dictUnion) {
        return subImpl;
      };
      var styleImpl = $foreign.motionComponentImpl("style");
      var style = function(dictUnion) {
        return styleImpl;
      };
      var strongImpl = $foreign.motionComponentImpl("strong");
      var strong = function(dictUnion) {
        return strongImpl;
      };
      var stopImpl = $foreign.motionComponentImpl("stop");
      var stop = function(dictUnion) {
        return stopImpl;
      };
      var spanImpl = $foreign.motionComponentImpl("span");
      var span = function(dictUnion) {
        return spanImpl;
      };
      var sourceImpl = $foreign.motionComponentImpl("source");
      var source = function(dictUnion) {
        return sourceImpl;
      };
      var smallImpl = $foreign.motionComponentImpl("small");
      var small = function(dictUnion) {
        return smallImpl;
      };
      var selectImpl = $foreign.motionComponentImpl("select");
      var select = function(dictUnion) {
        return selectImpl;
      };
      var sectionImpl = $foreign.motionComponentImpl("section");
      var section = function(dictUnion) {
        return sectionImpl;
      };
      var scriptImpl = $foreign.motionComponentImpl("script");
      var script = function(dictUnion) {
        return scriptImpl;
      };
      var sampImpl = $foreign.motionComponentImpl("samp");
      var samp = function(dictUnion) {
        return sampImpl;
      };
      var sImpl = $foreign.motionComponentImpl("s");
      var s = function(dictUnion) {
        return sImpl;
      };
      var rubyImpl = $foreign.motionComponentImpl("ruby");
      var ruby = function(dictUnion) {
        return rubyImpl;
      };
      var rtImpl = $foreign.motionComponentImpl("rt");
      var rt = function(dictUnion) {
        return rtImpl;
      };
      var rpImpl = $foreign.motionComponentImpl("rp");
      var rp = function(dictUnion) {
        return rpImpl;
      };
      var rectImpl = $foreign.motionComponentImpl("rect");
      var rect = function(dictUnion) {
        return rectImpl;
      };
      var radialGradientImpl = $foreign.motionComponentImpl("radialGradient");
      var radialGradient = function(dictUnion) {
        return radialGradientImpl;
      };
      var qImpl = $foreign.motionComponentImpl("q");
      var q = function(dictUnion) {
        return qImpl;
      };
      var progressImpl = $foreign.motionComponentImpl("progress");
      var progress = function(dictUnion) {
        return progressImpl;
      };
      var preImpl = $foreign.motionComponentImpl("pre");
      var pre = function(dictUnion) {
        return preImpl;
      };
      var polylineImpl = $foreign.motionComponentImpl("polyline");
      var polyline = function(dictUnion) {
        return polylineImpl;
      };
      var polygonImpl = $foreign.motionComponentImpl("polygon");
      var polygon = function(dictUnion) {
        return polygonImpl;
      };
      var pictureImpl = $foreign.motionComponentImpl("picture");
      var picture = function(dictUnion) {
        return pictureImpl;
      };
      var patternImpl = $foreign.motionComponentImpl("pattern");
      var pattern = function(dictUnion) {
        return patternImpl;
      };
      var pathImpl = $foreign.motionComponentImpl("path");
      var path = function(dictUnion) {
        return pathImpl;
      };
      var paramImpl = $foreign.motionComponentImpl("param");
      var param = function(dictUnion) {
        return paramImpl;
      };
      var pImpl = $foreign.motionComponentImpl("p");
      var p = function(dictUnion) {
        return pImpl;
      };
      var outputImpl = $foreign.motionComponentImpl("output");
      var output = function(dictUnion) {
        return outputImpl;
      };
      var optionImpl = $foreign.motionComponentImpl("option");
      var option = function(dictUnion) {
        return optionImpl;
      };
      var optgroupImpl = $foreign.motionComponentImpl("optgroup");
      var optgroup = function(dictUnion) {
        return optgroupImpl;
      };
      var olImpl = $foreign.motionComponentImpl("ol");
      var ol = function(dictUnion) {
        return olImpl;
      };
      var objectImpl = $foreign.motionComponentImpl("object");
      var object = function(dictUnion) {
        return objectImpl;
      };
      var noscriptImpl = $foreign.motionComponentImpl("noscript");
      var noscript = function(dictUnion) {
        return noscriptImpl;
      };
      var navImpl = $foreign.motionComponentImpl("nav");
      var nav = function(dictUnion) {
        return navImpl;
      };
      var meterImpl = $foreign.motionComponentImpl("meter");
      var meter = function(dictUnion) {
        return meterImpl;
      };
      var metadataImpl = $foreign.motionComponentImpl("metadata");
      var metadata = function(dictUnion) {
        return metadataImpl;
      };
      var metaImpl = $foreign.motionComponentImpl("meta");
      var meta = function(dictUnion) {
        return metaImpl;
      };
      var menuitemImpl = $foreign.motionComponentImpl("menuitem");
      var menuitem = function(dictUnion) {
        return menuitemImpl;
      };
      var menuImpl = $foreign.motionComponentImpl("menu");
      var menu = function(dictUnion) {
        return menuImpl;
      };
      var maskImpl = $foreign.motionComponentImpl("mask");
      var mask = function(dictUnion) {
        return maskImpl;
      };
      var markerImpl = $foreign.motionComponentImpl("marker");
      var marker = function(dictUnion) {
        return markerImpl;
      };
      var markImpl = $foreign.motionComponentImpl("mark");
      var mark = function(dictUnion) {
        return markImpl;
      };
      var mapImpl = $foreign.motionComponentImpl("map");
      var map = function(dictUnion) {
        return mapImpl;
      };
      var mainImpl = $foreign.motionComponentImpl("main");
      var main2 = function(dictUnion) {
        return mainImpl;
      };
      var linkImpl = $foreign.motionComponentImpl("link");
      var link = function(dictUnion) {
        return linkImpl;
      };
      var linearGradientImpl = $foreign.motionComponentImpl("linearGradient");
      var linearGradient = function(dictUnion) {
        return linearGradientImpl;
      };
      var lineImpl = $foreign.motionComponentImpl("line");
      var line = function(dictUnion) {
        return lineImpl;
      };
      var liImpl = $foreign.motionComponentImpl("li");
      var li = function(dictUnion) {
        return liImpl;
      };
      var legendImpl = $foreign.motionComponentImpl("legend");
      var legend = function(dictUnion) {
        return legendImpl;
      };
      var labelImpl = $foreign.motionComponentImpl("label");
      var label = function(dictUnion) {
        return labelImpl;
      };
      var keygenImpl = $foreign.motionComponentImpl("keygen");
      var keygen = function(dictUnion) {
        return keygenImpl;
      };
      var kbdImpl = $foreign.motionComponentImpl("kbd");
      var kbd = function(dictUnion) {
        return kbdImpl;
      };
      var insImpl = $foreign.motionComponentImpl("ins");
      var ins = function(dictUnion) {
        return insImpl;
      };
      var inputImpl = $foreign.motionComponentImpl("input");
      var input = function(dictUnion) {
        return inputImpl;
      };
      var imgImpl = $foreign.motionComponentImpl("img");
      var img = function(dictUnion) {
        return imgImpl;
      };
      var imageImpl = $foreign.motionComponentImpl("image");
      var image = function(dictUnion) {
        return imageImpl;
      };
      var iframeImpl = $foreign.motionComponentImpl("iframe");
      var iframe = function(dictUnion) {
        return iframeImpl;
      };
      var iImpl = $foreign.motionComponentImpl("i");
      var i = function(dictUnion) {
        return iImpl;
      };
      var htmlImpl = $foreign.motionComponentImpl("html");
      var html = function(dictUnion) {
        return htmlImpl;
      };
      var hrImpl = $foreign.motionComponentImpl("hr");
      var hr = function(dictUnion) {
        return hrImpl;
      };
      var hgroupImpl = $foreign.motionComponentImpl("hgroup");
      var hgroup = function(dictUnion) {
        return hgroupImpl;
      };
      var headerImpl = $foreign.motionComponentImpl("header");
      var header = function(dictUnion) {
        return headerImpl;
      };
      var headImpl = $foreign.motionComponentImpl("head");
      var head = function(dictUnion) {
        return headImpl;
      };
      var h6Impl = $foreign.motionComponentImpl("h6");
      var h6 = function(dictUnion) {
        return h6Impl;
      };
      var h5Impl = $foreign.motionComponentImpl("h5");
      var h5 = function(dictUnion) {
        return h5Impl;
      };
      var h4Impl = $foreign.motionComponentImpl("h4");
      var h4 = function(dictUnion) {
        return h4Impl;
      };
      var h3Impl = $foreign.motionComponentImpl("h3");
      var h3 = function(dictUnion) {
        return h3Impl;
      };
      var h2Impl = $foreign.motionComponentImpl("h2");
      var h2 = function(dictUnion) {
        return h2Impl;
      };
      var h1Impl = $foreign.motionComponentImpl("h1");
      var h1 = function(dictUnion) {
        return h1Impl;
      };
      var gImpl = $foreign.motionComponentImpl("g");
      var g = function(dictUnion) {
        return gImpl;
      };
      var formImpl = $foreign.motionComponentImpl("form");
      var form = function(dictUnion) {
        return formImpl;
      };
      var foreignObjectImpl = $foreign.motionComponentImpl("foreignObject");
      var foreignObject = function(dictUnion) {
        return foreignObjectImpl;
      };
      var footerImpl = $foreign.motionComponentImpl("footer");
      var footer = function(dictUnion) {
        return footerImpl;
      };
      var filterImpl = $foreign.motionComponentImpl("filter");
      var filter = function(dictUnion) {
        return filterImpl;
      };
      var figureImpl = $foreign.motionComponentImpl("figure");
      var figure = function(dictUnion) {
        return figureImpl;
      };
      var figcaptionImpl = $foreign.motionComponentImpl("figcaption");
      var figcaption = function(dictUnion) {
        return figcaptionImpl;
      };
      var fieldsetImpl = $foreign.motionComponentImpl("fieldset");
      var fieldset = function(dictUnion) {
        return fieldsetImpl;
      };
      var feTurbulenceImpl = $foreign.motionComponentImpl("feTurbulence");
      var feTurbulence = function(dictUnion) {
        return feTurbulenceImpl;
      };
      var feTileImpl = $foreign.motionComponentImpl("feTile");
      var feTile = function(dictUnion) {
        return feTileImpl;
      };
      var feSpotLightImpl = $foreign.motionComponentImpl("feSpotLight");
      var feSpotLight = function(dictUnion) {
        return feSpotLightImpl;
      };
      var feSpecularLightingImpl = $foreign.motionComponentImpl("feSpecularLighting");
      var feSpecularLighting = function(dictUnion) {
        return feSpecularLightingImpl;
      };
      var fePointLightImpl = $foreign.motionComponentImpl("fePointLight");
      var fePointLight = function(dictUnion) {
        return fePointLightImpl;
      };
      var feOffsetImpl = $foreign.motionComponentImpl("feOffset");
      var feOffset = function(dictUnion) {
        return feOffsetImpl;
      };
      var feMorphologyImpl = $foreign.motionComponentImpl("feMorphology");
      var feMorphology = function(dictUnion) {
        return feMorphologyImpl;
      };
      var feMergeNodeImpl = $foreign.motionComponentImpl("feMergeNode");
      var feMergeNode = function(dictUnion) {
        return feMergeNodeImpl;
      };
      var feMergeImpl = $foreign.motionComponentImpl("feMerge");
      var feMerge = function(dictUnion) {
        return feMergeImpl;
      };
      var feImageImpl = $foreign.motionComponentImpl("feImage");
      var feImage = function(dictUnion) {
        return feImageImpl;
      };
      var feGaussianBlurImpl = $foreign.motionComponentImpl("feGaussianBlur");
      var feGaussianBlur = function(dictUnion) {
        return feGaussianBlurImpl;
      };
      var feFuncRImpl = $foreign.motionComponentImpl("feFuncR");
      var feFuncR = function(dictUnion) {
        return feFuncRImpl;
      };
      var feFuncGImpl = $foreign.motionComponentImpl("feFuncG");
      var feFuncG = function(dictUnion) {
        return feFuncGImpl;
      };
      var feFuncBImpl = $foreign.motionComponentImpl("feFuncB");
      var feFuncB = function(dictUnion) {
        return feFuncBImpl;
      };
      var feFuncAImpl = $foreign.motionComponentImpl("feFuncA");
      var feFuncA = function(dictUnion) {
        return feFuncAImpl;
      };
      var feFloodImpl = $foreign.motionComponentImpl("feFlood");
      var feFlood = function(dictUnion) {
        return feFloodImpl;
      };
      var feDropShadowImpl = $foreign.motionComponentImpl("feDropShadow");
      var feDropShadow = function(dictUnion) {
        return feDropShadowImpl;
      };
      var feDistantLightImpl = $foreign.motionComponentImpl("feDistantLight");
      var feDistantLight = function(dictUnion) {
        return feDistantLightImpl;
      };
      var feDisplacementMapImpl = $foreign.motionComponentImpl("feDisplacementMap");
      var feDisplacementMap = function(dictUnion) {
        return feDisplacementMapImpl;
      };
      var feDiffuseLightingImpl = $foreign.motionComponentImpl("feDiffuseLighting");
      var feDiffuseLighting = function(dictUnion) {
        return feDiffuseLightingImpl;
      };
      var feConvolveMatrixImpl = $foreign.motionComponentImpl("feConvolveMatrix");
      var feConvolveMatrix = function(dictUnion) {
        return feConvolveMatrixImpl;
      };
      var feCompositeImpl = $foreign.motionComponentImpl("feComposite");
      var feComposite = function(dictUnion) {
        return feCompositeImpl;
      };
      var feComponentTransferImpl = $foreign.motionComponentImpl("feComponentTransfer");
      var feComponentTransfer = function(dictUnion) {
        return feComponentTransferImpl;
      };
      var feColorMatrixImpl = $foreign.motionComponentImpl("feColorMatrix");
      var feColorMatrix = function(dictUnion) {
        return feColorMatrixImpl;
      };
      var feBlendImpl = $foreign.motionComponentImpl("feBlend");
      var feBlend = function(dictUnion) {
        return feBlendImpl;
      };
      var embedImpl = $foreign.motionComponentImpl("embed");
      var embed = function(dictUnion) {
        return embedImpl;
      };
      var emImpl = $foreign.motionComponentImpl("em");
      var em = function(dictUnion) {
        return emImpl;
      };
      var ellipseImpl = $foreign.motionComponentImpl("ellipse");
      var ellipse = function(dictUnion) {
        return ellipseImpl;
      };
      var dtImpl = $foreign.motionComponentImpl("dt");
      var dt = function(dictUnion) {
        return dtImpl;
      };
      var dlImpl = $foreign.motionComponentImpl("dl");
      var dl = function(dictUnion) {
        return dlImpl;
      };
      var divImpl = $foreign.motionComponentImpl("div");
      var div = function(dictUnion) {
        return divImpl;
      };
      var dialogImpl = $foreign.motionComponentImpl("dialog");
      var dialog = function(dictUnion) {
        return dialogImpl;
      };
      var dfnImpl = $foreign.motionComponentImpl("dfn");
      var dfn = function(dictUnion) {
        return dfnImpl;
      };
      var detailsImpl = $foreign.motionComponentImpl("details");
      var details = function(dictUnion) {
        return detailsImpl;
      };
      var descImpl = $foreign.motionComponentImpl("desc");
      var desc = function(dictUnion) {
        return descImpl;
      };
      var delImpl = $foreign.motionComponentImpl("del");
      var del = function(dictUnion) {
        return delImpl;
      };
      var defsImpl = $foreign.motionComponentImpl("defs");
      var defs = function(dictUnion) {
        return defsImpl;
      };
      var ddImpl = $foreign.motionComponentImpl("dd");
      var dd = function(dictUnion) {
        return ddImpl;
      };
      var datalistImpl = $foreign.motionComponentImpl("datalist");
      var datalist = function(dictUnion) {
        return datalistImpl;
      };
      var colgroupImpl = $foreign.motionComponentImpl("colgroup");
      var colgroup = function(dictUnion) {
        return colgroupImpl;
      };
      var colImpl = $foreign.motionComponentImpl("col");
      var colImplImpl = colImpl;
      var col = function(dictUnion) {
        return colImpl;
      };
      var codeImpl = $foreign.motionComponentImpl("code");
      var code = function(dictUnion) {
        return codeImpl;
      };
      var clipPathImpl = $foreign.motionComponentImpl("clipPath");
      var clipPath = function(dictUnion) {
        return clipPathImpl;
      };
      var citeImpl = $foreign.motionComponentImpl("cite");
      var cite = function(dictUnion) {
        return citeImpl;
      };
      var circleImpl = $foreign.motionComponentImpl("circle");
      var circle = function(dictUnion) {
        return circleImpl;
      };
      var captionImpl = $foreign.motionComponentImpl("caption");
      var caption = function(dictUnion) {
        return captionImpl;
      };
      var canvasImpl = $foreign.motionComponentImpl("canvas");
      var canvas = function(dictUnion) {
        return canvasImpl;
      };
      var buttonImpl = $foreign.motionComponentImpl("button");
      var button = function(dictUnion) {
        return buttonImpl;
      };
      var brImpl = $foreign.motionComponentImpl("br");
      var br = function(dictUnion) {
        return brImpl;
      };
      var bodyImpl = $foreign.motionComponentImpl("body");
      var body = function(dictUnion) {
        return bodyImpl;
      };
      var blockquoteImpl = $foreign.motionComponentImpl("blockquote");
      var blockquote = function(dictUnion) {
        return blockquoteImpl;
      };
      var bdoImpl = $foreign.motionComponentImpl("bdo");
      var bdo = function(dictUnion) {
        return bdoImpl;
      };
      var bdiImpl = $foreign.motionComponentImpl("bdi");
      var bdi = function(dictUnion) {
        return bdiImpl;
      };
      var baseImpl = $foreign.motionComponentImpl("base");
      var base = function(dictUnion) {
        return baseImpl;
      };
      var bImpl = $foreign.motionComponentImpl("b");
      var b = function(dictUnion) {
        return bImpl;
      };
      var audioImpl = $foreign.motionComponentImpl("audio");
      var audio = function(dictUnion) {
        return audioImpl;
      };
      var asideImpl = $foreign.motionComponentImpl("aside");
      var aside = function(dictUnion) {
        return asideImpl;
      };
      var articleImpl = $foreign.motionComponentImpl("article");
      var article = function(dictUnion) {
        return articleImpl;
      };
      var areaImpl = $foreign.motionComponentImpl("area");
      var area = function(dictUnion) {
        return areaImpl;
      };
      var addressImpl = $foreign.motionComponentImpl("address");
      var address = function(dictUnion) {
        return addressImpl;
      };
      var abbr = function(dictUnion) {
        return $foreign.motionComponentImpl("abbr");
      };
      var _data = function(dictUnion) {
        return $foreign.motionComponentImpl("data");
      };
      module.exports = {
        abbr,
        addressImpl,
        address,
        areaImpl,
        area,
        articleImpl,
        article,
        asideImpl,
        aside,
        audioImpl,
        audio,
        bImpl,
        b,
        baseImpl,
        base,
        bdiImpl,
        bdi,
        bdoImpl,
        bdo,
        blockquoteImpl,
        blockquote,
        bodyImpl,
        body,
        brImpl,
        br,
        buttonImpl,
        button,
        canvasImpl,
        canvas,
        captionImpl,
        caption,
        citeImpl,
        cite,
        codeImpl,
        code,
        colImpl,
        colImplImpl,
        col,
        colgroupImpl,
        colgroup,
        "_data": _data,
        datalistImpl,
        datalist,
        ddImpl,
        dd,
        delImpl,
        del,
        detailsImpl,
        details,
        dfnImpl,
        dfn,
        dialogImpl,
        dialog,
        divImpl,
        div,
        dlImpl,
        dl,
        dtImpl,
        dt,
        emImpl,
        em,
        embedImpl,
        embed,
        fieldsetImpl,
        fieldset,
        figcaptionImpl,
        figcaption,
        figureImpl,
        figure,
        footerImpl,
        footer,
        formImpl,
        form,
        h1Impl,
        h1,
        h2Impl,
        h2,
        h3Impl,
        h3,
        h4Impl,
        h4,
        h5Impl,
        h5,
        h6Impl,
        h6,
        headImpl,
        head,
        headerImpl,
        header,
        hgroupImpl,
        hgroup,
        hrImpl,
        hr,
        htmlImpl,
        html,
        iImpl,
        i,
        iframeImpl,
        iframe,
        imgImpl,
        img,
        inputImpl,
        input,
        insImpl,
        ins,
        kbdImpl,
        kbd,
        keygenImpl,
        keygen,
        labelImpl,
        label,
        legendImpl,
        legend,
        liImpl,
        li,
        linkImpl,
        link,
        mainImpl,
        main: main2,
        mapImpl,
        map,
        markImpl,
        mark,
        menuImpl,
        menu,
        menuitemImpl,
        menuitem,
        metaImpl,
        meta,
        meterImpl,
        meter,
        navImpl,
        nav,
        noscriptImpl,
        noscript,
        objectImpl,
        object,
        olImpl,
        ol,
        optgroupImpl,
        optgroup,
        optionImpl,
        option,
        outputImpl,
        output,
        pImpl,
        p,
        paramImpl,
        param,
        pictureImpl,
        picture,
        preImpl,
        pre,
        progressImpl,
        progress,
        qImpl,
        q,
        rpImpl,
        rp,
        rtImpl,
        rt,
        rubyImpl,
        ruby,
        sImpl,
        s,
        sampImpl,
        samp,
        scriptImpl,
        script,
        sectionImpl,
        section,
        selectImpl,
        select,
        smallImpl,
        small,
        sourceImpl,
        source,
        spanImpl,
        span,
        strongImpl,
        strong,
        styleImpl,
        style,
        subImpl,
        sub,
        summaryImpl,
        summary,
        supImpl,
        sup,
        tableImpl,
        table,
        tbodyImpl,
        tbody,
        tdImpl,
        td,
        textareaImpl,
        textarea,
        tfootImpl,
        tfoot,
        thImpl,
        th,
        theadImpl,
        thead,
        timeImpl,
        time,
        titleImpl,
        title,
        trImpl,
        tr,
        trackImpl,
        track,
        uImpl,
        u,
        ulImpl,
        ul,
        varImpl,
        "var": $$var,
        videoImpl,
        video,
        wbrImpl,
        wbr,
        svgAnimateImpl,
        svgAnimate,
        circleImpl,
        circle,
        clipPathImpl,
        clipPath,
        defsImpl,
        defs,
        descImpl,
        desc,
        ellipseImpl,
        ellipse,
        feBlendImpl,
        feBlend,
        feColorMatrixImpl,
        feColorMatrix,
        feComponentTransferImpl,
        feComponentTransfer,
        feCompositeImpl,
        feComposite,
        feConvolveMatrixImpl,
        feConvolveMatrix,
        feDiffuseLightingImpl,
        feDiffuseLighting,
        feDisplacementMapImpl,
        feDisplacementMap,
        feDistantLightImpl,
        feDistantLight,
        feDropShadowImpl,
        feDropShadow,
        feFloodImpl,
        feFlood,
        feFuncAImpl,
        feFuncA,
        feFuncBImpl,
        feFuncB,
        feFuncGImpl,
        feFuncG,
        feFuncRImpl,
        feFuncR,
        feGaussianBlurImpl,
        feGaussianBlur,
        feImageImpl,
        feImage,
        feMergeImpl,
        feMerge,
        feMergeNodeImpl,
        feMergeNode,
        feMorphologyImpl,
        feMorphology,
        feOffsetImpl,
        feOffset,
        fePointLightImpl,
        fePointLight,
        feSpecularLightingImpl,
        feSpecularLighting,
        feSpotLightImpl,
        feSpotLight,
        feTileImpl,
        feTile,
        feTurbulenceImpl,
        feTurbulence,
        filterImpl,
        filter,
        foreignObjectImpl,
        foreignObject,
        gImpl,
        g,
        imageImpl,
        image,
        lineImpl,
        line,
        linearGradientImpl,
        linearGradient,
        markerImpl,
        marker,
        maskImpl,
        mask,
        metadataImpl,
        metadata,
        pathImpl,
        path,
        patternImpl,
        pattern,
        polygonImpl,
        polygon,
        polylineImpl,
        polyline,
        radialGradientImpl,
        radialGradient,
        rectImpl,
        rect,
        stopImpl,
        stop,
        svgImpl,
        svg,
        svgSwitchImpl,
        svgSwitch,
        symbolImpl,
        symbol,
        textImpl,
        text,
        textPathImpl,
        textPath,
        tspanImpl,
        tspan,
        useImpl,
        use,
        viewImpl,
        view,
        motionComponentImpl: $foreign.motionComponentImpl,
        custom: $foreign.custom
      };
    }
  });

  // output/Framer.Motion.Types/foreign.js
  var require_foreign18 = __commonJS({
    "output/Framer.Motion.Types/foreign.js"(exports) {
      var framerMotion = require_framer_motion_cjs();
      exports.infinity = Infinity;
    }
  });

  // output/Effect.Uncurried/foreign.js
  var require_foreign19 = __commonJS({
    "output/Effect.Uncurried/foreign.js"(exports) {
      "use strict";
      exports.mkEffectFn1 = function mkEffectFn1(fn) {
        return function(x) {
          return fn(x)();
        };
      };
      exports.mkEffectFn2 = function mkEffectFn2(fn) {
        return function(a, b) {
          return fn(a)(b)();
        };
      };
      exports.mkEffectFn3 = function mkEffectFn3(fn) {
        return function(a, b, c) {
          return fn(a)(b)(c)();
        };
      };
      exports.mkEffectFn4 = function mkEffectFn4(fn) {
        return function(a, b, c, d) {
          return fn(a)(b)(c)(d)();
        };
      };
      exports.mkEffectFn5 = function mkEffectFn5(fn) {
        return function(a, b, c, d, e) {
          return fn(a)(b)(c)(d)(e)();
        };
      };
      exports.mkEffectFn6 = function mkEffectFn6(fn) {
        return function(a, b, c, d, e, f) {
          return fn(a)(b)(c)(d)(e)(f)();
        };
      };
      exports.mkEffectFn7 = function mkEffectFn7(fn) {
        return function(a, b, c, d, e, f, g) {
          return fn(a)(b)(c)(d)(e)(f)(g)();
        };
      };
      exports.mkEffectFn8 = function mkEffectFn8(fn) {
        return function(a, b, c, d, e, f, g, h) {
          return fn(a)(b)(c)(d)(e)(f)(g)(h)();
        };
      };
      exports.mkEffectFn9 = function mkEffectFn9(fn) {
        return function(a, b, c, d, e, f, g, h, i) {
          return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)();
        };
      };
      exports.mkEffectFn10 = function mkEffectFn10(fn) {
        return function(a, b, c, d, e, f, g, h, i, j) {
          return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)();
        };
      };
      exports.runEffectFn1 = function runEffectFn1(fn) {
        return function(a) {
          return function() {
            return fn(a);
          };
        };
      };
      exports.runEffectFn2 = function runEffectFn2(fn) {
        return function(a) {
          return function(b) {
            return function() {
              return fn(a, b);
            };
          };
        };
      };
      exports.runEffectFn3 = function runEffectFn3(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function() {
                return fn(a, b, c);
              };
            };
          };
        };
      };
      exports.runEffectFn4 = function runEffectFn4(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function() {
                  return fn(a, b, c, d);
                };
              };
            };
          };
        };
      };
      exports.runEffectFn5 = function runEffectFn5(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function() {
                    return fn(a, b, c, d, e);
                  };
                };
              };
            };
          };
        };
      };
      exports.runEffectFn6 = function runEffectFn6(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function(f) {
                    return function() {
                      return fn(a, b, c, d, e, f);
                    };
                  };
                };
              };
            };
          };
        };
      };
      exports.runEffectFn7 = function runEffectFn7(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function(f) {
                    return function(g) {
                      return function() {
                        return fn(a, b, c, d, e, f, g);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      exports.runEffectFn8 = function runEffectFn8(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function(f) {
                    return function(g) {
                      return function(h) {
                        return function() {
                          return fn(a, b, c, d, e, f, g, h);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      exports.runEffectFn9 = function runEffectFn9(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function(f) {
                    return function(g) {
                      return function(h) {
                        return function(i) {
                          return function() {
                            return fn(a, b, c, d, e, f, g, h, i);
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      exports.runEffectFn10 = function runEffectFn10(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function(f) {
                    return function(g) {
                      return function(h) {
                        return function(i) {
                          return function(j) {
                            return function() {
                              return fn(a, b, c, d, e, f, g, h, i, j);
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
  });

  // output/Effect.Uncurried/index.js
  var require_Effect4 = __commonJS({
    "output/Effect.Uncurried/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign19();
      var Data_Monoid = require_Data18();
      var Data_Semigroup = require_Data7();
      var Effect = require_Effect();
      var semigroupEffectFn9 = function(dictSemigroup) {
        return {
          append: function(f1) {
            return function(f2) {
              return $foreign.mkEffectFn9(function(a) {
                return function(b) {
                  return function(c) {
                    return function(d) {
                      return function(e) {
                        return function(f) {
                          return function(g) {
                            return function(h) {
                              return function(i) {
                                return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn9(f1)(a)(b)(c)(d)(e)(f)(g)(h)(i))($foreign.runEffectFn9(f2)(a)(b)(c)(d)(e)(f)(g)(h)(i));
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              });
            };
          }
        };
      };
      var semigroupEffectFn8 = function(dictSemigroup) {
        return {
          append: function(f1) {
            return function(f2) {
              return $foreign.mkEffectFn8(function(a) {
                return function(b) {
                  return function(c) {
                    return function(d) {
                      return function(e) {
                        return function(f) {
                          return function(g) {
                            return function(h) {
                              return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn8(f1)(a)(b)(c)(d)(e)(f)(g)(h))($foreign.runEffectFn8(f2)(a)(b)(c)(d)(e)(f)(g)(h));
                            };
                          };
                        };
                      };
                    };
                  };
                };
              });
            };
          }
        };
      };
      var semigroupEffectFn7 = function(dictSemigroup) {
        return {
          append: function(f1) {
            return function(f2) {
              return $foreign.mkEffectFn7(function(a) {
                return function(b) {
                  return function(c) {
                    return function(d) {
                      return function(e) {
                        return function(f) {
                          return function(g) {
                            return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn7(f1)(a)(b)(c)(d)(e)(f)(g))($foreign.runEffectFn7(f2)(a)(b)(c)(d)(e)(f)(g));
                          };
                        };
                      };
                    };
                  };
                };
              });
            };
          }
        };
      };
      var semigroupEffectFn6 = function(dictSemigroup) {
        return {
          append: function(f1) {
            return function(f2) {
              return $foreign.mkEffectFn6(function(a) {
                return function(b) {
                  return function(c) {
                    return function(d) {
                      return function(e) {
                        return function(f) {
                          return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn6(f1)(a)(b)(c)(d)(e)(f))($foreign.runEffectFn6(f2)(a)(b)(c)(d)(e)(f));
                        };
                      };
                    };
                  };
                };
              });
            };
          }
        };
      };
      var semigroupEffectFn5 = function(dictSemigroup) {
        return {
          append: function(f1) {
            return function(f2) {
              return $foreign.mkEffectFn5(function(a) {
                return function(b) {
                  return function(c) {
                    return function(d) {
                      return function(e) {
                        return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn5(f1)(a)(b)(c)(d)(e))($foreign.runEffectFn5(f2)(a)(b)(c)(d)(e));
                      };
                    };
                  };
                };
              });
            };
          }
        };
      };
      var semigroupEffectFn4 = function(dictSemigroup) {
        return {
          append: function(f1) {
            return function(f2) {
              return $foreign.mkEffectFn4(function(a) {
                return function(b) {
                  return function(c) {
                    return function(d) {
                      return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn4(f1)(a)(b)(c)(d))($foreign.runEffectFn4(f2)(a)(b)(c)(d));
                    };
                  };
                };
              });
            };
          }
        };
      };
      var semigroupEffectFn3 = function(dictSemigroup) {
        return {
          append: function(f1) {
            return function(f2) {
              return $foreign.mkEffectFn3(function(a) {
                return function(b) {
                  return function(c) {
                    return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn3(f1)(a)(b)(c))($foreign.runEffectFn3(f2)(a)(b)(c));
                  };
                };
              });
            };
          }
        };
      };
      var semigroupEffectFn2 = function(dictSemigroup) {
        return {
          append: function(f1) {
            return function(f2) {
              return $foreign.mkEffectFn2(function(a) {
                return function(b) {
                  return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn2(f1)(a)(b))($foreign.runEffectFn2(f2)(a)(b));
                };
              });
            };
          }
        };
      };
      var semigroupEffectFn10 = function(dictSemigroup) {
        return {
          append: function(f1) {
            return function(f2) {
              return $foreign.mkEffectFn10(function(a) {
                return function(b) {
                  return function(c) {
                    return function(d) {
                      return function(e) {
                        return function(f) {
                          return function(g) {
                            return function(h) {
                              return function(i) {
                                return function(j) {
                                  return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn10(f1)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j))($foreign.runEffectFn10(f2)(a)(b)(c)(d)(e)(f)(g)(h)(i)(j));
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              });
            };
          }
        };
      };
      var semigroupEffectFn1 = function(dictSemigroup) {
        return {
          append: function(f1) {
            return function(f2) {
              return $foreign.mkEffectFn1(function(a) {
                return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))($foreign.runEffectFn1(f1)(a))($foreign.runEffectFn1(f2)(a));
              });
            };
          }
        };
      };
      var monoidEffectFn9 = function(dictMonoid) {
        return {
          mempty: $foreign.mkEffectFn9(function(v) {
            return function(v1) {
              return function(v2) {
                return function(v3) {
                  return function(v4) {
                    return function(v5) {
                      return function(v6) {
                        return function(v7) {
                          return function(v8) {
                            return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          }),
          Semigroup0: function() {
            return semigroupEffectFn9(dictMonoid.Semigroup0());
          }
        };
      };
      var monoidEffectFn8 = function(dictMonoid) {
        return {
          mempty: $foreign.mkEffectFn8(function(v) {
            return function(v1) {
              return function(v2) {
                return function(v3) {
                  return function(v4) {
                    return function(v5) {
                      return function(v6) {
                        return function(v7) {
                          return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                        };
                      };
                    };
                  };
                };
              };
            };
          }),
          Semigroup0: function() {
            return semigroupEffectFn8(dictMonoid.Semigroup0());
          }
        };
      };
      var monoidEffectFn7 = function(dictMonoid) {
        return {
          mempty: $foreign.mkEffectFn7(function(v) {
            return function(v1) {
              return function(v2) {
                return function(v3) {
                  return function(v4) {
                    return function(v5) {
                      return function(v6) {
                        return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                      };
                    };
                  };
                };
              };
            };
          }),
          Semigroup0: function() {
            return semigroupEffectFn7(dictMonoid.Semigroup0());
          }
        };
      };
      var monoidEffectFn6 = function(dictMonoid) {
        return {
          mempty: $foreign.mkEffectFn6(function(v) {
            return function(v1) {
              return function(v2) {
                return function(v3) {
                  return function(v4) {
                    return function(v5) {
                      return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                    };
                  };
                };
              };
            };
          }),
          Semigroup0: function() {
            return semigroupEffectFn6(dictMonoid.Semigroup0());
          }
        };
      };
      var monoidEffectFn5 = function(dictMonoid) {
        return {
          mempty: $foreign.mkEffectFn5(function(v) {
            return function(v1) {
              return function(v2) {
                return function(v3) {
                  return function(v4) {
                    return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                  };
                };
              };
            };
          }),
          Semigroup0: function() {
            return semigroupEffectFn5(dictMonoid.Semigroup0());
          }
        };
      };
      var monoidEffectFn4 = function(dictMonoid) {
        return {
          mempty: $foreign.mkEffectFn4(function(v) {
            return function(v1) {
              return function(v2) {
                return function(v3) {
                  return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                };
              };
            };
          }),
          Semigroup0: function() {
            return semigroupEffectFn4(dictMonoid.Semigroup0());
          }
        };
      };
      var monoidEffectFn3 = function(dictMonoid) {
        return {
          mempty: $foreign.mkEffectFn3(function(v) {
            return function(v1) {
              return function(v2) {
                return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
              };
            };
          }),
          Semigroup0: function() {
            return semigroupEffectFn3(dictMonoid.Semigroup0());
          }
        };
      };
      var monoidEffectFn2 = function(dictMonoid) {
        return {
          mempty: $foreign.mkEffectFn2(function(v) {
            return function(v1) {
              return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
            };
          }),
          Semigroup0: function() {
            return semigroupEffectFn2(dictMonoid.Semigroup0());
          }
        };
      };
      var monoidEffectFn10 = function(dictMonoid) {
        return {
          mempty: $foreign.mkEffectFn10(function(v) {
            return function(v1) {
              return function(v2) {
                return function(v3) {
                  return function(v4) {
                    return function(v5) {
                      return function(v6) {
                        return function(v7) {
                          return function(v8) {
                            return function(v9) {
                              return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          }),
          Semigroup0: function() {
            return semigroupEffectFn10(dictMonoid.Semigroup0());
          }
        };
      };
      var monoidEffectFn1 = function(dictMonoid) {
        return {
          mempty: $foreign.mkEffectFn1(function(v) {
            return Data_Monoid.mempty(Effect.monoidEffect(dictMonoid));
          }),
          Semigroup0: function() {
            return semigroupEffectFn1(dictMonoid.Semigroup0());
          }
        };
      };
      module.exports = {
        semigroupEffectFn1,
        semigroupEffectFn2,
        semigroupEffectFn3,
        semigroupEffectFn4,
        semigroupEffectFn5,
        semigroupEffectFn6,
        semigroupEffectFn7,
        semigroupEffectFn8,
        semigroupEffectFn9,
        semigroupEffectFn10,
        monoidEffectFn1,
        monoidEffectFn2,
        monoidEffectFn3,
        monoidEffectFn4,
        monoidEffectFn5,
        monoidEffectFn6,
        monoidEffectFn7,
        monoidEffectFn8,
        monoidEffectFn9,
        monoidEffectFn10,
        mkEffectFn1: $foreign.mkEffectFn1,
        mkEffectFn2: $foreign.mkEffectFn2,
        mkEffectFn3: $foreign.mkEffectFn3,
        mkEffectFn4: $foreign.mkEffectFn4,
        mkEffectFn5: $foreign.mkEffectFn5,
        mkEffectFn6: $foreign.mkEffectFn6,
        mkEffectFn7: $foreign.mkEffectFn7,
        mkEffectFn8: $foreign.mkEffectFn8,
        mkEffectFn9: $foreign.mkEffectFn9,
        mkEffectFn10: $foreign.mkEffectFn10,
        runEffectFn1: $foreign.runEffectFn1,
        runEffectFn2: $foreign.runEffectFn2,
        runEffectFn3: $foreign.runEffectFn3,
        runEffectFn4: $foreign.runEffectFn4,
        runEffectFn5: $foreign.runEffectFn5,
        runEffectFn6: $foreign.runEffectFn6,
        runEffectFn7: $foreign.runEffectFn7,
        runEffectFn8: $foreign.runEffectFn8,
        runEffectFn9: $foreign.runEffectFn9,
        runEffectFn10: $foreign.runEffectFn10
      };
    }
  });

  // output/Foreign/foreign.js
  var require_foreign20 = __commonJS({
    "output/Foreign/foreign.js"(exports) {
      "use strict";
      exports.typeOf = function(value) {
        return typeof value;
      };
      exports.tagOf = function(value) {
        return Object.prototype.toString.call(value).slice(8, -1);
      };
      exports.isNull = function(value) {
        return value === null;
      };
      exports.isUndefined = function(value) {
        return value === void 0;
      };
      exports.isArray = Array.isArray || function(value) {
        return Object.prototype.toString.call(value) === "[object Array]";
      };
    }
  });

  // output/Data.Either/index.js
  var require_Data19 = __commonJS({
    "output/Data.Either/index.js"(exports, module) {
      "use strict";
      var Control_Alt = require_Control6();
      var Control_Apply = require_Control3();
      var Data_Bounded = require_Data13();
      var Data_Eq = require_Data8();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Data_Functor_Invariant = require_Data_Functor();
      var Data_Generic_Rep = require_Data_Generic();
      var Data_Maybe = require_Data15();
      var Data_Ord = require_Data12();
      var Data_Ordering = require_Data9();
      var Data_Semigroup = require_Data7();
      var Data_Show = require_Data14();
      var Data_Unit = require_Data3();
      var Left = function() {
        function Left2(value0) {
          this.value0 = value0;
        }
        ;
        Left2.create = function(value0) {
          return new Left2(value0);
        };
        return Left2;
      }();
      var Right = function() {
        function Right2(value0) {
          this.value0 = value0;
        }
        ;
        Right2.create = function(value0) {
          return new Right2(value0);
        };
        return Right2;
      }();
      var showEither = function(dictShow) {
        return function(dictShow1) {
          return {
            show: function(v) {
              if (v instanceof Left) {
                return "(Left " + (Data_Show.show(dictShow)(v.value0) + ")");
              }
              ;
              if (v instanceof Right) {
                return "(Right " + (Data_Show.show(dictShow1)(v.value0) + ")");
              }
              ;
              throw new Error("Failed pattern match at Data.Either (line 173, column 1 - line 175, column 46): " + [v.constructor.name]);
            }
          };
        };
      };
      var note$prime = function(f) {
        return Data_Maybe["maybe'"](function($105) {
          return Left.create(f($105));
        })(Right.create);
      };
      var note = function(a) {
        return Data_Maybe.maybe(new Left(a))(Right.create);
      };
      var genericEither = {
        to: function(x) {
          if (x instanceof Data_Generic_Rep.Inl) {
            return new Left(x.value0);
          }
          ;
          if (x instanceof Data_Generic_Rep.Inr) {
            return new Right(x.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Either (line 33, column 1 - line 33, column 56): " + [x.constructor.name]);
        },
        from: function(x) {
          if (x instanceof Left) {
            return new Data_Generic_Rep.Inl(x.value0);
          }
          ;
          if (x instanceof Right) {
            return new Data_Generic_Rep.Inr(x.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Either (line 33, column 1 - line 33, column 56): " + [x.constructor.name]);
        }
      };
      var functorEither = {
        map: function(f) {
          return function(m) {
            if (m instanceof Left) {
              return new Left(m.value0);
            }
            ;
            if (m instanceof Right) {
              return new Right(f(m.value0));
            }
            ;
            throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [m.constructor.name]);
          };
        }
      };
      var invariantEither = {
        imap: Data_Functor_Invariant.imapF(functorEither)
      };
      var fromRight$prime = function(v) {
        return function(v1) {
          if (v1 instanceof Right) {
            return v1.value0;
          }
          ;
          return v(Data_Unit.unit);
        };
      };
      var fromRight = function(v) {
        return function(v1) {
          if (v1 instanceof Right) {
            return v1.value0;
          }
          ;
          return v;
        };
      };
      var fromLeft$prime = function(v) {
        return function(v1) {
          if (v1 instanceof Left) {
            return v1.value0;
          }
          ;
          return v(Data_Unit.unit);
        };
      };
      var fromLeft = function(v) {
        return function(v1) {
          if (v1 instanceof Left) {
            return v1.value0;
          }
          ;
          return v;
        };
      };
      var extendEither = {
        extend: function(v) {
          return function(v1) {
            if (v1 instanceof Left) {
              return new Left(v1.value0);
            }
            ;
            return new Right(v(v1));
          };
        },
        Functor0: function() {
          return functorEither;
        }
      };
      var eqEither = function(dictEq) {
        return function(dictEq1) {
          return {
            eq: function(x) {
              return function(y) {
                if (x instanceof Left && y instanceof Left) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                }
                ;
                if (x instanceof Right && y instanceof Right) {
                  return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                }
                ;
                return false;
              };
            }
          };
        };
      };
      var ordEither = function(dictOrd) {
        return function(dictOrd1) {
          return {
            compare: function(x) {
              return function(y) {
                if (x instanceof Left && y instanceof Left) {
                  return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                }
                ;
                if (x instanceof Left) {
                  return Data_Ordering.LT.value;
                }
                ;
                if (y instanceof Left) {
                  return Data_Ordering.GT.value;
                }
                ;
                if (x instanceof Right && y instanceof Right) {
                  return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                }
                ;
                throw new Error("Failed pattern match at Data.Either (line 189, column 1 - line 189, column 64): " + [x.constructor.name, y.constructor.name]);
              };
            },
            Eq0: function() {
              return eqEither(dictOrd.Eq0())(dictOrd1.Eq0());
            }
          };
        };
      };
      var eq1Either = function(dictEq) {
        return {
          eq1: function(dictEq1) {
            return Data_Eq.eq(eqEither(dictEq)(dictEq1));
          }
        };
      };
      var ord1Either = function(dictOrd) {
        return {
          compare1: function(dictOrd1) {
            return Data_Ord.compare(ordEither(dictOrd)(dictOrd1));
          },
          Eq10: function() {
            return eq1Either(dictOrd.Eq0());
          }
        };
      };
      var either = function(v) {
        return function(v1) {
          return function(v2) {
            if (v2 instanceof Left) {
              return v(v2.value0);
            }
            ;
            if (v2 instanceof Right) {
              return v1(v2.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
          };
        };
      };
      var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
      var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
      var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
      var choose = function(dictAlt) {
        return function(a) {
          return function(b) {
            return Control_Alt.alt(dictAlt)(Data_Functor.map(dictAlt.Functor0())(Left.create)(a))(Data_Functor.map(dictAlt.Functor0())(Right.create)(b));
          };
        };
      };
      var boundedEither = function(dictBounded) {
        return function(dictBounded1) {
          return {
            top: new Right(Data_Bounded.top(dictBounded1)),
            bottom: new Left(Data_Bounded.bottom(dictBounded)),
            Ord0: function() {
              return ordEither(dictBounded.Ord0())(dictBounded1.Ord0());
            }
          };
        };
      };
      var applyEither = {
        apply: function(v) {
          return function(v1) {
            if (v instanceof Left) {
              return new Left(v.value0);
            }
            ;
            if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
            }
            ;
            throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [v.constructor.name, v1.constructor.name]);
          };
        },
        Functor0: function() {
          return functorEither;
        }
      };
      var bindEither = {
        bind: either(function(e) {
          return function(v) {
            return new Left(e);
          };
        })(function(a) {
          return function(f) {
            return f(a);
          };
        }),
        Apply0: function() {
          return applyEither;
        }
      };
      var semigroupEither = function(dictSemigroup) {
        return {
          append: function(x) {
            return function(y) {
              return Control_Apply.apply(applyEither)(Data_Functor.map(functorEither)(Data_Semigroup.append(dictSemigroup))(x))(y);
            };
          }
        };
      };
      var applicativeEither = {
        pure: Right.create,
        Apply0: function() {
          return applyEither;
        }
      };
      var monadEither = {
        Applicative0: function() {
          return applicativeEither;
        },
        Bind1: function() {
          return bindEither;
        }
      };
      var altEither = {
        alt: function(v) {
          return function(v1) {
            if (v instanceof Left) {
              return v1;
            }
            ;
            return v;
          };
        },
        Functor0: function() {
          return functorEither;
        }
      };
      module.exports = {
        Left,
        Right,
        either,
        choose,
        isLeft,
        isRight,
        fromLeft,
        "fromLeft'": fromLeft$prime,
        fromRight,
        "fromRight'": fromRight$prime,
        note,
        "note'": note$prime,
        hush,
        functorEither,
        genericEither,
        invariantEither,
        applyEither,
        applicativeEither,
        altEither,
        bindEither,
        monadEither,
        extendEither,
        showEither,
        eqEither,
        eq1Either,
        ordEither,
        ord1Either,
        boundedEither,
        semigroupEither
      };
    }
  });

  // output/Effect.Exception/foreign.js
  var require_foreign21 = __commonJS({
    "output/Effect.Exception/foreign.js"(exports) {
      "use strict";
      exports.showErrorImpl = function(err) {
        return err.stack || err.toString();
      };
      exports.error = function(msg) {
        return new Error(msg);
      };
      exports.message = function(e) {
        return e.message;
      };
      exports.name = function(e) {
        return e.name || "Error";
      };
      exports.stackImpl = function(just) {
        return function(nothing) {
          return function(e) {
            return e.stack ? just(e.stack) : nothing;
          };
        };
      };
      exports.throwException = function(e) {
        return function() {
          throw e;
        };
      };
      exports.catchException = function(c) {
        return function(t) {
          return function() {
            try {
              return t();
            } catch (e) {
              if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
                return c(e)();
              } else {
                return c(new Error(e.toString()))();
              }
            }
          };
        };
      };
    }
  });

  // output/Effect.Exception/index.js
  var require_Effect5 = __commonJS({
    "output/Effect.Exception/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign21();
      var Control_Applicative = require_Control4();
      var Data_Either = require_Data19();
      var Data_Functor = require_Data4();
      var Data_Maybe = require_Data15();
      var Effect = require_Effect();
      var $$try = function(action) {
        return $foreign.catchException(function() {
          var $0 = Control_Applicative.pure(Effect.applicativeEffect);
          return function($1) {
            return $0(Data_Either.Left.create($1));
          };
        }())(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
      };
      var $$throw = function($2) {
        return $foreign.throwException($foreign.error($2));
      };
      var stack = $foreign.stackImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
      var showError = {
        show: $foreign.showErrorImpl
      };
      module.exports = {
        stack,
        "throw": $$throw,
        "try": $$try,
        showError,
        error: $foreign.error,
        message: $foreign.message,
        name: $foreign.name,
        throwException: $foreign.throwException,
        catchException: $foreign.catchException
      };
    }
  });

  // output/Control.Monad.Error.Class/index.js
  var require_Control_Monad_Error = __commonJS({
    "output/Control.Monad.Error.Class/index.js"(exports, module) {
      "use strict";
      var Control_Applicative = require_Control4();
      var Control_Bind = require_Control5();
      var Data_Either = require_Data19();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Data_Maybe = require_Data15();
      var Data_Unit = require_Data3();
      var Effect = require_Effect();
      var Effect_Exception = require_Effect5();
      var throwError = function(dict) {
        return dict.throwError;
      };
      var monadThrowMaybe = {
        throwError: Data_Function["const"](Data_Maybe.Nothing.value),
        Monad0: function() {
          return Data_Maybe.monadMaybe;
        }
      };
      var monadThrowEither = {
        throwError: Data_Either.Left.create,
        Monad0: function() {
          return Data_Either.monadEither;
        }
      };
      var monadThrowEffect = {
        throwError: Effect_Exception.throwException,
        Monad0: function() {
          return Effect.monadEffect;
        }
      };
      var monadErrorMaybe = {
        catchError: function(v) {
          return function(v1) {
            if (v instanceof Data_Maybe.Nothing) {
              return v1(Data_Unit.unit);
            }
            ;
            if (v instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(v.value0);
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Error.Class (line 79, column 1 - line 81, column 33): " + [v.constructor.name, v1.constructor.name]);
          };
        },
        MonadThrow0: function() {
          return monadThrowMaybe;
        }
      };
      var monadErrorEither = {
        catchError: function(v) {
          return function(v1) {
            if (v instanceof Data_Either.Left) {
              return v1(v.value0);
            }
            ;
            if (v instanceof Data_Either.Right) {
              return new Data_Either.Right(v.value0);
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Error.Class (line 72, column 1 - line 74, column 35): " + [v.constructor.name, v1.constructor.name]);
          };
        },
        MonadThrow0: function() {
          return monadThrowEither;
        }
      };
      var monadErrorEffect = {
        catchError: Data_Function.flip(Effect_Exception.catchException),
        MonadThrow0: function() {
          return monadThrowEffect;
        }
      };
      var liftMaybe = function(dictMonadThrow) {
        return function(error) {
          return Data_Maybe.maybe(throwError(dictMonadThrow)(error))(Control_Applicative.pure(dictMonadThrow.Monad0().Applicative0()));
        };
      };
      var liftEither = function(dictMonadThrow) {
        return Data_Either.either(throwError(dictMonadThrow))(Control_Applicative.pure(dictMonadThrow.Monad0().Applicative0()));
      };
      var catchError = function(dict) {
        return dict.catchError;
      };
      var catchJust = function(dictMonadError) {
        return function(p) {
          return function(act) {
            return function(handler) {
              var handle = function(e) {
                var v = p(e);
                if (v instanceof Data_Maybe.Nothing) {
                  return throwError(dictMonadError.MonadThrow0())(e);
                }
                ;
                if (v instanceof Data_Maybe.Just) {
                  return handler(v.value0);
                }
                ;
                throw new Error("Failed pattern match at Control.Monad.Error.Class (line 57, column 5 - line 59, column 26): " + [v.constructor.name]);
              };
              return catchError(dictMonadError)(act)(handle);
            };
          };
        };
      };
      var $$try = function(dictMonadError) {
        return function(a) {
          return catchError(dictMonadError)(Data_Functor.map(dictMonadError.MonadThrow0().Monad0().Bind1().Apply0().Functor0())(Data_Either.Right.create)(a))(function() {
            var $21 = Control_Applicative.pure(dictMonadError.MonadThrow0().Monad0().Applicative0());
            return function($22) {
              return $21(Data_Either.Left.create($22));
            };
          }());
        };
      };
      var withResource = function(dictMonadError) {
        return function(acquire) {
          return function(release) {
            return function(kleisli) {
              return Control_Bind.bind(dictMonadError.MonadThrow0().Monad0().Bind1())(acquire)(function(resource) {
                return Control_Bind.bind(dictMonadError.MonadThrow0().Monad0().Bind1())($$try(dictMonadError)(kleisli(resource)))(function(result) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(dictMonadError.MonadThrow0().Monad0().Bind1())(release(resource))(function() {
                    return Data_Either.either(throwError(dictMonadError.MonadThrow0()))(Control_Applicative.pure(dictMonadError.MonadThrow0().Monad0().Applicative0()))(result);
                  });
                });
              });
            };
          };
        };
      };
      module.exports = {
        catchError,
        throwError,
        catchJust,
        "try": $$try,
        withResource,
        liftMaybe,
        liftEither,
        monadThrowEither,
        monadErrorEither,
        monadThrowMaybe,
        monadErrorMaybe,
        monadThrowEffect,
        monadErrorEffect
      };
    }
  });

  // output/Control.Monad.Cont.Class/index.js
  var require_Control_Monad_Cont = __commonJS({
    "output/Control.Monad.Cont.Class/index.js"(exports, module) {
      "use strict";
      var callCC = function(dict) {
        return dict.callCC;
      };
      module.exports = {
        callCC
      };
    }
  });

  // output/Control.Monad.Reader.Class/index.js
  var require_Control_Monad_Reader = __commonJS({
    "output/Control.Monad.Reader.Class/index.js"(exports, module) {
      "use strict";
      var Control_Category = require_Control2();
      var Control_Monad = require_Control7();
      var Control_Semigroupoid = require_Control();
      var Data_Functor = require_Data4();
      var monadAskFun = {
        ask: Control_Category.identity(Control_Category.categoryFn),
        Monad0: function() {
          return Control_Monad.monadFn;
        }
      };
      var monadReaderFun = {
        local: Control_Semigroupoid.composeFlipped(Control_Semigroupoid.semigroupoidFn),
        MonadAsk0: function() {
          return monadAskFun;
        }
      };
      var local = function(dict) {
        return dict.local;
      };
      var ask = function(dict) {
        return dict.ask;
      };
      var asks = function(dictMonadAsk) {
        return function(f) {
          return Data_Functor.map(dictMonadAsk.Monad0().Bind1().Apply0().Functor0())(f)(ask(dictMonadAsk));
        };
      };
      module.exports = {
        ask,
        local,
        asks,
        monadAskFun,
        monadReaderFun
      };
    }
  });

  // output/Data.Identity/index.js
  var require_Data20 = __commonJS({
    "output/Data.Identity/index.js"(exports, module) {
      "use strict";
      var Data_Eq = require_Data8();
      var Data_Functor_Invariant = require_Data_Functor();
      var Data_Ord = require_Data12();
      var Data_Show = require_Data14();
      var Identity = function(x) {
        return x;
      };
      var showIdentity = function(dictShow) {
        return {
          show: function(v) {
            return "(Identity " + (Data_Show.show(dictShow)(v) + ")");
          }
        };
      };
      var semiringIdentity = function(dictSemiring) {
        return dictSemiring;
      };
      var semigroupIdenity = function(dictSemigroup) {
        return dictSemigroup;
      };
      var ringIdentity = function(dictRing) {
        return dictRing;
      };
      var ordIdentity = function(dictOrd) {
        return dictOrd;
      };
      var newtypeIdentity = {
        Coercible0: function() {
          return void 0;
        }
      };
      var monoidIdentity = function(dictMonoid) {
        return dictMonoid;
      };
      var lazyIdentity = function(dictLazy) {
        return dictLazy;
      };
      var heytingAlgebraIdentity = function(dictHeytingAlgebra) {
        return dictHeytingAlgebra;
      };
      var functorIdentity = {
        map: function(f) {
          return function(m) {
            return f(m);
          };
        }
      };
      var invariantIdentity = {
        imap: Data_Functor_Invariant.imapF(functorIdentity)
      };
      var extendIdentity = {
        extend: function(f) {
          return function(m) {
            return f(m);
          };
        },
        Functor0: function() {
          return functorIdentity;
        }
      };
      var euclideanRingIdentity = function(dictEuclideanRing) {
        return dictEuclideanRing;
      };
      var eqIdentity = function(dictEq) {
        return dictEq;
      };
      var eq1Identity = {
        eq1: function(dictEq) {
          return Data_Eq.eq(eqIdentity(dictEq));
        }
      };
      var ord1Identity = {
        compare1: function(dictOrd) {
          return Data_Ord.compare(ordIdentity(dictOrd));
        },
        Eq10: function() {
          return eq1Identity;
        }
      };
      var comonadIdentity = {
        extract: function(v) {
          return v;
        },
        Extend0: function() {
          return extendIdentity;
        }
      };
      var commutativeRingIdentity = function(dictCommutativeRing) {
        return dictCommutativeRing;
      };
      var boundedIdentity = function(dictBounded) {
        return dictBounded;
      };
      var booleanAlgebraIdentity = function(dictBooleanAlgebra) {
        return dictBooleanAlgebra;
      };
      var applyIdentity = {
        apply: function(v) {
          return function(v1) {
            return v(v1);
          };
        },
        Functor0: function() {
          return functorIdentity;
        }
      };
      var bindIdentity = {
        bind: function(v) {
          return function(f) {
            return f(v);
          };
        },
        Apply0: function() {
          return applyIdentity;
        }
      };
      var applicativeIdentity = {
        pure: Identity,
        Apply0: function() {
          return applyIdentity;
        }
      };
      var monadIdentity = {
        Applicative0: function() {
          return applicativeIdentity;
        },
        Bind1: function() {
          return bindIdentity;
        }
      };
      var altIdentity = {
        alt: function(x) {
          return function(v) {
            return x;
          };
        },
        Functor0: function() {
          return functorIdentity;
        }
      };
      module.exports = {
        Identity,
        newtypeIdentity,
        eqIdentity,
        ordIdentity,
        boundedIdentity,
        heytingAlgebraIdentity,
        booleanAlgebraIdentity,
        semigroupIdenity,
        monoidIdentity,
        semiringIdentity,
        euclideanRingIdentity,
        ringIdentity,
        commutativeRingIdentity,
        lazyIdentity,
        showIdentity,
        eq1Identity,
        ord1Identity,
        functorIdentity,
        invariantIdentity,
        altIdentity,
        applyIdentity,
        applicativeIdentity,
        bindIdentity,
        monadIdentity,
        extendIdentity,
        comonadIdentity
      };
    }
  });

  // output/Effect.Ref/foreign.js
  var require_foreign22 = __commonJS({
    "output/Effect.Ref/foreign.js"(exports) {
      "use strict";
      exports.new = function(val) {
        return function() {
          return { value: val };
        };
      };
      exports.newWithSelf = function(f) {
        return function() {
          var ref = { value: null };
          ref.value = f(ref);
          return ref;
        };
      };
      exports.read = function(ref) {
        return function() {
          return ref.value;
        };
      };
      exports.modifyImpl = function(f) {
        return function(ref) {
          return function() {
            var t = f(ref.value);
            ref.value = t.state;
            return t.value;
          };
        };
      };
      exports.write = function(val) {
        return function(ref) {
          return function() {
            ref.value = val;
          };
        };
      };
    }
  });

  // output/Effect.Ref/index.js
  var require_Effect6 = __commonJS({
    "output/Effect.Ref/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign22();
      var Data_Functor = require_Data4();
      var Effect = require_Effect();
      var modify$prime = $foreign.modifyImpl;
      var modify = function(f) {
        return modify$prime(function(s) {
          var s$prime = f(s);
          return {
            state: s$prime,
            value: s$prime
          };
        });
      };
      var modify_ = function(f) {
        return function(s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
        };
      };
      module.exports = {
        "modify'": modify$prime,
        modify,
        modify_,
        "new": $foreign["new"],
        newWithSelf: $foreign.newWithSelf,
        read: $foreign.read,
        write: $foreign.write
      };
    }
  });

  // output/Control.Monad.Rec.Class/index.js
  var require_Control_Monad_Rec = __commonJS({
    "output/Control.Monad.Rec.Class/index.js"(exports, module) {
      "use strict";
      var Control_Bind = require_Control5();
      var Control_Monad = require_Control7();
      var Data_Either = require_Data19();
      var Data_Functor = require_Data4();
      var Data_Identity = require_Data20();
      var Data_Maybe = require_Data15();
      var Data_Monoid = require_Data18();
      var Data_Semigroup = require_Data7();
      var Data_Unit = require_Data3();
      var Effect = require_Effect();
      var Effect_Ref = require_Effect6();
      var Loop = function() {
        function Loop2(value0) {
          this.value0 = value0;
        }
        ;
        Loop2.create = function(value0) {
          return new Loop2(value0);
        };
        return Loop2;
      }();
      var Done = function() {
        function Done2(value0) {
          this.value0 = value0;
        }
        ;
        Done2.create = function(value0) {
          return new Done2(value0);
        };
        return Done2;
      }();
      var tailRecM = function(dict) {
        return dict.tailRecM;
      };
      var tailRecM2 = function(dictMonadRec) {
        return function(f) {
          return function(a) {
            return function(b) {
              return tailRecM(dictMonadRec)(function(o) {
                return f(o.a)(o.b);
              })({
                a,
                b
              });
            };
          };
        };
      };
      var tailRecM3 = function(dictMonadRec) {
        return function(f) {
          return function(a) {
            return function(b) {
              return function(c) {
                return tailRecM(dictMonadRec)(function(o) {
                  return f(o.a)(o.b)(o.c);
                })({
                  a,
                  b,
                  c
                });
              };
            };
          };
        };
      };
      var untilJust = function(dictMonadRec) {
        return function(m) {
          return tailRecM(dictMonadRec)(function(v) {
            return Data_Functor.mapFlipped(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(m)(function(v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                return new Loop(Data_Unit.unit);
              }
              ;
              if (v1 instanceof Data_Maybe.Just) {
                return new Done(v1.value0);
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 155, column 43 - line 157, column 19): " + [v1.constructor.name]);
            });
          })(Data_Unit.unit);
        };
      };
      var whileJust = function(dictMonoid) {
        return function(dictMonadRec) {
          return function(m) {
            return tailRecM(dictMonadRec)(function(v) {
              return Data_Functor.mapFlipped(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(m)(function(v1) {
                if (v1 instanceof Data_Maybe.Nothing) {
                  return new Done(v);
                }
                ;
                if (v1 instanceof Data_Maybe.Just) {
                  return Loop.create(Data_Semigroup.append(dictMonoid.Semigroup0())(v)(v1.value0));
                }
                ;
                throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 148, column 45 - line 150, column 26): " + [v1.constructor.name]);
              });
            })(Data_Monoid.mempty(dictMonoid));
          };
        };
      };
      var tailRec = function(f) {
        var go = function($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
            if (v instanceof Loop) {
              $copy_v = f(v.value0);
              return;
            }
            ;
            if (v instanceof Done) {
              $tco_done = true;
              return v.value0;
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 93, column 3 - line 93, column 25): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
          }
          ;
          return $tco_result;
        };
        return function($59) {
          return go(f($59));
        };
      };
      var monadRecMaybe = {
        tailRecM: function(f) {
          return function(a0) {
            var g = function(v) {
              if (v instanceof Data_Maybe.Nothing) {
                return new Done(Data_Maybe.Nothing.value);
              }
              ;
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Loop) {
                return new Loop(f(v.value0.value0));
              }
              ;
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Done) {
                return new Done(new Data_Maybe.Just(v.value0.value0));
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 129, column 7 - line 129, column 31): " + [v.constructor.name]);
            };
            return tailRec(g)(f(a0));
          };
        },
        Monad0: function() {
          return Data_Maybe.monadMaybe;
        }
      };
      var monadRecIdentity = {
        tailRecM: function(f) {
          var runIdentity = function(v) {
            return v;
          };
          var $60 = tailRec(function($62) {
            return runIdentity(f($62));
          });
          return function($61) {
            return Data_Identity.Identity($60($61));
          };
        },
        Monad0: function() {
          return Data_Identity.monadIdentity;
        }
      };
      var monadRecFunction = {
        tailRecM: function(f) {
          return function(a0) {
            return function(e) {
              return tailRec(function(a) {
                return f(a)(e);
              })(a0);
            };
          };
        },
        Monad0: function() {
          return Control_Monad.monadFn;
        }
      };
      var monadRecEither = {
        tailRecM: function(f) {
          return function(a0) {
            var g = function(v) {
              if (v instanceof Data_Either.Left) {
                return new Done(new Data_Either.Left(v.value0));
              }
              ;
              if (v instanceof Data_Either.Right && v.value0 instanceof Loop) {
                return new Loop(f(v.value0.value0));
              }
              ;
              if (v instanceof Data_Either.Right && v.value0 instanceof Done) {
                return new Done(new Data_Either.Right(v.value0.value0));
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 121, column 7 - line 121, column 33): " + [v.constructor.name]);
            };
            return tailRec(g)(f(a0));
          };
        },
        Monad0: function() {
          return Data_Either.monadEither;
        }
      };
      var monadRecEffect = {
        tailRecM: function(f) {
          return function(a) {
            var fromDone = function(v) {
              if (v instanceof Done) {
                return v.value0;
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [v.constructor.name]);
            };
            return function __do() {
              var r = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
              (function() {
                while (!function __do2() {
                  var v = Effect_Ref.read(r)();
                  if (v instanceof Loop) {
                    var e = f(v.value0)();
                    Effect_Ref.write(e)(r)();
                    return false;
                  }
                  ;
                  if (v instanceof Done) {
                    return true;
                  }
                  ;
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [v.constructor.name]);
                }()) {
                }
                ;
                return {};
              })();
              return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(r))();
            };
          };
        },
        Monad0: function() {
          return Effect.monadEffect;
        }
      };
      var functorStep = {
        map: function(f) {
          return function(m) {
            if (m instanceof Loop) {
              return new Loop(m.value0);
            }
            ;
            if (m instanceof Done) {
              return new Done(f(m.value0));
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 27, column 1 - line 27, column 48): " + [m.constructor.name]);
          };
        }
      };
      var forever = function(dictMonadRec) {
        return function(ma) {
          return tailRecM(dictMonadRec)(function(u) {
            return Data_Functor.voidRight(dictMonadRec.Monad0().Bind1().Apply0().Functor0())(new Loop(u))(ma);
          })(Data_Unit.unit);
        };
      };
      var bifunctorStep = {
        bimap: function(v) {
          return function(v1) {
            return function(v2) {
              if (v2 instanceof Loop) {
                return new Loop(v(v2.value0));
              }
              ;
              if (v2 instanceof Done) {
                return new Done(v1(v2.value0));
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 29, column 1 - line 31, column 34): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
            };
          };
        }
      };
      module.exports = {
        Loop,
        Done,
        tailRec,
        tailRecM,
        tailRecM2,
        tailRecM3,
        forever,
        whileJust,
        untilJust,
        functorStep,
        bifunctorStep,
        monadRecIdentity,
        monadRecEffect,
        monadRecFunction,
        monadRecEither,
        monadRecMaybe
      };
    }
  });

  // output/Control.Lazy/index.js
  var require_Control8 = __commonJS({
    "output/Control.Lazy/index.js"(exports, module) {
      "use strict";
      var Data_Unit = require_Data3();
      var lazyUnit = {
        defer: function(v) {
          return Data_Unit.unit;
        }
      };
      var lazyFn = {
        defer: function(f) {
          return function(x) {
            return f(Data_Unit.unit)(x);
          };
        }
      };
      var defer = function(dict) {
        return dict.defer;
      };
      var fix = function(dictLazy) {
        return function(f) {
          var go = defer(dictLazy)(function(v) {
            return f(go);
          });
          return go;
        };
      };
      module.exports = {
        defer,
        fix,
        lazyFn,
        lazyUnit
      };
    }
  });

  // output/Data.HeytingAlgebra/foreign.js
  var require_foreign23 = __commonJS({
    "output/Data.HeytingAlgebra/foreign.js"(exports) {
      "use strict";
      exports.boolConj = function(b1) {
        return function(b2) {
          return b1 && b2;
        };
      };
      exports.boolDisj = function(b1) {
        return function(b2) {
          return b1 || b2;
        };
      };
      exports.boolNot = function(b) {
        return !b;
      };
    }
  });

  // output/Data.HeytingAlgebra/index.js
  var require_Data21 = __commonJS({
    "output/Data.HeytingAlgebra/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign23();
      var Data_Symbol = require_Data5();
      var Data_Unit = require_Data3();
      var Record_Unsafe = require_Record();
      var Type_Proxy = require_Type();
      var ttRecord = function(dict) {
        return dict.ttRecord;
      };
      var tt = function(dict) {
        return dict.tt;
      };
      var notRecord = function(dict) {
        return dict.notRecord;
      };
      var not = function(dict) {
        return dict.not;
      };
      var impliesRecord = function(dict) {
        return dict.impliesRecord;
      };
      var implies = function(dict) {
        return dict.implies;
      };
      var heytingAlgebraUnit = {
        ff: Data_Unit.unit,
        tt: Data_Unit.unit,
        implies: function(v) {
          return function(v1) {
            return Data_Unit.unit;
          };
        },
        conj: function(v) {
          return function(v1) {
            return Data_Unit.unit;
          };
        },
        disj: function(v) {
          return function(v1) {
            return Data_Unit.unit;
          };
        },
        not: function(v) {
          return Data_Unit.unit;
        }
      };
      var heytingAlgebraRecordNil = {
        conjRecord: function(v) {
          return function(v1) {
            return function(v2) {
              return {};
            };
          };
        },
        disjRecord: function(v) {
          return function(v1) {
            return function(v2) {
              return {};
            };
          };
        },
        ffRecord: function(v) {
          return function(v1) {
            return {};
          };
        },
        impliesRecord: function(v) {
          return function(v1) {
            return function(v2) {
              return {};
            };
          };
        },
        notRecord: function(v) {
          return function(v1) {
            return {};
          };
        },
        ttRecord: function(v) {
          return function(v1) {
            return {};
          };
        }
      };
      var heytingAlgebraProxy3 = {
        conj: function(v) {
          return function(v1) {
            return Type_Proxy.Proxy3.value;
          };
        },
        disj: function(v) {
          return function(v1) {
            return Type_Proxy.Proxy3.value;
          };
        },
        implies: function(v) {
          return function(v1) {
            return Type_Proxy.Proxy3.value;
          };
        },
        ff: Type_Proxy.Proxy3.value,
        not: function(v) {
          return Type_Proxy.Proxy3.value;
        },
        tt: Type_Proxy.Proxy3.value
      };
      var heytingAlgebraProxy2 = {
        conj: function(v) {
          return function(v1) {
            return Type_Proxy.Proxy2.value;
          };
        },
        disj: function(v) {
          return function(v1) {
            return Type_Proxy.Proxy2.value;
          };
        },
        implies: function(v) {
          return function(v1) {
            return Type_Proxy.Proxy2.value;
          };
        },
        ff: Type_Proxy.Proxy2.value,
        not: function(v) {
          return Type_Proxy.Proxy2.value;
        },
        tt: Type_Proxy.Proxy2.value
      };
      var heytingAlgebraProxy = {
        conj: function(v) {
          return function(v1) {
            return Type_Proxy["Proxy"].value;
          };
        },
        disj: function(v) {
          return function(v1) {
            return Type_Proxy["Proxy"].value;
          };
        },
        implies: function(v) {
          return function(v1) {
            return Type_Proxy["Proxy"].value;
          };
        },
        ff: Type_Proxy["Proxy"].value,
        not: function(v) {
          return Type_Proxy["Proxy"].value;
        },
        tt: Type_Proxy["Proxy"].value
      };
      var ffRecord = function(dict) {
        return dict.ffRecord;
      };
      var ff = function(dict) {
        return dict.ff;
      };
      var disjRecord = function(dict) {
        return dict.disjRecord;
      };
      var disj = function(dict) {
        return dict.disj;
      };
      var heytingAlgebraBoolean = {
        ff: false,
        tt: true,
        implies: function(a) {
          return function(b) {
            return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
          };
        },
        conj: $foreign.boolConj,
        disj: $foreign.boolDisj,
        not: $foreign.boolNot
      };
      var conjRecord = function(dict) {
        return dict.conjRecord;
      };
      var heytingAlgebraRecord = function(dictRowToList) {
        return function(dictHeytingAlgebraRecord) {
          return {
            ff: ffRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
            tt: ttRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value),
            conj: conjRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value),
            disj: disjRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value),
            implies: impliesRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value),
            not: notRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)
          };
        };
      };
      var conj = function(dict) {
        return dict.conj;
      };
      var heytingAlgebraFunction = function(dictHeytingAlgebra) {
        return {
          ff: function(v) {
            return ff(dictHeytingAlgebra);
          },
          tt: function(v) {
            return tt(dictHeytingAlgebra);
          },
          implies: function(f) {
            return function(g) {
              return function(a) {
                return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
            };
          },
          conj: function(f) {
            return function(g) {
              return function(a) {
                return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
            };
          },
          disj: function(f) {
            return function(g) {
              return function(a) {
                return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
            };
          },
          not: function(f) {
            return function(a) {
              return not(dictHeytingAlgebra)(f(a));
            };
          }
        };
      };
      var heytingAlgebraRecordCons = function(dictIsSymbol) {
        return function(dictCons) {
          return function(dictHeytingAlgebraRecord) {
            return function(dictHeytingAlgebra) {
              return {
                conjRecord: function(v) {
                  return function(ra) {
                    return function(rb) {
                      var tail = conjRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      var get = Record_Unsafe.unsafeGet(key);
                      return insert(conj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                    };
                  };
                },
                disjRecord: function(v) {
                  return function(ra) {
                    return function(rb) {
                      var tail = disjRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      var get = Record_Unsafe.unsafeGet(key);
                      return insert(disj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                    };
                  };
                },
                impliesRecord: function(v) {
                  return function(ra) {
                    return function(rb) {
                      var tail = impliesRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(ra)(rb);
                      var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                      var insert = Record_Unsafe.unsafeSet(key);
                      var get = Record_Unsafe.unsafeGet(key);
                      return insert(implies(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);
                    };
                  };
                },
                ffRecord: function(v) {
                  return function(row) {
                    var tail = ffRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(row);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    return insert(ff(dictHeytingAlgebra))(tail);
                  };
                },
                notRecord: function(v) {
                  return function(row) {
                    var tail = notRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(row);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    var get = Record_Unsafe.unsafeGet(key);
                    return insert(not(dictHeytingAlgebra)(get(row)))(tail);
                  };
                },
                ttRecord: function(v) {
                  return function(row) {
                    var tail = ttRecord(dictHeytingAlgebraRecord)(Type_Proxy["Proxy"].value)(row);
                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value);
                    var insert = Record_Unsafe.unsafeSet(key);
                    return insert(tt(dictHeytingAlgebra))(tail);
                  };
                }
              };
            };
          };
        };
      };
      module.exports = {
        tt,
        ff,
        implies,
        conj,
        disj,
        not,
        ffRecord,
        ttRecord,
        impliesRecord,
        conjRecord,
        disjRecord,
        notRecord,
        heytingAlgebraBoolean,
        heytingAlgebraUnit,
        heytingAlgebraFunction,
        heytingAlgebraProxy,
        heytingAlgebraProxy2,
        heytingAlgebraProxy3,
        heytingAlgebraRecord,
        heytingAlgebraRecordNil,
        heytingAlgebraRecordCons
      };
    }
  });

  // output/Data.Tuple/index.js
  var require_Data22 = __commonJS({
    "output/Data.Tuple/index.js"(exports, module) {
      "use strict";
      var Control_Lazy = require_Control8();
      var Data_Bounded = require_Data13();
      var Data_Eq = require_Data8();
      var Data_Functor_Invariant = require_Data_Functor();
      var Data_Generic_Rep = require_Data_Generic();
      var Data_HeytingAlgebra = require_Data21();
      var Data_Monoid = require_Data18();
      var Data_Ord = require_Data12();
      var Data_Ordering = require_Data9();
      var Data_Ring = require_Data11();
      var Data_Semigroup = require_Data7();
      var Data_Semiring = require_Data10();
      var Data_Show = require_Data14();
      var Data_Unit = require_Data3();
      var Tuple = function() {
        function Tuple2(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
        }
        ;
        Tuple2.create = function(value0) {
          return function(value1) {
            return new Tuple2(value0, value1);
          };
        };
        return Tuple2;
      }();
      var uncurry = function(f) {
        return function(v) {
          return f(v.value0)(v.value1);
        };
      };
      var swap = function(v) {
        return new Tuple(v.value1, v.value0);
      };
      var snd = function(v) {
        return v.value1;
      };
      var showTuple = function(dictShow) {
        return function(dictShow1) {
          return {
            show: function(v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
            }
          };
        };
      };
      var semiringTuple = function(dictSemiring) {
        return function(dictSemiring1) {
          return {
            add: function(v) {
              return function(v1) {
                return new Tuple(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0), Data_Semiring.add(dictSemiring1)(v.value1)(v1.value1));
              };
            },
            one: new Tuple(Data_Semiring.one(dictSemiring), Data_Semiring.one(dictSemiring1)),
            mul: function(v) {
              return function(v1) {
                return new Tuple(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0), Data_Semiring.mul(dictSemiring1)(v.value1)(v1.value1));
              };
            },
            zero: new Tuple(Data_Semiring.zero(dictSemiring), Data_Semiring.zero(dictSemiring1))
          };
        };
      };
      var semigroupoidTuple = {
        compose: function(v) {
          return function(v1) {
            return new Tuple(v1.value0, v.value1);
          };
        }
      };
      var semigroupTuple = function(dictSemigroup) {
        return function(dictSemigroup1) {
          return {
            append: function(v) {
              return function(v1) {
                return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
              };
            }
          };
        };
      };
      var ringTuple = function(dictRing) {
        return function(dictRing1) {
          return {
            sub: function(v) {
              return function(v1) {
                return new Tuple(Data_Ring.sub(dictRing)(v.value0)(v1.value0), Data_Ring.sub(dictRing1)(v.value1)(v1.value1));
              };
            },
            Semiring0: function() {
              return semiringTuple(dictRing.Semiring0())(dictRing1.Semiring0());
            }
          };
        };
      };
      var monoidTuple = function(dictMonoid) {
        return function(dictMonoid1) {
          return {
            mempty: new Tuple(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid1)),
            Semigroup0: function() {
              return semigroupTuple(dictMonoid.Semigroup0())(dictMonoid1.Semigroup0());
            }
          };
        };
      };
      var heytingAlgebraTuple = function(dictHeytingAlgebra) {
        return function(dictHeytingAlgebra1) {
          return {
            tt: new Tuple(Data_HeytingAlgebra.tt(dictHeytingAlgebra), Data_HeytingAlgebra.tt(dictHeytingAlgebra1)),
            ff: new Tuple(Data_HeytingAlgebra.ff(dictHeytingAlgebra), Data_HeytingAlgebra.ff(dictHeytingAlgebra1)),
            implies: function(v) {
              return function(v1) {
                return new Tuple(Data_HeytingAlgebra.implies(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.implies(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
            },
            conj: function(v) {
              return function(v1) {
                return new Tuple(Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.conj(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
            },
            disj: function(v) {
              return function(v1) {
                return new Tuple(Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v.value0)(v1.value0), Data_HeytingAlgebra.disj(dictHeytingAlgebra1)(v.value1)(v1.value1));
              };
            },
            not: function(v) {
              return new Tuple(Data_HeytingAlgebra.not(dictHeytingAlgebra)(v.value0), Data_HeytingAlgebra.not(dictHeytingAlgebra1)(v.value1));
            }
          };
        };
      };
      var genericTuple = {
        to: function(x) {
          return new Tuple(x.value0, x.value1);
        },
        from: function(x) {
          return new Data_Generic_Rep.Product(x.value0, x.value1);
        }
      };
      var functorTuple = {
        map: function(f) {
          return function(m) {
            return new Tuple(m.value0, f(m.value1));
          };
        }
      };
      var invariantTuple = {
        imap: Data_Functor_Invariant.imapF(functorTuple)
      };
      var fst = function(v) {
        return v.value0;
      };
      var lazyTuple = function(dictLazy) {
        return function(dictLazy1) {
          return {
            defer: function(f) {
              return new Tuple(Control_Lazy.defer(dictLazy)(function(v) {
                return fst(f(Data_Unit.unit));
              }), Control_Lazy.defer(dictLazy1)(function(v) {
                return snd(f(Data_Unit.unit));
              }));
            }
          };
        };
      };
      var extendTuple = {
        extend: function(f) {
          return function(v) {
            return new Tuple(v.value0, f(v));
          };
        },
        Functor0: function() {
          return functorTuple;
        }
      };
      var eqTuple = function(dictEq) {
        return function(dictEq1) {
          return {
            eq: function(x) {
              return function(y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq(dictEq1)(x.value1)(y.value1);
              };
            }
          };
        };
      };
      var ordTuple = function(dictOrd) {
        return function(dictOrd1) {
          return {
            compare: function(x) {
              return function(y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
                }
                ;
                if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
                }
                ;
                return Data_Ord.compare(dictOrd1)(x.value1)(y.value1);
              };
            },
            Eq0: function() {
              return eqTuple(dictOrd.Eq0())(dictOrd1.Eq0());
            }
          };
        };
      };
      var eq1Tuple = function(dictEq) {
        return {
          eq1: function(dictEq1) {
            return Data_Eq.eq(eqTuple(dictEq)(dictEq1));
          }
        };
      };
      var ord1Tuple = function(dictOrd) {
        return {
          compare1: function(dictOrd1) {
            return Data_Ord.compare(ordTuple(dictOrd)(dictOrd1));
          },
          Eq10: function() {
            return eq1Tuple(dictOrd.Eq0());
          }
        };
      };
      var curry = function(f) {
        return function(a) {
          return function(b) {
            return f(new Tuple(a, b));
          };
        };
      };
      var comonadTuple = {
        extract: snd,
        Extend0: function() {
          return extendTuple;
        }
      };
      var commutativeRingTuple = function(dictCommutativeRing) {
        return function(dictCommutativeRing1) {
          return {
            Ring0: function() {
              return ringTuple(dictCommutativeRing.Ring0())(dictCommutativeRing1.Ring0());
            }
          };
        };
      };
      var boundedTuple = function(dictBounded) {
        return function(dictBounded1) {
          return {
            top: new Tuple(Data_Bounded.top(dictBounded), Data_Bounded.top(dictBounded1)),
            bottom: new Tuple(Data_Bounded.bottom(dictBounded), Data_Bounded.bottom(dictBounded1)),
            Ord0: function() {
              return ordTuple(dictBounded.Ord0())(dictBounded1.Ord0());
            }
          };
        };
      };
      var booleanAlgebraTuple = function(dictBooleanAlgebra) {
        return function(dictBooleanAlgebra1) {
          return {
            HeytingAlgebra0: function() {
              return heytingAlgebraTuple(dictBooleanAlgebra.HeytingAlgebra0())(dictBooleanAlgebra1.HeytingAlgebra0());
            }
          };
        };
      };
      var applyTuple = function(dictSemigroup) {
        return {
          apply: function(v) {
            return function(v1) {
              return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1(v1.value1));
            };
          },
          Functor0: function() {
            return functorTuple;
          }
        };
      };
      var bindTuple = function(dictSemigroup) {
        return {
          bind: function(v) {
            return function(f) {
              var v1 = f(v.value1);
              return new Tuple(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
            };
          },
          Apply0: function() {
            return applyTuple(dictSemigroup);
          }
        };
      };
      var applicativeTuple = function(dictMonoid) {
        return {
          pure: Tuple.create(Data_Monoid.mempty(dictMonoid)),
          Apply0: function() {
            return applyTuple(dictMonoid.Semigroup0());
          }
        };
      };
      var monadTuple = function(dictMonoid) {
        return {
          Applicative0: function() {
            return applicativeTuple(dictMonoid);
          },
          Bind1: function() {
            return bindTuple(dictMonoid.Semigroup0());
          }
        };
      };
      module.exports = {
        Tuple,
        fst,
        snd,
        curry,
        uncurry,
        swap,
        showTuple,
        eqTuple,
        eq1Tuple,
        ordTuple,
        ord1Tuple,
        boundedTuple,
        semigroupoidTuple,
        semigroupTuple,
        monoidTuple,
        semiringTuple,
        ringTuple,
        commutativeRingTuple,
        heytingAlgebraTuple,
        booleanAlgebraTuple,
        functorTuple,
        genericTuple,
        invariantTuple,
        applyTuple,
        applicativeTuple,
        bindTuple,
        monadTuple,
        extendTuple,
        comonadTuple,
        lazyTuple
      };
    }
  });

  // output/Control.Monad.State.Class/index.js
  var require_Control_Monad_State = __commonJS({
    "output/Control.Monad.State.Class/index.js"(exports, module) {
      "use strict";
      var Data_Tuple = require_Data22();
      var Data_Unit = require_Data3();
      var state = function(dict) {
        return dict.state;
      };
      var put = function(dictMonadState) {
        return function(s) {
          return state(dictMonadState)(function(v) {
            return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
        };
      };
      var modify_ = function(dictMonadState) {
        return function(f) {
          return state(dictMonadState)(function(s) {
            return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
        };
      };
      var modify = function(dictMonadState) {
        return function(f) {
          return state(dictMonadState)(function(s) {
            var s$prime = f(s);
            return new Data_Tuple.Tuple(s$prime, s$prime);
          });
        };
      };
      var gets = function(dictMonadState) {
        return function(f) {
          return state(dictMonadState)(function(s) {
            return new Data_Tuple.Tuple(f(s), s);
          });
        };
      };
      var get = function(dictMonadState) {
        return state(dictMonadState)(function(s) {
          return new Data_Tuple.Tuple(s, s);
        });
      };
      module.exports = {
        state,
        get,
        gets,
        put,
        modify,
        modify_
      };
    }
  });

  // output/Control.Monad.Trans.Class/index.js
  var require_Control_Monad_Trans = __commonJS({
    "output/Control.Monad.Trans.Class/index.js"(exports, module) {
      "use strict";
      var lift = function(dict) {
        return dict.lift;
      };
      module.exports = {
        lift
      };
    }
  });

  // output/Control.Monad.Writer.Class/index.js
  var require_Control_Monad_Writer = __commonJS({
    "output/Control.Monad.Writer.Class/index.js"(exports, module) {
      "use strict";
      var Control_Applicative = require_Control4();
      var Control_Bind = require_Control5();
      var Data_Tuple = require_Data22();
      var tell = function(dict) {
        return dict.tell;
      };
      var pass = function(dict) {
        return dict.pass;
      };
      var listen = function(dict) {
        return dict.listen;
      };
      var listens = function(dictMonadWriter) {
        return function(f) {
          return function(m) {
            return Control_Bind.bind(dictMonadWriter.MonadTell1().Monad1().Bind1())(listen(dictMonadWriter)(m))(function(v) {
              return Control_Applicative.pure(dictMonadWriter.MonadTell1().Monad1().Applicative0())(new Data_Tuple.Tuple(v.value0, f(v.value1)));
            });
          };
        };
      };
      var censor = function(dictMonadWriter) {
        return function(f) {
          return function(m) {
            return pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell1().Monad1().Bind1())(m)(function(a) {
              return Control_Applicative.pure(dictMonadWriter.MonadTell1().Monad1().Applicative0())(new Data_Tuple.Tuple(a, f));
            }));
          };
        };
      };
      module.exports = {
        listen,
        pass,
        tell,
        listens,
        censor
      };
    }
  });

  // output/Control.Monad.Except.Trans/index.js
  var require_Control_Monad_Except = __commonJS({
    "output/Control.Monad.Except.Trans/index.js"(exports, module) {
      "use strict";
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Control_Bind = require_Control5();
      var Control_Category = require_Control2();
      var Control_Monad = require_Control7();
      var Control_Monad_Cont_Class = require_Control_Monad_Cont();
      var Control_Monad_Error_Class = require_Control_Monad_Error();
      var Control_Monad_Reader_Class = require_Control_Monad_Reader();
      var Control_Monad_Rec_Class = require_Control_Monad_Rec();
      var Control_Monad_State_Class = require_Control_Monad_State();
      var Control_Monad_Trans_Class = require_Control_Monad_Trans();
      var Control_Monad_Writer_Class = require_Control_Monad_Writer();
      var Data_Either = require_Data19();
      var Data_Functor = require_Data4();
      var Data_Monoid = require_Data18();
      var Data_Semigroup = require_Data7();
      var Data_Tuple = require_Data22();
      var Effect_Class = require_Effect2();
      var ExceptT = function(x) {
        return x;
      };
      var withExceptT = function(dictFunctor) {
        return function(f) {
          return function(v) {
            var mapLeft = function(v1) {
              return function(v2) {
                if (v2 instanceof Data_Either.Right) {
                  return new Data_Either.Right(v2.value0);
                }
                ;
                if (v2 instanceof Data_Either.Left) {
                  return new Data_Either.Left(v1(v2.value0));
                }
                ;
                throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 43, column 3 - line 43, column 32): " + [v1.constructor.name, v2.constructor.name]);
              };
            };
            return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
          };
        };
      };
      var runExceptT = function(v) {
        return v;
      };
      var newtypeExceptT = {
        Coercible0: function() {
          return void 0;
        }
      };
      var monadTransExceptT = {
        lift: function(dictMonad) {
          return function(m) {
            return Control_Bind.bind(dictMonad.Bind1())(m)(function(a) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
            });
          };
        }
      };
      var mapExceptT = function(f) {
        return function(v) {
          return f(v);
        };
      };
      var functorExceptT = function(dictFunctor) {
        return {
          map: function(f) {
            return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
          }
        };
      };
      var except = function(dictApplicative) {
        var $89 = Control_Applicative.pure(dictApplicative);
        return function($90) {
          return ExceptT($89($90));
        };
      };
      var monadExceptT = function(dictMonad) {
        return {
          Applicative0: function() {
            return applicativeExceptT(dictMonad);
          },
          Bind1: function() {
            return bindExceptT(dictMonad);
          }
        };
      };
      var bindExceptT = function(dictMonad) {
        return {
          bind: function(v) {
            return function(k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function() {
                var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                return function($92) {
                  return $91(Data_Either.Left.create($92));
                };
              }())(function(a) {
                var v1 = k(a);
                return v1;
              }));
            };
          },
          Apply0: function() {
            return applyExceptT(dictMonad);
          }
        };
      };
      var applyExceptT = function(dictMonad) {
        return {
          apply: Control_Monad.ap(monadExceptT(dictMonad)),
          Functor0: function() {
            return functorExceptT(dictMonad.Bind1().Apply0().Functor0());
          }
        };
      };
      var applicativeExceptT = function(dictMonad) {
        return {
          pure: function() {
            var $93 = Control_Applicative.pure(dictMonad.Applicative0());
            return function($94) {
              return ExceptT($93(Data_Either.Right.create($94)));
            };
          }(),
          Apply0: function() {
            return applyExceptT(dictMonad);
          }
        };
      };
      var semigroupExceptT = function(dictMonad) {
        return function(dictSemigroup) {
          return {
            append: Control_Apply.lift2(applyExceptT(dictMonad))(Data_Semigroup.append(dictSemigroup))
          };
        };
      };
      var monadAskExceptT = function(dictMonadAsk) {
        return {
          ask: Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadAsk.Monad0())(Control_Monad_Reader_Class.ask(dictMonadAsk)),
          Monad0: function() {
            return monadExceptT(dictMonadAsk.Monad0());
          }
        };
      };
      var monadReaderExceptT = function(dictMonadReader) {
        return {
          local: function(f) {
            return mapExceptT(Control_Monad_Reader_Class.local(dictMonadReader)(f));
          },
          MonadAsk0: function() {
            return monadAskExceptT(dictMonadReader.MonadAsk0());
          }
        };
      };
      var monadContExceptT = function(dictMonadCont) {
        return {
          callCC: function(f) {
            return ExceptT(Control_Monad_Cont_Class.callCC(dictMonadCont)(function(c) {
              var v = f(function(a) {
                return ExceptT(c(new Data_Either.Right(a)));
              });
              return v;
            }));
          },
          Monad0: function() {
            return monadExceptT(dictMonadCont.Monad0());
          }
        };
      };
      var monadEffectExceptT = function(dictMonadEffect) {
        return {
          liftEffect: function() {
            var $95 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadEffect.Monad0());
            var $96 = Effect_Class.liftEffect(dictMonadEffect);
            return function($97) {
              return $95($96($97));
            };
          }(),
          Monad0: function() {
            return monadExceptT(dictMonadEffect.Monad0());
          }
        };
      };
      var monadRecExceptT = function(dictMonadRec) {
        return {
          tailRecM: function(f) {
            var $98 = Control_Monad_Rec_Class.tailRecM(dictMonadRec)(function(a) {
              var v = f(a);
              return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(v)(function(m$prime) {
                return Control_Applicative.pure(dictMonadRec.Monad0().Applicative0())(function() {
                  if (m$prime instanceof Data_Either.Left) {
                    return new Control_Monad_Rec_Class.Done(new Data_Either.Left(m$prime.value0));
                  }
                  ;
                  if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Loop) {
                    return new Control_Monad_Rec_Class.Loop(m$prime.value0.value0);
                  }
                  ;
                  if (m$prime instanceof Data_Either.Right && m$prime.value0 instanceof Control_Monad_Rec_Class.Done) {
                    return new Control_Monad_Rec_Class.Done(new Data_Either.Right(m$prime.value0.value0));
                  }
                  ;
                  throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 75, column 14 - line 78, column 43): " + [m$prime.constructor.name]);
                }());
              });
            });
            return function($99) {
              return ExceptT($98($99));
            };
          },
          Monad0: function() {
            return monadExceptT(dictMonadRec.Monad0());
          }
        };
      };
      var monadStateExceptT = function(dictMonadState) {
        return {
          state: function(f) {
            return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
          },
          Monad0: function() {
            return monadExceptT(dictMonadState.Monad0());
          }
        };
      };
      var monadTellExceptT = function(dictMonadTell) {
        return {
          tell: function() {
            var $100 = Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadTell.Monad1());
            var $101 = Control_Monad_Writer_Class.tell(dictMonadTell);
            return function($102) {
              return $100($101($102));
            };
          }(),
          Semigroup0: dictMonadTell.Semigroup0,
          Monad1: function() {
            return monadExceptT(dictMonadTell.Monad1());
          }
        };
      };
      var monadWriterExceptT = function(dictMonadWriter) {
        return {
          listen: mapExceptT(function(m) {
            return Control_Bind.bind(dictMonadWriter.MonadTell1().Monad1().Bind1())(Control_Monad_Writer_Class.listen(dictMonadWriter)(m))(function(v) {
              return Control_Applicative.pure(dictMonadWriter.MonadTell1().Monad1().Applicative0())(Data_Functor.map(Data_Either.functorEither)(function(r) {
                return new Data_Tuple.Tuple(r, v.value1);
              })(v.value0));
            });
          }),
          pass: mapExceptT(function(m) {
            return Control_Monad_Writer_Class.pass(dictMonadWriter)(Control_Bind.bind(dictMonadWriter.MonadTell1().Monad1().Bind1())(m)(function(a) {
              return Control_Applicative.pure(dictMonadWriter.MonadTell1().Monad1().Applicative0())(function() {
                if (a instanceof Data_Either.Left) {
                  return new Data_Tuple.Tuple(new Data_Either.Left(a.value0), Control_Category.identity(Control_Category.categoryFn));
                }
                ;
                if (a instanceof Data_Either.Right) {
                  return new Data_Tuple.Tuple(new Data_Either.Right(a.value0.value0), a.value0.value1);
                }
                ;
                throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 137, column 10 - line 139, column 45): " + [a.constructor.name]);
              }());
            }));
          }),
          Monoid0: dictMonadWriter.Monoid0,
          MonadTell1: function() {
            return monadTellExceptT(dictMonadWriter.MonadTell1());
          }
        };
      };
      var monadThrowExceptT = function(dictMonad) {
        return {
          throwError: function() {
            var $103 = Control_Applicative.pure(dictMonad.Applicative0());
            return function($104) {
              return ExceptT($103(Data_Either.Left.create($104)));
            };
          }(),
          Monad0: function() {
            return monadExceptT(dictMonad);
          }
        };
      };
      var monadErrorExceptT = function(dictMonad) {
        return {
          catchError: function(v) {
            return function(k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function(a) {
                var v1 = k(a);
                return v1;
              })(function() {
                var $105 = Control_Applicative.pure(dictMonad.Applicative0());
                return function($106) {
                  return $105(Data_Either.Right.create($106));
                };
              }()));
            };
          },
          MonadThrow0: function() {
            return monadThrowExceptT(dictMonad);
          }
        };
      };
      var monoidExceptT = function(dictMonad) {
        return function(dictMonoid) {
          return {
            mempty: Control_Applicative.pure(applicativeExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)),
            Semigroup0: function() {
              return semigroupExceptT(dictMonad)(dictMonoid.Semigroup0());
            }
          };
        };
      };
      var altExceptT = function(dictSemigroup) {
        return function(dictMonad) {
          return {
            alt: function(v) {
              return function(v1) {
                return Control_Bind.bind(dictMonad.Bind1())(v)(function(rm) {
                  if (rm instanceof Data_Either.Right) {
                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rm.value0));
                  }
                  ;
                  if (rm instanceof Data_Either.Left) {
                    return Control_Bind.bind(dictMonad.Bind1())(v1)(function(rn) {
                      if (rn instanceof Data_Either.Right) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(rn.value0));
                      }
                      ;
                      if (rn instanceof Data_Either.Left) {
                        return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(rm.value0)(rn.value0)));
                      }
                      ;
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [rn.constructor.name]);
                    });
                  }
                  ;
                  throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [rm.constructor.name]);
                });
              };
            },
            Functor0: function() {
              return functorExceptT(dictMonad.Bind1().Apply0().Functor0());
            }
          };
        };
      };
      var plusExceptT = function(dictMonoid) {
        return function(dictMonad) {
          return {
            empty: Control_Monad_Error_Class.throwError(monadThrowExceptT(dictMonad))(Data_Monoid.mempty(dictMonoid)),
            Alt0: function() {
              return altExceptT(dictMonoid.Semigroup0())(dictMonad);
            }
          };
        };
      };
      var alternativeExceptT = function(dictMonoid) {
        return function(dictMonad) {
          return {
            Applicative0: function() {
              return applicativeExceptT(dictMonad);
            },
            Plus1: function() {
              return plusExceptT(dictMonoid)(dictMonad);
            }
          };
        };
      };
      var monadPlusExceptT = function(dictMonoid) {
        return function(dictMonad) {
          return {
            Monad0: function() {
              return monadExceptT(dictMonad);
            },
            Alternative1: function() {
              return alternativeExceptT(dictMonoid)(dictMonad);
            }
          };
        };
      };
      var monadZeroExceptT = function(dictMonoid) {
        return function(dictMonad) {
          return {
            Monad0: function() {
              return monadExceptT(dictMonad);
            },
            Alternative1: function() {
              return alternativeExceptT(dictMonoid)(dictMonad);
            },
            MonadZeroIsDeprecated2: function() {
              return void 0;
            }
          };
        };
      };
      module.exports = {
        ExceptT,
        runExceptT,
        withExceptT,
        mapExceptT,
        except,
        newtypeExceptT,
        functorExceptT,
        applyExceptT,
        applicativeExceptT,
        bindExceptT,
        monadExceptT,
        monadRecExceptT,
        altExceptT,
        plusExceptT,
        alternativeExceptT,
        monadPlusExceptT,
        monadZeroExceptT,
        monadTransExceptT,
        monadEffectExceptT,
        monadContExceptT,
        monadThrowExceptT,
        monadErrorExceptT,
        monadAskExceptT,
        monadReaderExceptT,
        monadStateExceptT,
        monadTellExceptT,
        monadWriterExceptT,
        semigroupExceptT,
        monoidExceptT,
        catchError: Control_Monad_Error_Class.catchError,
        throwError: Control_Monad_Error_Class.throwError,
        lift: Control_Monad_Trans_Class.lift
      };
    }
  });

  // output/Data.Int/foreign.js
  var require_foreign24 = __commonJS({
    "output/Data.Int/foreign.js"(exports) {
      "use strict";
      exports.fromNumberImpl = function(just) {
        return function(nothing) {
          return function(n) {
            return (n | 0) === n ? just(n) : nothing;
          };
        };
      };
      exports.toNumber = function(n) {
        return n;
      };
      exports.fromStringAsImpl = function(just) {
        return function(nothing) {
          return function(radix) {
            var digits;
            if (radix < 11) {
              digits = "[0-" + (radix - 1).toString() + "]";
            } else if (radix === 11) {
              digits = "[0-9a]";
            } else {
              digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
            }
            var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");
            return function(s) {
              if (pattern.test(s)) {
                var i = parseInt(s, radix);
                return (i | 0) === i ? just(i) : nothing;
              } else {
                return nothing;
              }
            };
          };
        };
      };
      exports.toStringAs = function(radix) {
        return function(i) {
          return i.toString(radix);
        };
      };
      exports.quot = function(x) {
        return function(y) {
          return x / y | 0;
        };
      };
      exports.rem = function(x) {
        return function(y) {
          return x % y;
        };
      };
      exports.pow = function(x) {
        return function(y) {
          return Math.pow(x, y) | 0;
        };
      };
    }
  });

  // output/Data.Number/foreign.js
  var require_foreign25 = __commonJS({
    "output/Data.Number/foreign.js"(exports) {
      "use strict";
      exports.nan = NaN;
      exports.isNaN = isNaN;
      exports.infinity = Infinity;
      exports.isFinite = isFinite;
      exports.fromStringImpl = function(str, isFinite2, just, nothing) {
        var num = parseFloat(str);
        if (isFinite2(num)) {
          return just(num);
        } else {
          return nothing;
        }
      };
    }
  });

  // output/Data.Number/index.js
  var require_Data23 = __commonJS({
    "output/Data.Number/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign25();
      var Data_Maybe = require_Data15();
      var fromString = function(str) {
        return $foreign.fromStringImpl(str, $foreign["isFinite"], Data_Maybe.Just.create, Data_Maybe.Nothing.value);
      };
      module.exports = {
        fromString,
        nan: $foreign.nan,
        "isNaN": $foreign["isNaN"],
        infinity: $foreign.infinity,
        "isFinite": $foreign["isFinite"]
      };
    }
  });

  // output/Math/foreign.js
  var require_foreign26 = __commonJS({
    "output/Math/foreign.js"(exports) {
      "use strict";
      exports.abs = Math.abs;
      exports.acos = Math.acos;
      exports.asin = Math.asin;
      exports.atan = Math.atan;
      exports.atan2 = function(y) {
        return function(x) {
          return Math.atan2(y, x);
        };
      };
      exports.ceil = Math.ceil;
      exports.cos = Math.cos;
      exports.exp = Math.exp;
      exports.floor = Math.floor;
      function nativeImul(a) {
        return function(b) {
          return Math.imul(a, b);
        };
      }
      function emulatedImul(a) {
        return function(b) {
          var ah = a >>> 16 & 65535;
          var al = a & 65535;
          var bh = b >>> 16 & 65535;
          var bl = b & 65535;
          return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
        };
      }
      exports.imul = Math.imul ? nativeImul : emulatedImul;
      exports.trunc = Math.trunc || function(n) {
        return n < 0 ? Math.ceil(n) : Math.floor(n);
      };
      exports.log = Math.log;
      exports.max = function(n1) {
        return function(n2) {
          return Math.max(n1, n2);
        };
      };
      exports.min = function(n1) {
        return function(n2) {
          return Math.min(n1, n2);
        };
      };
      exports.pow = function(n) {
        return function(p) {
          return Math.pow(n, p);
        };
      };
      exports.remainder = function(n) {
        return function(m) {
          return n % m;
        };
      };
      exports.round = Math.round;
      exports.sin = Math.sin;
      exports.sqrt = Math.sqrt;
      exports.tan = Math.tan;
      exports.e = Math.E;
      exports.ln2 = Math.LN2;
      exports.ln10 = Math.LN10;
      exports.log2e = Math.LOG2E;
      exports.log10e = Math.LOG10E;
      exports.pi = Math.PI;
      exports.tau = 2 * Math.PI;
      exports.sqrt1_2 = Math.SQRT1_2;
      exports.sqrt2 = Math.SQRT2;
    }
  });

  // output/Math/index.js
  var require_Math = __commonJS({
    "output/Math/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign26();
      module.exports = {
        abs: $foreign.abs,
        acos: $foreign.acos,
        asin: $foreign.asin,
        atan: $foreign.atan,
        atan2: $foreign.atan2,
        ceil: $foreign.ceil,
        cos: $foreign.cos,
        exp: $foreign.exp,
        floor: $foreign.floor,
        imul: $foreign.imul,
        log: $foreign.log,
        max: $foreign.max,
        min: $foreign.min,
        pow: $foreign.pow,
        round: $foreign.round,
        sin: $foreign.sin,
        sqrt: $foreign.sqrt,
        tan: $foreign.tan,
        trunc: $foreign.trunc,
        remainder: $foreign.remainder,
        e: $foreign.e,
        ln2: $foreign.ln2,
        ln10: $foreign.ln10,
        log2e: $foreign.log2e,
        log10e: $foreign.log10e,
        pi: $foreign.pi,
        tau: $foreign.tau,
        sqrt1_2: $foreign.sqrt1_2,
        sqrt2: $foreign.sqrt2
      };
    }
  });

  // output/Data.Int/index.js
  var require_Data24 = __commonJS({
    "output/Data.Int/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign24();
      var Control_Category = require_Control2();
      var Data_Boolean = require_Data();
      var Data_Bounded = require_Data13();
      var Data_Eq = require_Data8();
      var Data_Maybe = require_Data15();
      var Data_Number = require_Data23();
      var Data_Ordering = require_Data9();
      var Data_Semiring = require_Data10();
      var $$Math = require_Math();
      var Even = function() {
        function Even2() {
        }
        ;
        Even2.value = new Even2();
        return Even2;
      }();
      var Odd = function() {
        function Odd2() {
        }
        ;
        Odd2.value = new Odd2();
        return Odd2;
      }();
      var showParity = {
        show: function(v) {
          if (v instanceof Even) {
            return "Even";
          }
          ;
          if (v instanceof Odd) {
            return "Odd";
          }
          ;
          throw new Error("Failed pattern match at Data.Int (line 111, column 1 - line 113, column 19): " + [v.constructor.name]);
        }
      };
      var radix = function(n) {
        if (n >= 2 && n <= 36) {
          return new Data_Maybe.Just(n);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Int (line 192, column 1 - line 192, column 28): " + [n.constructor.name]);
      };
      var odd = function(x) {
        return (x & 1) !== 0;
      };
      var octal = 8;
      var hexadecimal = 16;
      var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
      var fromString = fromStringAs(10);
      var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
      var unsafeClamp = function(x) {
        if (!Data_Number["isFinite"](x)) {
          return 0;
        }
        ;
        if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
        }
        ;
        if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
        }
        ;
        if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
        }
        ;
        throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [x.constructor.name]);
      };
      var round = function($23) {
        return unsafeClamp($$Math.round($23));
      };
      var floor = function($24) {
        return unsafeClamp($$Math.floor($24));
      };
      var even = function(x) {
        return (x & 1) === 0;
      };
      var parity = function(n) {
        var $14 = even(n);
        if ($14) {
          return Even.value;
        }
        ;
        return Odd.value;
      };
      var eqParity = {
        eq: function(x) {
          return function(y) {
            if (x instanceof Even && y instanceof Even) {
              return true;
            }
            ;
            if (x instanceof Odd && y instanceof Odd) {
              return true;
            }
            ;
            return false;
          };
        }
      };
      var ordParity = {
        compare: function(x) {
          return function(y) {
            if (x instanceof Even && y instanceof Even) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Even) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Even) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Odd && y instanceof Odd) {
              return Data_Ordering.EQ.value;
            }
            ;
            throw new Error("Failed pattern match at Data.Int (line 109, column 1 - line 109, column 40): " + [x.constructor.name, y.constructor.name]);
          };
        },
        Eq0: function() {
          return eqParity;
        }
      };
      var semiringParity = {
        zero: Even.value,
        add: function(x) {
          return function(y) {
            var $19 = Data_Eq.eq(eqParity)(x)(y);
            if ($19) {
              return Even.value;
            }
            ;
            return Odd.value;
          };
        },
        one: Odd.value,
        mul: function(v) {
          return function(v1) {
            if (v instanceof Odd && v1 instanceof Odd) {
              return Odd.value;
            }
            ;
            return Even.value;
          };
        }
      };
      var ringParity = {
        sub: Data_Semiring.add(semiringParity),
        Semiring0: function() {
          return semiringParity;
        }
      };
      var divisionRingParity = {
        recip: Control_Category.identity(Control_Category.categoryFn),
        Ring0: function() {
          return ringParity;
        }
      };
      var decimal = 10;
      var commutativeRingParity = {
        Ring0: function() {
          return ringParity;
        }
      };
      var euclideanRingParity = {
        degree: function(v) {
          if (v instanceof Even) {
            return 0;
          }
          ;
          if (v instanceof Odd) {
            return 1;
          }
          ;
          throw new Error("Failed pattern match at Data.Int (line 131, column 1 - line 135, column 17): " + [v.constructor.name]);
        },
        div: function(x) {
          return function(v) {
            return x;
          };
        },
        mod: function(v) {
          return function(v1) {
            return Even.value;
          };
        },
        CommutativeRing0: function() {
          return commutativeRingParity;
        }
      };
      var ceil = function($25) {
        return unsafeClamp($$Math.ceil($25));
      };
      var boundedParity = {
        bottom: Even.value,
        top: Odd.value,
        Ord0: function() {
          return ordParity;
        }
      };
      var binary = 2;
      var base36 = 36;
      module.exports = {
        fromNumber,
        ceil,
        floor,
        round,
        fromString,
        radix,
        binary,
        octal,
        decimal,
        hexadecimal,
        base36,
        fromStringAs,
        Even,
        Odd,
        parity,
        even,
        odd,
        eqParity,
        ordParity,
        showParity,
        boundedParity,
        semiringParity,
        ringParity,
        commutativeRingParity,
        euclideanRingParity,
        divisionRingParity,
        toNumber: $foreign.toNumber,
        toStringAs: $foreign.toStringAs,
        quot: $foreign.quot,
        rem: $foreign.rem,
        pow: $foreign.pow
      };
    }
  });

  // output/Data.Foldable/foreign.js
  var require_foreign27 = __commonJS({
    "output/Data.Foldable/foreign.js"(exports) {
      "use strict";
      exports.foldrArray = function(f) {
        return function(init) {
          return function(xs) {
            var acc = init;
            var len = xs.length;
            for (var i = len - 1; i >= 0; i--) {
              acc = f(xs[i])(acc);
            }
            return acc;
          };
        };
      };
      exports.foldlArray = function(f) {
        return function(init) {
          return function(xs) {
            var acc = init;
            var len = xs.length;
            for (var i = 0; i < len; i++) {
              acc = f(acc)(xs[i]);
            }
            return acc;
          };
        };
      };
    }
  });

  // output/Control.Plus/index.js
  var require_Control9 = __commonJS({
    "output/Control.Plus/index.js"(exports, module) {
      "use strict";
      var Control_Alt = require_Control6();
      var Data_Functor = require_Data4();
      var plusArray = {
        empty: [],
        Alt0: function() {
          return Control_Alt.altArray;
        }
      };
      var empty = function(dict) {
        return dict.empty;
      };
      module.exports = {
        empty,
        plusArray,
        alt: Control_Alt.alt,
        map: Data_Functor.map,
        "void": Data_Functor["void"]
      };
    }
  });

  // output/Control.Extend/foreign.js
  var require_foreign28 = __commonJS({
    "output/Control.Extend/foreign.js"(exports) {
      "use strict";
      exports.arrayExtend = function(f) {
        return function(xs) {
          return xs.map(function(_, i, xs2) {
            return f(xs2.slice(i));
          });
        };
      };
    }
  });

  // output/Control.Extend/index.js
  var require_Control10 = __commonJS({
    "output/Control.Extend/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign28();
      var Control_Category = require_Control2();
      var Data_Functor = require_Data4();
      var Data_Semigroup = require_Data7();
      var extendFn = function(dictSemigroup) {
        return {
          extend: function(f) {
            return function(g) {
              return function(w) {
                return f(function(w$prime) {
                  return g(Data_Semigroup.append(dictSemigroup)(w)(w$prime));
                });
              };
            };
          },
          Functor0: function() {
            return Data_Functor.functorFn;
          }
        };
      };
      var extendArray = {
        extend: $foreign.arrayExtend,
        Functor0: function() {
          return Data_Functor.functorArray;
        }
      };
      var extend = function(dict) {
        return dict.extend;
      };
      var extendFlipped = function(dictExtend) {
        return function(w) {
          return function(f) {
            return extend(dictExtend)(f)(w);
          };
        };
      };
      var duplicate = function(dictExtend) {
        return extend(dictExtend)(Control_Category.identity(Control_Category.categoryFn));
      };
      var composeCoKleisliFlipped = function(dictExtend) {
        return function(f) {
          return function(g) {
            return function(w) {
              return f(extend(dictExtend)(g)(w));
            };
          };
        };
      };
      var composeCoKleisli = function(dictExtend) {
        return function(f) {
          return function(g) {
            return function(w) {
              return g(extend(dictExtend)(f)(w));
            };
          };
        };
      };
      module.exports = {
        extend,
        extendFlipped,
        composeCoKleisli,
        composeCoKleisliFlipped,
        duplicate,
        extendFn,
        extendArray,
        map: Data_Functor.map,
        "void": Data_Functor["void"]
      };
    }
  });

  // output/Control.Comonad/index.js
  var require_Control11 = __commonJS({
    "output/Control.Comonad/index.js"(exports, module) {
      "use strict";
      var Control_Extend = require_Control10();
      var Data_Functor = require_Data4();
      var extract = function(dict) {
        return dict.extract;
      };
      module.exports = {
        extract,
        duplicate: Control_Extend.duplicate,
        extend: Control_Extend.extend,
        map: Data_Functor.map,
        "void": Data_Functor["void"]
      };
    }
  });

  // output/Data.Bifunctor/index.js
  var require_Data25 = __commonJS({
    "output/Data.Bifunctor/index.js"(exports, module) {
      "use strict";
      var Control_Category = require_Control2();
      var Data_Either = require_Data19();
      var Data_Tuple = require_Data22();
      var bimap = function(dict) {
        return dict.bimap;
      };
      var lmap = function(dictBifunctor) {
        return function(f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
        };
      };
      var rmap = function(dictBifunctor) {
        return bimap(dictBifunctor)(Control_Category.identity(Control_Category.categoryFn));
      };
      var bifunctorTuple = {
        bimap: function(f) {
          return function(g) {
            return function(v) {
              return new Data_Tuple.Tuple(f(v.value0), g(v.value1));
            };
          };
        }
      };
      var bifunctorEither = {
        bimap: function(v) {
          return function(v1) {
            return function(v2) {
              if (v2 instanceof Data_Either.Left) {
                return new Data_Either.Left(v(v2.value0));
              }
              ;
              if (v2 instanceof Data_Either.Right) {
                return new Data_Either.Right(v1(v2.value0));
              }
              ;
              throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
            };
          };
        }
      };
      var bifunctorConst = {
        bimap: function(f) {
          return function(v) {
            return function(v1) {
              return f(v1);
            };
          };
        }
      };
      module.exports = {
        bimap,
        lmap,
        rmap,
        bifunctorEither,
        bifunctorTuple,
        bifunctorConst
      };
    }
  });

  // output/Data.Functor.Coproduct/index.js
  var require_Data_Functor2 = __commonJS({
    "output/Data.Functor.Coproduct/index.js"(exports, module) {
      "use strict";
      var Control_Comonad = require_Control11();
      var Control_Extend = require_Control10();
      var Data_Bifunctor = require_Data25();
      var Data_Either = require_Data19();
      var Data_Eq = require_Data8();
      var Data_Functor = require_Data4();
      var Data_Ord = require_Data12();
      var Data_Ordering = require_Data9();
      var Data_Show = require_Data14();
      var Coproduct = function(x) {
        return x;
      };
      var showCoproduct = function(dictShow) {
        return function(dictShow1) {
          return {
            show: function(v) {
              if (v instanceof Data_Either.Left) {
                return "(left " + (Data_Show.show(dictShow)(v.value0) + ")");
              }
              ;
              if (v instanceof Data_Either.Right) {
                return "(right " + (Data_Show.show(dictShow1)(v.value0) + ")");
              }
              ;
              throw new Error("Failed pattern match at Data.Functor.Coproduct (line 63, column 1 - line 65, column 60): " + [v.constructor.name]);
            }
          };
        };
      };
      var right = function(ga) {
        return new Data_Either.Right(ga);
      };
      var newtypeCoproduct = {
        Coercible0: function() {
          return void 0;
        }
      };
      var left = function(fa) {
        return new Data_Either.Left(fa);
      };
      var functorCoproduct = function(dictFunctor) {
        return function(dictFunctor1) {
          return {
            map: function(f) {
              return function(v) {
                return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(Data_Functor.map(dictFunctor)(f))(Data_Functor.map(dictFunctor1)(f))(v);
              };
            }
          };
        };
      };
      var eq1Coproduct = function(dictEq1) {
        return function(dictEq11) {
          return {
            eq1: function(dictEq) {
              return function(v) {
                return function(v1) {
                  if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                    return Data_Eq.eq1(dictEq1)(dictEq)(v.value0)(v1.value0);
                  }
                  ;
                  if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                    return Data_Eq.eq1(dictEq11)(dictEq)(v.value0)(v1.value0);
                  }
                  ;
                  return false;
                };
              };
            }
          };
        };
      };
      var eqCoproduct = function(dictEq1) {
        return function(dictEq11) {
          return function(dictEq) {
            return {
              eq: Data_Eq.eq1(eq1Coproduct(dictEq1)(dictEq11))(dictEq)
            };
          };
        };
      };
      var ord1Coproduct = function(dictOrd1) {
        return function(dictOrd11) {
          return {
            compare1: function(dictOrd) {
              return function(v) {
                return function(v1) {
                  if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                    return Data_Ord.compare1(dictOrd1)(dictOrd)(v.value0)(v1.value0);
                  }
                  ;
                  if (v instanceof Data_Either.Left) {
                    return Data_Ordering.LT.value;
                  }
                  ;
                  if (v1 instanceof Data_Either.Left) {
                    return Data_Ordering.GT.value;
                  }
                  ;
                  if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                    return Data_Ord.compare1(dictOrd11)(dictOrd)(v.value0)(v1.value0);
                  }
                  ;
                  throw new Error("Failed pattern match at Data.Functor.Coproduct (line 57, column 5 - line 61, column 43): " + [v.constructor.name, v1.constructor.name]);
                };
              };
            },
            Eq10: function() {
              return eq1Coproduct(dictOrd1.Eq10())(dictOrd11.Eq10());
            }
          };
        };
      };
      var ordCoproduct = function(dictOrd1) {
        return function(dictOrd11) {
          return function(dictOrd) {
            return {
              compare: Data_Ord.compare1(ord1Coproduct(dictOrd1)(dictOrd11))(dictOrd),
              Eq0: function() {
                return eqCoproduct(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
              }
            };
          };
        };
      };
      var coproduct = function(v) {
        return function(v1) {
          return function(v2) {
            if (v2 instanceof Data_Either.Left) {
              return v(v2.value0);
            }
            ;
            if (v2 instanceof Data_Either.Right) {
              return v1(v2.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.Functor.Coproduct (line 27, column 1 - line 27, column 78): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
          };
        };
      };
      var extendCoproduct = function(dictExtend) {
        return function(dictExtend1) {
          return {
            extend: function(f) {
              var $61 = coproduct(function() {
                var $63 = Control_Extend.extend(dictExtend)(function($65) {
                  return f(Coproduct(Data_Either.Left.create($65)));
                });
                return function($64) {
                  return Data_Either.Left.create($63($64));
                };
              }())(function() {
                var $66 = Control_Extend.extend(dictExtend1)(function($68) {
                  return f(Coproduct(Data_Either.Right.create($68)));
                });
                return function($67) {
                  return Data_Either.Right.create($66($67));
                };
              }());
              return function($62) {
                return Coproduct($61($62));
              };
            },
            Functor0: function() {
              return functorCoproduct(dictExtend.Functor0())(dictExtend1.Functor0());
            }
          };
        };
      };
      var comonadCoproduct = function(dictComonad) {
        return function(dictComonad1) {
          return {
            extract: coproduct(Control_Comonad.extract(dictComonad))(Control_Comonad.extract(dictComonad1)),
            Extend0: function() {
              return extendCoproduct(dictComonad.Extend0())(dictComonad1.Extend0());
            }
          };
        };
      };
      var bihoistCoproduct = function(natF) {
        return function(natG) {
          return function(v) {
            return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(natF)(natG)(v);
          };
        };
      };
      module.exports = {
        Coproduct,
        left,
        right,
        coproduct,
        bihoistCoproduct,
        newtypeCoproduct,
        eqCoproduct,
        eq1Coproduct,
        ordCoproduct,
        ord1Coproduct,
        showCoproduct,
        functorCoproduct,
        extendCoproduct,
        comonadCoproduct
      };
    }
  });

  // output/Data.Maybe.First/index.js
  var require_Data_Maybe = __commonJS({
    "output/Data.Maybe.First/index.js"(exports, module) {
      "use strict";
      var Data_Maybe = require_Data15();
      var Data_Monoid = require_Data18();
      var Data_Semigroup = require_Data7();
      var Data_Show = require_Data14();
      var First = function(x) {
        return x;
      };
      var showFirst = function(dictShow) {
        return {
          show: function(v) {
            return "First (" + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
          }
        };
      };
      var semigroupFirst = {
        append: function(v) {
          return function(v1) {
            if (v instanceof Data_Maybe.Just) {
              return v;
            }
            ;
            return v1;
          };
        }
      };
      var ordFirst = function(dictOrd) {
        return Data_Maybe.ordMaybe(dictOrd);
      };
      var ord1First = Data_Maybe.ord1Maybe;
      var newtypeFirst = {
        Coercible0: function() {
          return void 0;
        }
      };
      var monoidFirst = {
        mempty: Data_Maybe.Nothing.value,
        Semigroup0: function() {
          return semigroupFirst;
        }
      };
      var monadFirst = Data_Maybe.monadMaybe;
      var invariantFirst = Data_Maybe.invariantMaybe;
      var functorFirst = Data_Maybe.functorMaybe;
      var extendFirst = Data_Maybe.extendMaybe;
      var eqFirst = function(dictEq) {
        return Data_Maybe.eqMaybe(dictEq);
      };
      var eq1First = Data_Maybe.eq1Maybe;
      var boundedFirst = function(dictBounded) {
        return Data_Maybe.boundedMaybe(dictBounded);
      };
      var bindFirst = Data_Maybe.bindMaybe;
      var applyFirst = Data_Maybe.applyMaybe;
      var applicativeFirst = Data_Maybe.applicativeMaybe;
      var altFirst = {
        alt: Data_Semigroup.append(semigroupFirst),
        Functor0: function() {
          return functorFirst;
        }
      };
      var plusFirst = {
        empty: Data_Monoid.mempty(monoidFirst),
        Alt0: function() {
          return altFirst;
        }
      };
      var alternativeFirst = {
        Applicative0: function() {
          return applicativeFirst;
        },
        Plus1: function() {
          return plusFirst;
        }
      };
      var monadZeroFirst = {
        Monad0: function() {
          return monadFirst;
        },
        Alternative1: function() {
          return alternativeFirst;
        },
        MonadZeroIsDeprecated2: function() {
          return void 0;
        }
      };
      module.exports = {
        First,
        newtypeFirst,
        eqFirst,
        eq1First,
        ordFirst,
        ord1First,
        boundedFirst,
        functorFirst,
        invariantFirst,
        applyFirst,
        applicativeFirst,
        bindFirst,
        monadFirst,
        extendFirst,
        showFirst,
        semigroupFirst,
        monoidFirst,
        altFirst,
        plusFirst,
        alternativeFirst,
        monadZeroFirst
      };
    }
  });

  // output/Data.Monoid.Conj/index.js
  var require_Data_Monoid = __commonJS({
    "output/Data.Monoid.Conj/index.js"(exports, module) {
      "use strict";
      var Data_Eq = require_Data8();
      var Data_HeytingAlgebra = require_Data21();
      var Data_Ord = require_Data12();
      var Data_Show = require_Data14();
      var Conj = function(x) {
        return x;
      };
      var showConj = function(dictShow) {
        return {
          show: function(v) {
            return "(Conj " + (Data_Show.show(dictShow)(v) + ")");
          }
        };
      };
      var semiringConj = function(dictHeytingAlgebra) {
        return {
          zero: Data_HeytingAlgebra.tt(dictHeytingAlgebra),
          one: Data_HeytingAlgebra.ff(dictHeytingAlgebra),
          add: function(v) {
            return function(v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
            };
          },
          mul: function(v) {
            return function(v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
            };
          }
        };
      };
      var semigroupConj = function(dictHeytingAlgebra) {
        return {
          append: function(v) {
            return function(v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
            };
          }
        };
      };
      var ordConj = function(dictOrd) {
        return dictOrd;
      };
      var monoidConj = function(dictHeytingAlgebra) {
        return {
          mempty: Data_HeytingAlgebra.tt(dictHeytingAlgebra),
          Semigroup0: function() {
            return semigroupConj(dictHeytingAlgebra);
          }
        };
      };
      var functorConj = {
        map: function(f) {
          return function(m) {
            return f(m);
          };
        }
      };
      var eqConj = function(dictEq) {
        return dictEq;
      };
      var eq1Conj = {
        eq1: function(dictEq) {
          return Data_Eq.eq(eqConj(dictEq));
        }
      };
      var ord1Conj = {
        compare1: function(dictOrd) {
          return Data_Ord.compare(ordConj(dictOrd));
        },
        Eq10: function() {
          return eq1Conj;
        }
      };
      var boundedConj = function(dictBounded) {
        return dictBounded;
      };
      var applyConj = {
        apply: function(v) {
          return function(v1) {
            return v(v1);
          };
        },
        Functor0: function() {
          return functorConj;
        }
      };
      var bindConj = {
        bind: function(v) {
          return function(f) {
            return f(v);
          };
        },
        Apply0: function() {
          return applyConj;
        }
      };
      var applicativeConj = {
        pure: Conj,
        Apply0: function() {
          return applyConj;
        }
      };
      var monadConj = {
        Applicative0: function() {
          return applicativeConj;
        },
        Bind1: function() {
          return bindConj;
        }
      };
      module.exports = {
        Conj,
        eqConj,
        eq1Conj,
        ordConj,
        ord1Conj,
        boundedConj,
        showConj,
        functorConj,
        applyConj,
        applicativeConj,
        bindConj,
        monadConj,
        semigroupConj,
        monoidConj,
        semiringConj
      };
    }
  });

  // output/Data.Monoid.Disj/index.js
  var require_Data_Monoid2 = __commonJS({
    "output/Data.Monoid.Disj/index.js"(exports, module) {
      "use strict";
      var Data_Eq = require_Data8();
      var Data_HeytingAlgebra = require_Data21();
      var Data_Ord = require_Data12();
      var Data_Show = require_Data14();
      var Disj = function(x) {
        return x;
      };
      var showDisj = function(dictShow) {
        return {
          show: function(v) {
            return "(Disj " + (Data_Show.show(dictShow)(v) + ")");
          }
        };
      };
      var semiringDisj = function(dictHeytingAlgebra) {
        return {
          zero: Data_HeytingAlgebra.ff(dictHeytingAlgebra),
          one: Data_HeytingAlgebra.tt(dictHeytingAlgebra),
          add: function(v) {
            return function(v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
            };
          },
          mul: function(v) {
            return function(v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
            };
          }
        };
      };
      var semigroupDisj = function(dictHeytingAlgebra) {
        return {
          append: function(v) {
            return function(v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
            };
          }
        };
      };
      var ordDisj = function(dictOrd) {
        return dictOrd;
      };
      var monoidDisj = function(dictHeytingAlgebra) {
        return {
          mempty: Data_HeytingAlgebra.ff(dictHeytingAlgebra),
          Semigroup0: function() {
            return semigroupDisj(dictHeytingAlgebra);
          }
        };
      };
      var functorDisj = {
        map: function(f) {
          return function(m) {
            return f(m);
          };
        }
      };
      var eqDisj = function(dictEq) {
        return dictEq;
      };
      var eq1Disj = {
        eq1: function(dictEq) {
          return Data_Eq.eq(eqDisj(dictEq));
        }
      };
      var ord1Disj = {
        compare1: function(dictOrd) {
          return Data_Ord.compare(ordDisj(dictOrd));
        },
        Eq10: function() {
          return eq1Disj;
        }
      };
      var boundedDisj = function(dictBounded) {
        return dictBounded;
      };
      var applyDisj = {
        apply: function(v) {
          return function(v1) {
            return v(v1);
          };
        },
        Functor0: function() {
          return functorDisj;
        }
      };
      var bindDisj = {
        bind: function(v) {
          return function(f) {
            return f(v);
          };
        },
        Apply0: function() {
          return applyDisj;
        }
      };
      var applicativeDisj = {
        pure: Disj,
        Apply0: function() {
          return applyDisj;
        }
      };
      var monadDisj = {
        Applicative0: function() {
          return applicativeDisj;
        },
        Bind1: function() {
          return bindDisj;
        }
      };
      module.exports = {
        Disj,
        eqDisj,
        eq1Disj,
        ordDisj,
        ord1Disj,
        boundedDisj,
        showDisj,
        functorDisj,
        applyDisj,
        applicativeDisj,
        bindDisj,
        monadDisj,
        semigroupDisj,
        monoidDisj,
        semiringDisj
      };
    }
  });

  // output/Data.Monoid.Dual/index.js
  var require_Data_Monoid3 = __commonJS({
    "output/Data.Monoid.Dual/index.js"(exports, module) {
      "use strict";
      var Data_Eq = require_Data8();
      var Data_Monoid = require_Data18();
      var Data_Ord = require_Data12();
      var Data_Semigroup = require_Data7();
      var Data_Show = require_Data14();
      var Dual = function(x) {
        return x;
      };
      var showDual = function(dictShow) {
        return {
          show: function(v) {
            return "(Dual " + (Data_Show.show(dictShow)(v) + ")");
          }
        };
      };
      var semigroupDual = function(dictSemigroup) {
        return {
          append: function(v) {
            return function(v1) {
              return Data_Semigroup.append(dictSemigroup)(v1)(v);
            };
          }
        };
      };
      var ordDual = function(dictOrd) {
        return dictOrd;
      };
      var monoidDual = function(dictMonoid) {
        return {
          mempty: Data_Monoid.mempty(dictMonoid),
          Semigroup0: function() {
            return semigroupDual(dictMonoid.Semigroup0());
          }
        };
      };
      var functorDual = {
        map: function(f) {
          return function(m) {
            return f(m);
          };
        }
      };
      var eqDual = function(dictEq) {
        return dictEq;
      };
      var eq1Dual = {
        eq1: function(dictEq) {
          return Data_Eq.eq(eqDual(dictEq));
        }
      };
      var ord1Dual = {
        compare1: function(dictOrd) {
          return Data_Ord.compare(ordDual(dictOrd));
        },
        Eq10: function() {
          return eq1Dual;
        }
      };
      var boundedDual = function(dictBounded) {
        return dictBounded;
      };
      var applyDual = {
        apply: function(v) {
          return function(v1) {
            return v(v1);
          };
        },
        Functor0: function() {
          return functorDual;
        }
      };
      var bindDual = {
        bind: function(v) {
          return function(f) {
            return f(v);
          };
        },
        Apply0: function() {
          return applyDual;
        }
      };
      var applicativeDual = {
        pure: Dual,
        Apply0: function() {
          return applyDual;
        }
      };
      var monadDual = {
        Applicative0: function() {
          return applicativeDual;
        },
        Bind1: function() {
          return bindDual;
        }
      };
      module.exports = {
        Dual,
        eqDual,
        eq1Dual,
        ordDual,
        ord1Dual,
        boundedDual,
        showDual,
        functorDual,
        applyDual,
        applicativeDual,
        bindDual,
        monadDual,
        semigroupDual,
        monoidDual
      };
    }
  });

  // output/Data.Monoid.Endo/index.js
  var require_Data_Monoid4 = __commonJS({
    "output/Data.Monoid.Endo/index.js"(exports, module) {
      "use strict";
      var Control_Category = require_Control2();
      var Control_Semigroupoid = require_Control();
      var Data_Show = require_Data14();
      var Endo = function(x) {
        return x;
      };
      var showEndo = function(dictShow) {
        return {
          show: function(v) {
            return "(Endo " + (Data_Show.show(dictShow)(v) + ")");
          }
        };
      };
      var semigroupEndo = function(dictSemigroupoid) {
        return {
          append: function(v) {
            return function(v1) {
              return Control_Semigroupoid.compose(dictSemigroupoid)(v)(v1);
            };
          }
        };
      };
      var ordEndo = function(dictOrd) {
        return dictOrd;
      };
      var monoidEndo = function(dictCategory) {
        return {
          mempty: Control_Category.identity(dictCategory),
          Semigroup0: function() {
            return semigroupEndo(dictCategory.Semigroupoid0());
          }
        };
      };
      var eqEndo = function(dictEq) {
        return dictEq;
      };
      var boundedEndo = function(dictBounded) {
        return dictBounded;
      };
      module.exports = {
        Endo,
        eqEndo,
        ordEndo,
        boundedEndo,
        showEndo,
        semigroupEndo,
        monoidEndo
      };
    }
  });

  // output/Unsafe.Coerce/foreign.js
  var require_foreign29 = __commonJS({
    "output/Unsafe.Coerce/foreign.js"(exports) {
      "use strict";
      exports.unsafeCoerce = function(x) {
        return x;
      };
    }
  });

  // output/Unsafe.Coerce/index.js
  var require_Unsafe = __commonJS({
    "output/Unsafe.Coerce/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign29();
      module.exports = {
        unsafeCoerce: $foreign.unsafeCoerce
      };
    }
  });

  // output/Safe.Coerce/index.js
  var require_Safe = __commonJS({
    "output/Safe.Coerce/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var coerce = function(dictCoercible) {
        return Unsafe_Coerce.unsafeCoerce;
      };
      module.exports = {
        coerce
      };
    }
  });

  // output/Data.Newtype/index.js
  var require_Data26 = __commonJS({
    "output/Data.Newtype/index.js"(exports, module) {
      "use strict";
      var Safe_Coerce = require_Safe();
      var wrap = function(dictNewtype) {
        return Safe_Coerce.coerce();
      };
      var unwrap = function(dictNewtype) {
        return Safe_Coerce.coerce();
      };
      var underF2 = function(dictCoercible) {
        return function(dictCoercible1) {
          return function(dictNewtype) {
            return function(dictNewtype1) {
              return function(v) {
                return Safe_Coerce.coerce();
              };
            };
          };
        };
      };
      var underF = function(dictCoercible) {
        return function(dictCoercible1) {
          return function(dictNewtype) {
            return function(dictNewtype1) {
              return function(v) {
                return Safe_Coerce.coerce();
              };
            };
          };
        };
      };
      var under2 = function(dictNewtype) {
        return function(dictNewtype1) {
          return function(v) {
            return Safe_Coerce.coerce();
          };
        };
      };
      var under = function(dictNewtype) {
        return function(dictNewtype1) {
          return function(v) {
            return Safe_Coerce.coerce();
          };
        };
      };
      var un = function(dictNewtype) {
        return function(v) {
          return unwrap();
        };
      };
      var traverse = function(dictCoercible) {
        return function(dictNewtype) {
          return function(v) {
            return Safe_Coerce.coerce();
          };
        };
      };
      var overF2 = function(dictCoercible) {
        return function(dictCoercible1) {
          return function(dictNewtype) {
            return function(dictNewtype1) {
              return function(v) {
                return Safe_Coerce.coerce();
              };
            };
          };
        };
      };
      var overF = function(dictCoercible) {
        return function(dictCoercible1) {
          return function(dictNewtype) {
            return function(dictNewtype1) {
              return function(v) {
                return Safe_Coerce.coerce();
              };
            };
          };
        };
      };
      var over2 = function(dictNewtype) {
        return function(dictNewtype1) {
          return function(v) {
            return Safe_Coerce.coerce();
          };
        };
      };
      var over = function(dictNewtype) {
        return function(dictNewtype1) {
          return function(v) {
            return Safe_Coerce.coerce();
          };
        };
      };
      var newtypeMultiplicative = {
        Coercible0: function() {
          return void 0;
        }
      };
      var newtypeLast = {
        Coercible0: function() {
          return void 0;
        }
      };
      var newtypeFirst = {
        Coercible0: function() {
          return void 0;
        }
      };
      var newtypeEndo = {
        Coercible0: function() {
          return void 0;
        }
      };
      var newtypeDual = {
        Coercible0: function() {
          return void 0;
        }
      };
      var newtypeDisj = {
        Coercible0: function() {
          return void 0;
        }
      };
      var newtypeConj = {
        Coercible0: function() {
          return void 0;
        }
      };
      var newtypeAdditive = {
        Coercible0: function() {
          return void 0;
        }
      };
      var collect = function(dictCoercible) {
        return function(dictNewtype) {
          return function(v) {
            return Safe_Coerce.coerce();
          };
        };
      };
      var alaF = function(dictCoercible) {
        return function(dictCoercible1) {
          return function(dictNewtype) {
            return function(dictNewtype1) {
              return function(v) {
                return Safe_Coerce.coerce();
              };
            };
          };
        };
      };
      var ala = function(dictCoercible) {
        return function(dictNewtype) {
          return function(dictNewtype1) {
            return function(v) {
              return function(f) {
                return Safe_Coerce.coerce()(f(wrap()));
              };
            };
          };
        };
      };
      module.exports = {
        wrap,
        unwrap,
        un,
        ala,
        alaF,
        over,
        overF,
        under,
        underF,
        over2,
        overF2,
        under2,
        underF2,
        traverse,
        collect,
        newtypeAdditive,
        newtypeMultiplicative,
        newtypeConj,
        newtypeDisj,
        newtypeDual,
        newtypeEndo,
        newtypeFirst,
        newtypeLast
      };
    }
  });

  // output/Data.Foldable/index.js
  var require_Data27 = __commonJS({
    "output/Data.Foldable/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign27();
      var Control_Alt = require_Control6();
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Control_Bind = require_Control5();
      var Control_Category = require_Control2();
      var Control_Plus = require_Control9();
      var Data_Either = require_Data19();
      var Data_Eq = require_Data8();
      var Data_Function = require_Data2();
      var Data_Functor_Coproduct = require_Data_Functor2();
      var Data_HeytingAlgebra = require_Data21();
      var Data_Maybe = require_Data15();
      var Data_Maybe_First = require_Data_Maybe();
      var Data_Monoid = require_Data18();
      var Data_Monoid_Conj = require_Data_Monoid();
      var Data_Monoid_Disj = require_Data_Monoid2();
      var Data_Monoid_Dual = require_Data_Monoid3();
      var Data_Monoid_Endo = require_Data_Monoid4();
      var Data_Newtype = require_Data26();
      var Data_Ord = require_Data12();
      var Data_Ordering = require_Data9();
      var Data_Semigroup = require_Data7();
      var Data_Semiring = require_Data10();
      var Data_Unit = require_Data3();
      var foldr = function(dict) {
        return dict.foldr;
      };
      var indexr = function(dictFoldable) {
        return function(idx) {
          var go = function(a) {
            return function(cursor) {
              if (cursor.elem instanceof Data_Maybe.Just) {
                return cursor;
              }
              ;
              var $153 = cursor.pos === idx;
              if ($153) {
                return {
                  elem: new Data_Maybe.Just(a),
                  pos: cursor.pos
                };
              }
              ;
              return {
                pos: cursor.pos + 1 | 0,
                elem: cursor.elem
              };
            };
          };
          var $312 = foldr(dictFoldable)(go)({
            elem: Data_Maybe.Nothing.value,
            pos: 0
          });
          return function($313) {
            return function(v) {
              return v.elem;
            }($312($313));
          };
        };
      };
      var $$null = function(dictFoldable) {
        return foldr(dictFoldable)(function(v) {
          return function(v1) {
            return false;
          };
        })(true);
      };
      var oneOf = function(dictFoldable) {
        return function(dictPlus) {
          return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
        };
      };
      var oneOfMap = function(dictFoldable) {
        return function(dictPlus) {
          return function(f) {
            return foldr(dictFoldable)(function() {
              var $314 = Control_Alt.alt(dictPlus.Alt0());
              return function($315) {
                return $314(f($315));
              };
            }())(Control_Plus.empty(dictPlus));
          };
        };
      };
      var traverse_ = function(dictApplicative) {
        return function(dictFoldable) {
          return function(f) {
            return foldr(dictFoldable)(function() {
              var $316 = Control_Apply.applySecond(dictApplicative.Apply0());
              return function($317) {
                return $316(f($317));
              };
            }())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
        };
      };
      var for_ = function(dictApplicative) {
        return function(dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
        };
      };
      var sequence_ = function(dictApplicative) {
        return function(dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
        };
      };
      var foldl = function(dict) {
        return dict.foldl;
      };
      var indexl = function(dictFoldable) {
        return function(idx) {
          var go = function(cursor) {
            return function(a) {
              if (cursor.elem instanceof Data_Maybe.Just) {
                return cursor;
              }
              ;
              var $157 = cursor.pos === idx;
              if ($157) {
                return {
                  elem: new Data_Maybe.Just(a),
                  pos: cursor.pos
                };
              }
              ;
              return {
                pos: cursor.pos + 1 | 0,
                elem: cursor.elem
              };
            };
          };
          var $318 = foldl(dictFoldable)(go)({
            elem: Data_Maybe.Nothing.value,
            pos: 0
          });
          return function($319) {
            return function(v) {
              return v.elem;
            }($318($319));
          };
        };
      };
      var intercalate = function(dictFoldable) {
        return function(dictMonoid) {
          return function(sep) {
            return function(xs) {
              var go = function(v) {
                return function(x) {
                  if (v.init) {
                    return {
                      init: false,
                      acc: x
                    };
                  }
                  ;
                  return {
                    init: false,
                    acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                  };
                };
              };
              return foldl(dictFoldable)(go)({
                init: true,
                acc: Data_Monoid.mempty(dictMonoid)
              })(xs).acc;
            };
          };
        };
      };
      var length = function(dictFoldable) {
        return function(dictSemiring) {
          return foldl(dictFoldable)(function(c) {
            return function(v) {
              return Data_Semiring.add(dictSemiring)(Data_Semiring.one(dictSemiring))(c);
            };
          })(Data_Semiring.zero(dictSemiring));
        };
      };
      var maximumBy = function(dictFoldable) {
        return function(cmp) {
          var max$prime = function(v) {
            return function(v1) {
              if (v instanceof Data_Maybe.Nothing) {
                return new Data_Maybe.Just(v1);
              }
              ;
              if (v instanceof Data_Maybe.Just) {
                return new Data_Maybe.Just(function() {
                  var $164 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                  if ($164) {
                    return v.value0;
                  }
                  ;
                  return v1;
                }());
              }
              ;
              throw new Error("Failed pattern match at Data.Foldable (line 441, column 3 - line 441, column 27): " + [v.constructor.name, v1.constructor.name]);
            };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
        };
      };
      var maximum = function(dictOrd) {
        return function(dictFoldable) {
          return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
        };
      };
      var minimumBy = function(dictFoldable) {
        return function(cmp) {
          var min$prime = function(v) {
            return function(v1) {
              if (v instanceof Data_Maybe.Nothing) {
                return new Data_Maybe.Just(v1);
              }
              ;
              if (v instanceof Data_Maybe.Just) {
                return new Data_Maybe.Just(function() {
                  var $168 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.LT.value);
                  if ($168) {
                    return v.value0;
                  }
                  ;
                  return v1;
                }());
              }
              ;
              throw new Error("Failed pattern match at Data.Foldable (line 454, column 3 - line 454, column 27): " + [v.constructor.name, v1.constructor.name]);
            };
          };
          return foldl(dictFoldable)(min$prime)(Data_Maybe.Nothing.value);
        };
      };
      var minimum = function(dictOrd) {
        return function(dictFoldable) {
          return minimumBy(dictFoldable)(Data_Ord.compare(dictOrd));
        };
      };
      var product = function(dictFoldable) {
        return function(dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
        };
      };
      var sum = function(dictFoldable) {
        return function(dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
        };
      };
      var foldableTuple = {
        foldr: function(f) {
          return function(z) {
            return function(v) {
              return f(v.value1)(z);
            };
          };
        },
        foldl: function(f) {
          return function(z) {
            return function(v) {
              return f(z)(v.value1);
            };
          };
        },
        foldMap: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return f(v.value1);
            };
          };
        }
      };
      var foldableMultiplicative = {
        foldr: function(f) {
          return function(z) {
            return function(v) {
              return f(v)(z);
            };
          };
        },
        foldl: function(f) {
          return function(z) {
            return function(v) {
              return f(z)(v);
            };
          };
        },
        foldMap: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return f(v);
            };
          };
        }
      };
      var foldableMaybe = {
        foldr: function(v) {
          return function(z) {
            return function(v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                return z;
              }
              ;
              if (v1 instanceof Data_Maybe.Just) {
                return v(v1.value0)(z);
              }
              ;
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
            };
          };
        },
        foldl: function(v) {
          return function(z) {
            return function(v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                return z;
              }
              ;
              if (v1 instanceof Data_Maybe.Just) {
                return v(z)(v1.value0);
              }
              ;
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
            };
          };
        },
        foldMap: function(dictMonoid) {
          return function(v) {
            return function(v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                return Data_Monoid.mempty(dictMonoid);
              }
              ;
              if (v1 instanceof Data_Maybe.Just) {
                return v(v1.value0);
              }
              ;
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name]);
            };
          };
        }
      };
      var foldableIdentity = {
        foldr: function(f) {
          return function(z) {
            return function(v) {
              return f(v)(z);
            };
          };
        },
        foldl: function(f) {
          return function(z) {
            return function(v) {
              return f(z)(v);
            };
          };
        },
        foldMap: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return f(v);
            };
          };
        }
      };
      var foldableEither = {
        foldr: function(v) {
          return function(z) {
            return function(v1) {
              if (v1 instanceof Data_Either.Left) {
                return z;
              }
              ;
              if (v1 instanceof Data_Either.Right) {
                return v(v1.value0)(z);
              }
              ;
              throw new Error("Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
            };
          };
        },
        foldl: function(v) {
          return function(z) {
            return function(v1) {
              if (v1 instanceof Data_Either.Left) {
                return z;
              }
              ;
              if (v1 instanceof Data_Either.Right) {
                return v(z)(v1.value0);
              }
              ;
              throw new Error("Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
            };
          };
        },
        foldMap: function(dictMonoid) {
          return function(v) {
            return function(v1) {
              if (v1 instanceof Data_Either.Left) {
                return Data_Monoid.mempty(dictMonoid);
              }
              ;
              if (v1 instanceof Data_Either.Right) {
                return v(v1.value0);
              }
              ;
              throw new Error("Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): " + [v.constructor.name, v1.constructor.name]);
            };
          };
        }
      };
      var foldableDual = {
        foldr: function(f) {
          return function(z) {
            return function(v) {
              return f(v)(z);
            };
          };
        },
        foldl: function(f) {
          return function(z) {
            return function(v) {
              return f(z)(v);
            };
          };
        },
        foldMap: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return f(v);
            };
          };
        }
      };
      var foldableDisj = {
        foldr: function(f) {
          return function(z) {
            return function(v) {
              return f(v)(z);
            };
          };
        },
        foldl: function(f) {
          return function(z) {
            return function(v) {
              return f(z)(v);
            };
          };
        },
        foldMap: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return f(v);
            };
          };
        }
      };
      var foldableConst = {
        foldr: function(v) {
          return function(z) {
            return function(v1) {
              return z;
            };
          };
        },
        foldl: function(v) {
          return function(z) {
            return function(v1) {
              return z;
            };
          };
        },
        foldMap: function(dictMonoid) {
          return function(v) {
            return function(v1) {
              return Data_Monoid.mempty(dictMonoid);
            };
          };
        }
      };
      var foldableConj = {
        foldr: function(f) {
          return function(z) {
            return function(v) {
              return f(v)(z);
            };
          };
        },
        foldl: function(f) {
          return function(z) {
            return function(v) {
              return f(z)(v);
            };
          };
        },
        foldMap: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return f(v);
            };
          };
        }
      };
      var foldableAdditive = {
        foldr: function(f) {
          return function(z) {
            return function(v) {
              return f(v)(z);
            };
          };
        },
        foldl: function(f) {
          return function(z) {
            return function(v) {
              return f(z)(v);
            };
          };
        },
        foldMap: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return f(v);
            };
          };
        }
      };
      var foldMapDefaultR = function(dictFoldable) {
        return function(dictMonoid) {
          return function(f) {
            return foldr(dictFoldable)(function(x) {
              return function(acc) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
              };
            })(Data_Monoid.mempty(dictMonoid));
          };
        };
      };
      var foldableArray = {
        foldr: $foreign.foldrArray,
        foldl: $foreign.foldlArray,
        foldMap: function(dictMonoid) {
          return foldMapDefaultR(foldableArray)(dictMonoid);
        }
      };
      var foldMapDefaultL = function(dictFoldable) {
        return function(dictMonoid) {
          return function(f) {
            return foldl(dictFoldable)(function(acc) {
              return function(x) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(x));
              };
            })(Data_Monoid.mempty(dictMonoid));
          };
        };
      };
      var foldMap = function(dict) {
        return dict.foldMap;
      };
      var foldableApp = function(dictFoldable) {
        return {
          foldr: function(f) {
            return function(i) {
              return function(v) {
                return foldr(dictFoldable)(f)(i)(v);
              };
            };
          },
          foldl: function(f) {
            return function(i) {
              return function(v) {
                return foldl(dictFoldable)(f)(i)(v);
              };
            };
          },
          foldMap: function(dictMonoid) {
            return function(f) {
              return function(v) {
                return foldMap(dictFoldable)(dictMonoid)(f)(v);
              };
            };
          }
        };
      };
      var foldableCompose = function(dictFoldable) {
        return function(dictFoldable1) {
          return {
            foldr: function(f) {
              return function(i) {
                return function(v) {
                  return foldr(dictFoldable)(Data_Function.flip(foldr(dictFoldable1)(f)))(i)(v);
                };
              };
            },
            foldl: function(f) {
              return function(i) {
                return function(v) {
                  return foldl(dictFoldable)(foldl(dictFoldable1)(f))(i)(v);
                };
              };
            },
            foldMap: function(dictMonoid) {
              return function(f) {
                return function(v) {
                  return foldMap(dictFoldable)(dictMonoid)(foldMap(dictFoldable1)(dictMonoid)(f))(v);
                };
              };
            }
          };
        };
      };
      var foldableCoproduct = function(dictFoldable) {
        return function(dictFoldable1) {
          return {
            foldr: function(f) {
              return function(z) {
                return Data_Functor_Coproduct.coproduct(foldr(dictFoldable)(f)(z))(foldr(dictFoldable1)(f)(z));
              };
            },
            foldl: function(f) {
              return function(z) {
                return Data_Functor_Coproduct.coproduct(foldl(dictFoldable)(f)(z))(foldl(dictFoldable1)(f)(z));
              };
            },
            foldMap: function(dictMonoid) {
              return function(f) {
                return Data_Functor_Coproduct.coproduct(foldMap(dictFoldable)(dictMonoid)(f))(foldMap(dictFoldable1)(dictMonoid)(f));
              };
            }
          };
        };
      };
      var foldableFirst = {
        foldr: function(f) {
          return function(z) {
            return function(v) {
              return foldr(foldableMaybe)(f)(z)(v);
            };
          };
        },
        foldl: function(f) {
          return function(z) {
            return function(v) {
              return foldl(foldableMaybe)(f)(z)(v);
            };
          };
        },
        foldMap: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
            };
          };
        }
      };
      var foldableLast = {
        foldr: function(f) {
          return function(z) {
            return function(v) {
              return foldr(foldableMaybe)(f)(z)(v);
            };
          };
        },
        foldl: function(f) {
          return function(z) {
            return function(v) {
              return foldl(foldableMaybe)(f)(z)(v);
            };
          };
        },
        foldMap: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return foldMap(foldableMaybe)(dictMonoid)(f)(v);
            };
          };
        }
      };
      var foldableProduct = function(dictFoldable) {
        return function(dictFoldable1) {
          return {
            foldr: function(f) {
              return function(z) {
                return function(v) {
                  return foldr(dictFoldable)(f)(foldr(dictFoldable1)(f)(z)(v.value1))(v.value0);
                };
              };
            },
            foldl: function(f) {
              return function(z) {
                return function(v) {
                  return foldl(dictFoldable1)(f)(foldl(dictFoldable)(f)(z)(v.value0))(v.value1);
                };
              };
            },
            foldMap: function(dictMonoid) {
              return function(f) {
                return function(v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(foldMap(dictFoldable)(dictMonoid)(f)(v.value0))(foldMap(dictFoldable1)(dictMonoid)(f)(v.value1));
                };
              };
            }
          };
        };
      };
      var foldlDefault = function(dictFoldable) {
        return function(c) {
          return function(u) {
            return function(xs) {
              return Data_Newtype.unwrap()(Data_Newtype.unwrap()(foldMap(dictFoldable)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function() {
                var $320 = Data_Function.flip(c);
                return function($321) {
                  return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($320($321)));
                };
              }())(xs)))(u);
            };
          };
        };
      };
      var foldrDefault = function(dictFoldable) {
        return function(c) {
          return function(u) {
            return function(xs) {
              return Data_Newtype.unwrap()(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function($322) {
                return Data_Monoid_Endo.Endo(c($322));
              })(xs))(u);
            };
          };
        };
      };
      var lookup = function(dictFoldable) {
        return function(dictEq) {
          return function(a) {
            var $323 = Data_Newtype.unwrap();
            var $324 = foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function(v) {
              var $305 = Data_Eq.eq(dictEq)(a)(v.value0);
              if ($305) {
                return new Data_Maybe.Just(v.value1);
              }
              ;
              return Data_Maybe.Nothing.value;
            });
            return function($325) {
              return $323($324($325));
            };
          };
        };
      };
      var surroundMap = function(dictFoldable) {
        return function(dictSemigroup) {
          return function(d) {
            return function(t) {
              return function(f) {
                var joined = function(a) {
                  return function(m) {
                    return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(a))(m));
                  };
                };
                return Data_Newtype.unwrap()(foldMap(dictFoldable)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
              };
            };
          };
        };
      };
      var surround = function(dictFoldable) {
        return function(dictSemigroup) {
          return function(d) {
            return surroundMap(dictFoldable)(dictSemigroup)(d)(Control_Category.identity(Control_Category.categoryFn));
          };
        };
      };
      var foldM = function(dictFoldable) {
        return function(dictMonad) {
          return function(f) {
            return function(b0) {
              return foldl(dictFoldable)(function(b) {
                return function(a) {
                  return Control_Bind.bind(dictMonad.Bind1())(b)(Data_Function.flip(f)(a));
                };
              })(Control_Applicative.pure(dictMonad.Applicative0())(b0));
            };
          };
        };
      };
      var fold = function(dictFoldable) {
        return function(dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
        };
      };
      var findMap = function(dictFoldable) {
        return function(p) {
          var go = function(v) {
            return function(v1) {
              if (v instanceof Data_Maybe.Nothing) {
                return p(v1);
              }
              ;
              return v;
            };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
        };
      };
      var find = function(dictFoldable) {
        return function(p) {
          var go = function(v) {
            return function(v1) {
              if (v instanceof Data_Maybe.Nothing && p(v1)) {
                return new Data_Maybe.Just(v1);
              }
              ;
              return v;
            };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
        };
      };
      var any = function(dictFoldable) {
        return function(dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
        };
      };
      var elem = function(dictFoldable) {
        return function(dictEq) {
          var $326 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $327 = Data_Eq.eq(dictEq);
          return function($328) {
            return $326($327($328));
          };
        };
      };
      var notElem = function(dictFoldable) {
        return function(dictEq) {
          return function(x) {
            var $329 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
            var $330 = elem(dictFoldable)(dictEq)(x);
            return function($331) {
              return $329($330($331));
            };
          };
        };
      };
      var or = function(dictFoldable) {
        return function(dictHeytingAlgebra) {
          return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
        };
      };
      var all = function(dictFoldable) {
        return function(dictHeytingAlgebra) {
          return Data_Newtype.alaF()()()()(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
        };
      };
      var and = function(dictFoldable) {
        return function(dictHeytingAlgebra) {
          return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
        };
      };
      module.exports = {
        foldr,
        foldl,
        foldMap,
        foldrDefault,
        foldlDefault,
        foldMapDefaultL,
        foldMapDefaultR,
        fold,
        foldM,
        traverse_,
        for_,
        sequence_,
        oneOf,
        oneOfMap,
        intercalate,
        surroundMap,
        surround,
        and,
        or,
        all,
        any,
        sum,
        product,
        elem,
        notElem,
        indexl,
        indexr,
        find,
        findMap,
        maximum,
        maximumBy,
        minimum,
        minimumBy,
        "null": $$null,
        length,
        lookup,
        foldableArray,
        foldableMaybe,
        foldableFirst,
        foldableLast,
        foldableAdditive,
        foldableDual,
        foldableDisj,
        foldableConj,
        foldableMultiplicative,
        foldableEither,
        foldableTuple,
        foldableIdentity,
        foldableConst,
        foldableProduct,
        foldableCoproduct,
        foldableCompose,
        foldableApp
      };
    }
  });

  // output/Data.FunctorWithIndex/foreign.js
  var require_foreign30 = __commonJS({
    "output/Data.FunctorWithIndex/foreign.js"(exports) {
      "use strict";
      exports.mapWithIndexArray = function(f) {
        return function(xs) {
          var l = xs.length;
          var result = Array(l);
          for (var i = 0; i < l; i++) {
            result[i] = f(i)(xs[i]);
          }
          return result;
        };
      };
    }
  });

  // output/Data.Const/index.js
  var require_Data28 = __commonJS({
    "output/Data.Const/index.js"(exports, module) {
      "use strict";
      var Data_Eq = require_Data8();
      var Data_Functor_Invariant = require_Data_Functor();
      var Data_Monoid = require_Data18();
      var Data_Ord = require_Data12();
      var Data_Semigroup = require_Data7();
      var Data_Show = require_Data14();
      var Const = function(x) {
        return x;
      };
      var showConst = function(dictShow) {
        return {
          show: function(v) {
            return "(Const " + (Data_Show.show(dictShow)(v) + ")");
          }
        };
      };
      var semiringConst = function(dictSemiring) {
        return dictSemiring;
      };
      var semigroupoidConst = {
        compose: function(v) {
          return function(v1) {
            return v1;
          };
        }
      };
      var semigroupConst = function(dictSemigroup) {
        return dictSemigroup;
      };
      var ringConst = function(dictRing) {
        return dictRing;
      };
      var ordConst = function(dictOrd) {
        return dictOrd;
      };
      var newtypeConst = {
        Coercible0: function() {
          return void 0;
        }
      };
      var monoidConst = function(dictMonoid) {
        return dictMonoid;
      };
      var heytingAlgebraConst = function(dictHeytingAlgebra) {
        return dictHeytingAlgebra;
      };
      var functorConst = {
        map: function(f) {
          return function(m) {
            return m;
          };
        }
      };
      var invariantConst = {
        imap: Data_Functor_Invariant.imapF(functorConst)
      };
      var euclideanRingConst = function(dictEuclideanRing) {
        return dictEuclideanRing;
      };
      var eqConst = function(dictEq) {
        return dictEq;
      };
      var eq1Const = function(dictEq) {
        return {
          eq1: function(dictEq1) {
            return Data_Eq.eq(eqConst(dictEq));
          }
        };
      };
      var ord1Const = function(dictOrd) {
        return {
          compare1: function(dictOrd1) {
            return Data_Ord.compare(ordConst(dictOrd));
          },
          Eq10: function() {
            return eq1Const(dictOrd.Eq0());
          }
        };
      };
      var commutativeRingConst = function(dictCommutativeRing) {
        return dictCommutativeRing;
      };
      var boundedConst = function(dictBounded) {
        return dictBounded;
      };
      var booleanAlgebraConst = function(dictBooleanAlgebra) {
        return dictBooleanAlgebra;
      };
      var applyConst = function(dictSemigroup) {
        return {
          apply: function(v) {
            return function(v1) {
              return Data_Semigroup.append(dictSemigroup)(v)(v1);
            };
          },
          Functor0: function() {
            return functorConst;
          }
        };
      };
      var applicativeConst = function(dictMonoid) {
        return {
          pure: function(v) {
            return Data_Monoid.mempty(dictMonoid);
          },
          Apply0: function() {
            return applyConst(dictMonoid.Semigroup0());
          }
        };
      };
      module.exports = {
        Const,
        newtypeConst,
        eqConst,
        eq1Const,
        ordConst,
        ord1Const,
        boundedConst,
        showConst,
        semigroupoidConst,
        semigroupConst,
        monoidConst,
        semiringConst,
        ringConst,
        euclideanRingConst,
        commutativeRingConst,
        heytingAlgebraConst,
        booleanAlgebraConst,
        functorConst,
        invariantConst,
        applyConst,
        applicativeConst
      };
    }
  });

  // output/Data.Functor.App/index.js
  var require_Data_Functor3 = __commonJS({
    "output/Data.Functor.App/index.js"(exports, module) {
      "use strict";
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Data_Eq = require_Data8();
      var Data_Monoid = require_Data18();
      var Data_Ord = require_Data12();
      var Data_Semigroup = require_Data7();
      var Data_Show = require_Data14();
      var Unsafe_Coerce = require_Unsafe();
      var App = function(x) {
        return x;
      };
      var showApp = function(dictShow) {
        return {
          show: function(v) {
            return "(App " + (Data_Show.show(dictShow)(v) + ")");
          }
        };
      };
      var semigroupApp = function(dictApply) {
        return function(dictSemigroup) {
          return {
            append: function(v) {
              return function(v1) {
                return Control_Apply.lift2(dictApply)(Data_Semigroup.append(dictSemigroup))(v)(v1);
              };
            }
          };
        };
      };
      var plusApp = function(dictPlus) {
        return dictPlus;
      };
      var newtypeApp = {
        Coercible0: function() {
          return void 0;
        }
      };
      var monoidApp = function(dictApplicative) {
        return function(dictMonoid) {
          return {
            mempty: Control_Applicative.pure(dictApplicative)(Data_Monoid.mempty(dictMonoid)),
            Semigroup0: function() {
              return semigroupApp(dictApplicative.Apply0())(dictMonoid.Semigroup0());
            }
          };
        };
      };
      var monadPlusApp = function(dictMonadPlus) {
        return dictMonadPlus;
      };
      var monadApp = function(dictMonad) {
        return dictMonad;
      };
      var lazyApp = function(dictLazy) {
        return dictLazy;
      };
      var hoistLowerApp = Unsafe_Coerce.unsafeCoerce;
      var hoistLiftApp = Unsafe_Coerce.unsafeCoerce;
      var hoistApp = function(f) {
        return function(v) {
          return f(v);
        };
      };
      var functorApp = function(dictFunctor) {
        return dictFunctor;
      };
      var extendApp = function(dictExtend) {
        return dictExtend;
      };
      var eqApp = function(dictEq1) {
        return function(dictEq) {
          return {
            eq: function(x) {
              return function(y) {
                return Data_Eq.eq1(dictEq1)(dictEq)(x)(y);
              };
            }
          };
        };
      };
      var ordApp = function(dictOrd1) {
        return function(dictOrd) {
          return {
            compare: function(x) {
              return function(y) {
                return Data_Ord.compare1(dictOrd1)(dictOrd)(x)(y);
              };
            },
            Eq0: function() {
              return eqApp(dictOrd1.Eq10())(dictOrd.Eq0());
            }
          };
        };
      };
      var eq1App = function(dictEq1) {
        return {
          eq1: function(dictEq) {
            return Data_Eq.eq(eqApp(dictEq1)(dictEq));
          }
        };
      };
      var ord1App = function(dictOrd1) {
        return {
          compare1: function(dictOrd) {
            return Data_Ord.compare(ordApp(dictOrd1)(dictOrd));
          },
          Eq10: function() {
            return eq1App(dictOrd1.Eq10());
          }
        };
      };
      var comonadApp = function(dictComonad) {
        return dictComonad;
      };
      var bindApp = function(dictBind) {
        return dictBind;
      };
      var applyApp = function(dictApply) {
        return dictApply;
      };
      var applicativeApp = function(dictApplicative) {
        return dictApplicative;
      };
      var alternativeApp = function(dictAlternative) {
        return dictAlternative;
      };
      var monadZeroApp = function(dictMonadZero) {
        return {
          Monad0: function() {
            return monadApp(dictMonadZero.Monad0());
          },
          Alternative1: function() {
            return alternativeApp(dictMonadZero.Alternative1());
          },
          MonadZeroIsDeprecated2: function() {
            return void 0;
          }
        };
      };
      var altApp = function(dictAlt) {
        return dictAlt;
      };
      module.exports = {
        App,
        hoistApp,
        hoistLiftApp,
        hoistLowerApp,
        newtypeApp,
        eqApp,
        eq1App,
        ordApp,
        ord1App,
        showApp,
        semigroupApp,
        monoidApp,
        monadZeroApp,
        functorApp,
        applyApp,
        applicativeApp,
        bindApp,
        monadApp,
        altApp,
        plusApp,
        alternativeApp,
        monadPlusApp,
        lazyApp,
        extendApp,
        comonadApp
      };
    }
  });

  // output/Data.Functor.Compose/index.js
  var require_Data_Functor4 = __commonJS({
    "output/Data.Functor.Compose/index.js"(exports, module) {
      "use strict";
      var Control_Alt = require_Control6();
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Control_Plus = require_Control9();
      var Data_Eq = require_Data8();
      var Data_Functor = require_Data4();
      var Data_Functor_App = require_Data_Functor3();
      var Data_Ord = require_Data12();
      var Data_Show = require_Data14();
      var Compose = function(x) {
        return x;
      };
      var showCompose = function(dictShow) {
        return {
          show: function(v) {
            return "(Compose " + (Data_Show.show(dictShow)(v) + ")");
          }
        };
      };
      var newtypeCompose = {
        Coercible0: function() {
          return void 0;
        }
      };
      var functorCompose = function(dictFunctor) {
        return function(dictFunctor1) {
          return {
            map: function(f) {
              return function(v) {
                return Compose(Data_Functor.map(dictFunctor)(Data_Functor.map(dictFunctor1)(f))(v));
              };
            }
          };
        };
      };
      var eqCompose = function(dictEq1) {
        return function(dictEq11) {
          return function(dictEq) {
            return {
              eq: function(v) {
                return function(v1) {
                  return Data_Eq.eq1(dictEq1)(Data_Functor_App.eqApp(dictEq11)(dictEq))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
                };
              }
            };
          };
        };
      };
      var ordCompose = function(dictOrd1) {
        return function(dictOrd11) {
          return function(dictOrd) {
            return {
              compare: function(v) {
                return function(v1) {
                  return Data_Ord.compare1(dictOrd1)(Data_Functor_App.ordApp(dictOrd11)(dictOrd))(Data_Functor_App.hoistLiftApp(v))(Data_Functor_App.hoistLiftApp(v1));
                };
              },
              Eq0: function() {
                return eqCompose(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
              }
            };
          };
        };
      };
      var eq1Compose = function(dictEq1) {
        return function(dictEq11) {
          return {
            eq1: function(dictEq) {
              return Data_Eq.eq(eqCompose(dictEq1)(dictEq11)(dictEq));
            }
          };
        };
      };
      var ord1Compose = function(dictOrd1) {
        return function(dictOrd11) {
          return {
            compare1: function(dictOrd) {
              return Data_Ord.compare(ordCompose(dictOrd1)(dictOrd11)(dictOrd));
            },
            Eq10: function() {
              return eq1Compose(dictOrd1.Eq10())(dictOrd11.Eq10());
            }
          };
        };
      };
      var bihoistCompose = function(dictFunctor) {
        return function(natF) {
          return function(natG) {
            return function(v) {
              return natF(Data_Functor.map(dictFunctor)(natG)(v));
            };
          };
        };
      };
      var applyCompose = function(dictApply) {
        return function(dictApply1) {
          return {
            apply: function(v) {
              return function(v1) {
                return Compose(Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Control_Apply.apply(dictApply1))(v))(v1));
              };
            },
            Functor0: function() {
              return functorCompose(dictApply.Functor0())(dictApply1.Functor0());
            }
          };
        };
      };
      var applicativeCompose = function(dictApplicative) {
        return function(dictApplicative1) {
          return {
            pure: function() {
              var $51 = Control_Applicative.pure(dictApplicative);
              var $52 = Control_Applicative.pure(dictApplicative1);
              return function($53) {
                return Compose($51($52($53)));
              };
            }(),
            Apply0: function() {
              return applyCompose(dictApplicative.Apply0())(dictApplicative1.Apply0());
            }
          };
        };
      };
      var altCompose = function(dictAlt) {
        return function(dictFunctor) {
          return {
            alt: function(v) {
              return function(v1) {
                return Compose(Control_Alt.alt(dictAlt)(v)(v1));
              };
            },
            Functor0: function() {
              return functorCompose(dictAlt.Functor0())(dictFunctor);
            }
          };
        };
      };
      var plusCompose = function(dictPlus) {
        return function(dictFunctor) {
          return {
            empty: Control_Plus.empty(dictPlus),
            Alt0: function() {
              return altCompose(dictPlus.Alt0())(dictFunctor);
            }
          };
        };
      };
      var alternativeCompose = function(dictAlternative) {
        return function(dictApplicative) {
          return {
            Applicative0: function() {
              return applicativeCompose(dictAlternative.Applicative0())(dictApplicative);
            },
            Plus1: function() {
              return plusCompose(dictAlternative.Plus1())(dictApplicative.Apply0().Functor0());
            }
          };
        };
      };
      module.exports = {
        Compose,
        bihoistCompose,
        newtypeCompose,
        eqCompose,
        eq1Compose,
        ordCompose,
        ord1Compose,
        showCompose,
        functorCompose,
        applyCompose,
        applicativeCompose,
        altCompose,
        plusCompose,
        alternativeCompose
      };
    }
  });

  // output/Data.Functor.Product/index.js
  var require_Data_Functor5 = __commonJS({
    "output/Data.Functor.Product/index.js"(exports, module) {
      "use strict";
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Control_Bind = require_Control5();
      var Data_Bifunctor = require_Data25();
      var Data_Eq = require_Data8();
      var Data_Functor = require_Data4();
      var Data_Newtype = require_Data26();
      var Data_Ord = require_Data12();
      var Data_Ordering = require_Data9();
      var Data_Show = require_Data14();
      var Data_Tuple = require_Data22();
      var Product = function(x) {
        return x;
      };
      var showProduct = function(dictShow) {
        return function(dictShow1) {
          return {
            show: function(v) {
              return "(product " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
            }
          };
        };
      };
      var product = function(fa) {
        return function(ga) {
          return new Data_Tuple.Tuple(fa, ga);
        };
      };
      var newtypeProduct = {
        Coercible0: function() {
          return void 0;
        }
      };
      var functorProduct = function(dictFunctor) {
        return function(dictFunctor1) {
          return {
            map: function(f) {
              return function(v) {
                return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(Data_Functor.map(dictFunctor)(f))(Data_Functor.map(dictFunctor1)(f))(v);
              };
            }
          };
        };
      };
      var eq1Product = function(dictEq1) {
        return function(dictEq11) {
          return {
            eq1: function(dictEq) {
              return function(v) {
                return function(v1) {
                  return Data_Eq.eq1(dictEq1)(dictEq)(v.value0)(v1.value0) && Data_Eq.eq1(dictEq11)(dictEq)(v.value1)(v1.value1);
                };
              };
            }
          };
        };
      };
      var eqProduct = function(dictEq1) {
        return function(dictEq11) {
          return function(dictEq) {
            return {
              eq: Data_Eq.eq1(eq1Product(dictEq1)(dictEq11))(dictEq)
            };
          };
        };
      };
      var ord1Product = function(dictOrd1) {
        return function(dictOrd11) {
          return {
            compare1: function(dictOrd) {
              return function(v) {
                return function(v1) {
                  var v2 = Data_Ord.compare1(dictOrd1)(dictOrd)(v.value0)(v1.value0);
                  if (v2 instanceof Data_Ordering.EQ) {
                    return Data_Ord.compare1(dictOrd11)(dictOrd)(v.value1)(v1.value1);
                  }
                  ;
                  return v2;
                };
              };
            },
            Eq10: function() {
              return eq1Product(dictOrd1.Eq10())(dictOrd11.Eq10());
            }
          };
        };
      };
      var ordProduct = function(dictOrd1) {
        return function(dictOrd11) {
          return function(dictOrd) {
            return {
              compare: Data_Ord.compare1(ord1Product(dictOrd1)(dictOrd11))(dictOrd),
              Eq0: function() {
                return eqProduct(dictOrd1.Eq10())(dictOrd11.Eq10())(dictOrd.Eq0());
              }
            };
          };
        };
      };
      var bihoistProduct = function(natF) {
        return function(natG) {
          return function(v) {
            return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(natF)(natG)(v);
          };
        };
      };
      var applyProduct = function(dictApply) {
        return function(dictApply1) {
          return {
            apply: function(v) {
              return function(v1) {
                return product(Control_Apply.apply(dictApply)(v.value0)(v1.value0))(Control_Apply.apply(dictApply1)(v.value1)(v1.value1));
              };
            },
            Functor0: function() {
              return functorProduct(dictApply.Functor0())(dictApply1.Functor0());
            }
          };
        };
      };
      var bindProduct = function(dictBind) {
        return function(dictBind1) {
          return {
            bind: function(v) {
              return function(f) {
                return product(Control_Bind.bind(dictBind)(v.value0)(function() {
                  var $67 = Data_Newtype.unwrap();
                  return function($68) {
                    return Data_Tuple.fst($67(f($68)));
                  };
                }()))(Control_Bind.bind(dictBind1)(v.value1)(function() {
                  var $69 = Data_Newtype.unwrap();
                  return function($70) {
                    return Data_Tuple.snd($69(f($70)));
                  };
                }()));
              };
            },
            Apply0: function() {
              return applyProduct(dictBind.Apply0())(dictBind1.Apply0());
            }
          };
        };
      };
      var applicativeProduct = function(dictApplicative) {
        return function(dictApplicative1) {
          return {
            pure: function(a) {
              return product(Control_Applicative.pure(dictApplicative)(a))(Control_Applicative.pure(dictApplicative1)(a));
            },
            Apply0: function() {
              return applyProduct(dictApplicative.Apply0())(dictApplicative1.Apply0());
            }
          };
        };
      };
      var monadProduct = function(dictMonad) {
        return function(dictMonad1) {
          return {
            Applicative0: function() {
              return applicativeProduct(dictMonad.Applicative0())(dictMonad1.Applicative0());
            },
            Bind1: function() {
              return bindProduct(dictMonad.Bind1())(dictMonad1.Bind1());
            }
          };
        };
      };
      module.exports = {
        Product,
        product,
        bihoistProduct,
        newtypeProduct,
        eqProduct,
        eq1Product,
        ordProduct,
        ord1Product,
        showProduct,
        functorProduct,
        applyProduct,
        applicativeProduct,
        bindProduct,
        monadProduct
      };
    }
  });

  // output/Data.Maybe.Last/index.js
  var require_Data_Maybe2 = __commonJS({
    "output/Data.Maybe.Last/index.js"(exports, module) {
      "use strict";
      var Data_Maybe = require_Data15();
      var Data_Monoid = require_Data18();
      var Data_Semigroup = require_Data7();
      var Data_Show = require_Data14();
      var Last = function(x) {
        return x;
      };
      var showLast = function(dictShow) {
        return {
          show: function(v) {
            return "(Last " + (Data_Show.show(Data_Maybe.showMaybe(dictShow))(v) + ")");
          }
        };
      };
      var semigroupLast = {
        append: function(v) {
          return function(v1) {
            if (v1 instanceof Data_Maybe.Just) {
              return v1;
            }
            ;
            if (v1 instanceof Data_Maybe.Nothing) {
              return v;
            }
            ;
            throw new Error("Failed pattern match at Data.Maybe.Last (line 52, column 1 - line 54, column 36): " + [v.constructor.name, v1.constructor.name]);
          };
        }
      };
      var ordLast = function(dictOrd) {
        return Data_Maybe.ordMaybe(dictOrd);
      };
      var ord1Last = Data_Maybe.ord1Maybe;
      var newtypeLast = {
        Coercible0: function() {
          return void 0;
        }
      };
      var monoidLast = {
        mempty: Data_Maybe.Nothing.value,
        Semigroup0: function() {
          return semigroupLast;
        }
      };
      var monadLast = Data_Maybe.monadMaybe;
      var invariantLast = Data_Maybe.invariantMaybe;
      var functorLast = Data_Maybe.functorMaybe;
      var extendLast = Data_Maybe.extendMaybe;
      var eqLast = function(dictEq) {
        return Data_Maybe.eqMaybe(dictEq);
      };
      var eq1Last = Data_Maybe.eq1Maybe;
      var boundedLast = function(dictBounded) {
        return Data_Maybe.boundedMaybe(dictBounded);
      };
      var bindLast = Data_Maybe.bindMaybe;
      var applyLast = Data_Maybe.applyMaybe;
      var applicativeLast = Data_Maybe.applicativeMaybe;
      var altLast = {
        alt: Data_Semigroup.append(semigroupLast),
        Functor0: function() {
          return functorLast;
        }
      };
      var plusLast = {
        empty: Data_Monoid.mempty(monoidLast),
        Alt0: function() {
          return altLast;
        }
      };
      var alternativeLast = {
        Applicative0: function() {
          return applicativeLast;
        },
        Plus1: function() {
          return plusLast;
        }
      };
      var monadZeroLast = {
        Monad0: function() {
          return monadLast;
        },
        Alternative1: function() {
          return alternativeLast;
        },
        MonadZeroIsDeprecated2: function() {
          return void 0;
        }
      };
      module.exports = {
        Last,
        newtypeLast,
        eqLast,
        eq1Last,
        ordLast,
        ord1Last,
        boundedLast,
        functorLast,
        invariantLast,
        applyLast,
        applicativeLast,
        bindLast,
        monadLast,
        extendLast,
        showLast,
        semigroupLast,
        monoidLast,
        altLast,
        plusLast,
        alternativeLast,
        monadZeroLast
      };
    }
  });

  // output/Data.Monoid.Additive/index.js
  var require_Data_Monoid5 = __commonJS({
    "output/Data.Monoid.Additive/index.js"(exports, module) {
      "use strict";
      var Data_Eq = require_Data8();
      var Data_Ord = require_Data12();
      var Data_Semiring = require_Data10();
      var Data_Show = require_Data14();
      var Additive = function(x) {
        return x;
      };
      var showAdditive = function(dictShow) {
        return {
          show: function(v) {
            return "(Additive " + (Data_Show.show(dictShow)(v) + ")");
          }
        };
      };
      var semigroupAdditive = function(dictSemiring) {
        return {
          append: function(v) {
            return function(v1) {
              return Data_Semiring.add(dictSemiring)(v)(v1);
            };
          }
        };
      };
      var ordAdditive = function(dictOrd) {
        return dictOrd;
      };
      var monoidAdditive = function(dictSemiring) {
        return {
          mempty: Data_Semiring.zero(dictSemiring),
          Semigroup0: function() {
            return semigroupAdditive(dictSemiring);
          }
        };
      };
      var functorAdditive = {
        map: function(f) {
          return function(m) {
            return f(m);
          };
        }
      };
      var eqAdditive = function(dictEq) {
        return dictEq;
      };
      var eq1Additive = {
        eq1: function(dictEq) {
          return Data_Eq.eq(eqAdditive(dictEq));
        }
      };
      var ord1Additive = {
        compare1: function(dictOrd) {
          return Data_Ord.compare(ordAdditive(dictOrd));
        },
        Eq10: function() {
          return eq1Additive;
        }
      };
      var boundedAdditive = function(dictBounded) {
        return dictBounded;
      };
      var applyAdditive = {
        apply: function(v) {
          return function(v1) {
            return v(v1);
          };
        },
        Functor0: function() {
          return functorAdditive;
        }
      };
      var bindAdditive = {
        bind: function(v) {
          return function(f) {
            return f(v);
          };
        },
        Apply0: function() {
          return applyAdditive;
        }
      };
      var applicativeAdditive = {
        pure: Additive,
        Apply0: function() {
          return applyAdditive;
        }
      };
      var monadAdditive = {
        Applicative0: function() {
          return applicativeAdditive;
        },
        Bind1: function() {
          return bindAdditive;
        }
      };
      module.exports = {
        Additive,
        eqAdditive,
        eq1Additive,
        ordAdditive,
        ord1Additive,
        boundedAdditive,
        showAdditive,
        functorAdditive,
        applyAdditive,
        applicativeAdditive,
        bindAdditive,
        monadAdditive,
        semigroupAdditive,
        monoidAdditive
      };
    }
  });

  // output/Data.Monoid.Multiplicative/index.js
  var require_Data_Monoid6 = __commonJS({
    "output/Data.Monoid.Multiplicative/index.js"(exports, module) {
      "use strict";
      var Data_Eq = require_Data8();
      var Data_Ord = require_Data12();
      var Data_Semiring = require_Data10();
      var Data_Show = require_Data14();
      var Multiplicative = function(x) {
        return x;
      };
      var showMultiplicative = function(dictShow) {
        return {
          show: function(v) {
            return "(Multiplicative " + (Data_Show.show(dictShow)(v) + ")");
          }
        };
      };
      var semigroupMultiplicative = function(dictSemiring) {
        return {
          append: function(v) {
            return function(v1) {
              return Data_Semiring.mul(dictSemiring)(v)(v1);
            };
          }
        };
      };
      var ordMultiplicative = function(dictOrd) {
        return dictOrd;
      };
      var monoidMultiplicative = function(dictSemiring) {
        return {
          mempty: Data_Semiring.one(dictSemiring),
          Semigroup0: function() {
            return semigroupMultiplicative(dictSemiring);
          }
        };
      };
      var functorMultiplicative = {
        map: function(f) {
          return function(m) {
            return f(m);
          };
        }
      };
      var eqMultiplicative = function(dictEq) {
        return dictEq;
      };
      var eq1Multiplicative = {
        eq1: function(dictEq) {
          return Data_Eq.eq(eqMultiplicative(dictEq));
        }
      };
      var ord1Multiplicative = {
        compare1: function(dictOrd) {
          return Data_Ord.compare(ordMultiplicative(dictOrd));
        },
        Eq10: function() {
          return eq1Multiplicative;
        }
      };
      var boundedMultiplicative = function(dictBounded) {
        return dictBounded;
      };
      var applyMultiplicative = {
        apply: function(v) {
          return function(v1) {
            return v(v1);
          };
        },
        Functor0: function() {
          return functorMultiplicative;
        }
      };
      var bindMultiplicative = {
        bind: function(v) {
          return function(f) {
            return f(v);
          };
        },
        Apply0: function() {
          return applyMultiplicative;
        }
      };
      var applicativeMultiplicative = {
        pure: Multiplicative,
        Apply0: function() {
          return applyMultiplicative;
        }
      };
      var monadMultiplicative = {
        Applicative0: function() {
          return applicativeMultiplicative;
        },
        Bind1: function() {
          return bindMultiplicative;
        }
      };
      module.exports = {
        Multiplicative,
        eqMultiplicative,
        eq1Multiplicative,
        ordMultiplicative,
        ord1Multiplicative,
        boundedMultiplicative,
        showMultiplicative,
        functorMultiplicative,
        applyMultiplicative,
        applicativeMultiplicative,
        bindMultiplicative,
        monadMultiplicative,
        semigroupMultiplicative,
        monoidMultiplicative
      };
    }
  });

  // output/Data.FunctorWithIndex/index.js
  var require_Data29 = __commonJS({
    "output/Data.FunctorWithIndex/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign30();
      var Data_Bifunctor = require_Data25();
      var Data_Const = require_Data28();
      var Data_Either = require_Data19();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Data_Functor_App = require_Data_Functor3();
      var Data_Functor_Compose = require_Data_Functor4();
      var Data_Functor_Coproduct = require_Data_Functor2();
      var Data_Functor_Product = require_Data_Functor5();
      var Data_Identity = require_Data20();
      var Data_Maybe = require_Data15();
      var Data_Maybe_First = require_Data_Maybe();
      var Data_Maybe_Last = require_Data_Maybe2();
      var Data_Monoid_Additive = require_Data_Monoid5();
      var Data_Monoid_Conj = require_Data_Monoid();
      var Data_Monoid_Disj = require_Data_Monoid2();
      var Data_Monoid_Dual = require_Data_Monoid3();
      var Data_Monoid_Multiplicative = require_Data_Monoid6();
      var Data_Tuple = require_Data22();
      var Data_Unit = require_Data3();
      var mapWithIndex = function(dict) {
        return dict.mapWithIndex;
      };
      var mapDefault = function(dictFunctorWithIndex) {
        return function(f) {
          return mapWithIndex(dictFunctorWithIndex)(Data_Function["const"](f));
        };
      };
      var functorWithIndexTuple = {
        mapWithIndex: function(f) {
          return Data_Functor.map(Data_Tuple.functorTuple)(f(Data_Unit.unit));
        },
        Functor0: function() {
          return Data_Tuple.functorTuple;
        }
      };
      var functorWithIndexProduct = function(dictFunctorWithIndex) {
        return function(dictFunctorWithIndex1) {
          return {
            mapWithIndex: function(f) {
              return function(v) {
                return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorTuple)(mapWithIndex(dictFunctorWithIndex)(function($28) {
                  return f(Data_Either.Left.create($28));
                }))(mapWithIndex(dictFunctorWithIndex1)(function($29) {
                  return f(Data_Either.Right.create($29));
                }))(v);
              };
            },
            Functor0: function() {
              return Data_Functor_Product.functorProduct(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
            }
          };
        };
      };
      var functorWithIndexMultiplicative = {
        mapWithIndex: function(f) {
          return Data_Functor.map(Data_Monoid_Multiplicative.functorMultiplicative)(f(Data_Unit.unit));
        },
        Functor0: function() {
          return Data_Monoid_Multiplicative.functorMultiplicative;
        }
      };
      var functorWithIndexMaybe = {
        mapWithIndex: function(f) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(f(Data_Unit.unit));
        },
        Functor0: function() {
          return Data_Maybe.functorMaybe;
        }
      };
      var functorWithIndexLast = {
        mapWithIndex: function(f) {
          return Data_Functor.map(Data_Maybe_Last.functorLast)(f(Data_Unit.unit));
        },
        Functor0: function() {
          return Data_Maybe_Last.functorLast;
        }
      };
      var functorWithIndexIdentity = {
        mapWithIndex: function(f) {
          return function(v) {
            return f(Data_Unit.unit)(v);
          };
        },
        Functor0: function() {
          return Data_Identity.functorIdentity;
        }
      };
      var functorWithIndexFirst = {
        mapWithIndex: function(f) {
          return Data_Functor.map(Data_Maybe_First.functorFirst)(f(Data_Unit.unit));
        },
        Functor0: function() {
          return Data_Maybe_First.functorFirst;
        }
      };
      var functorWithIndexEither = {
        mapWithIndex: function(f) {
          return Data_Functor.map(Data_Either.functorEither)(f(Data_Unit.unit));
        },
        Functor0: function() {
          return Data_Either.functorEither;
        }
      };
      var functorWithIndexDual = {
        mapWithIndex: function(f) {
          return Data_Functor.map(Data_Monoid_Dual.functorDual)(f(Data_Unit.unit));
        },
        Functor0: function() {
          return Data_Monoid_Dual.functorDual;
        }
      };
      var functorWithIndexDisj = {
        mapWithIndex: function(f) {
          return Data_Functor.map(Data_Monoid_Disj.functorDisj)(f(Data_Unit.unit));
        },
        Functor0: function() {
          return Data_Monoid_Disj.functorDisj;
        }
      };
      var functorWithIndexCoproduct = function(dictFunctorWithIndex) {
        return function(dictFunctorWithIndex1) {
          return {
            mapWithIndex: function(f) {
              return function(v) {
                return Data_Bifunctor.bimap(Data_Bifunctor.bifunctorEither)(mapWithIndex(dictFunctorWithIndex)(function($30) {
                  return f(Data_Either.Left.create($30));
                }))(mapWithIndex(dictFunctorWithIndex1)(function($31) {
                  return f(Data_Either.Right.create($31));
                }))(v);
              };
            },
            Functor0: function() {
              return Data_Functor_Coproduct.functorCoproduct(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
            }
          };
        };
      };
      var functorWithIndexConst = {
        mapWithIndex: function(v) {
          return function(v1) {
            return v1;
          };
        },
        Functor0: function() {
          return Data_Const.functorConst;
        }
      };
      var functorWithIndexConj = {
        mapWithIndex: function(f) {
          return Data_Functor.map(Data_Monoid_Conj.functorConj)(f(Data_Unit.unit));
        },
        Functor0: function() {
          return Data_Monoid_Conj.functorConj;
        }
      };
      var functorWithIndexCompose = function(dictFunctorWithIndex) {
        return function(dictFunctorWithIndex1) {
          return {
            mapWithIndex: function(f) {
              return function(v) {
                return Data_Functor_Compose.Compose(mapWithIndex(dictFunctorWithIndex)(function() {
                  var $32 = mapWithIndex(dictFunctorWithIndex1);
                  var $33 = Data_Tuple.curry(f);
                  return function($34) {
                    return $32($33($34));
                  };
                }())(v));
              };
            },
            Functor0: function() {
              return Data_Functor_Compose.functorCompose(dictFunctorWithIndex.Functor0())(dictFunctorWithIndex1.Functor0());
            }
          };
        };
      };
      var functorWithIndexArray = {
        mapWithIndex: $foreign.mapWithIndexArray,
        Functor0: function() {
          return Data_Functor.functorArray;
        }
      };
      var functorWithIndexApp = function(dictFunctorWithIndex) {
        return {
          mapWithIndex: function(f) {
            return function(v) {
              return Data_Functor_App.App(mapWithIndex(dictFunctorWithIndex)(f)(v));
            };
          },
          Functor0: function() {
            return Data_Functor_App.functorApp(dictFunctorWithIndex.Functor0());
          }
        };
      };
      var functorWithIndexAdditive = {
        mapWithIndex: function(f) {
          return Data_Functor.map(Data_Monoid_Additive.functorAdditive)(f(Data_Unit.unit));
        },
        Functor0: function() {
          return Data_Monoid_Additive.functorAdditive;
        }
      };
      module.exports = {
        mapWithIndex,
        mapDefault,
        functorWithIndexArray,
        functorWithIndexMaybe,
        functorWithIndexFirst,
        functorWithIndexLast,
        functorWithIndexAdditive,
        functorWithIndexDual,
        functorWithIndexConj,
        functorWithIndexDisj,
        functorWithIndexMultiplicative,
        functorWithIndexEither,
        functorWithIndexTuple,
        functorWithIndexIdentity,
        functorWithIndexConst,
        functorWithIndexProduct,
        functorWithIndexCoproduct,
        functorWithIndexCompose,
        functorWithIndexApp
      };
    }
  });

  // output/Data.FoldableWithIndex/index.js
  var require_Data30 = __commonJS({
    "output/Data.FoldableWithIndex/index.js"(exports, module) {
      "use strict";
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Control_Bind = require_Control5();
      var Control_Category = require_Control2();
      var Data_Either = require_Data19();
      var Data_Foldable = require_Data27();
      var Data_Function = require_Data2();
      var Data_Functor_Coproduct = require_Data_Functor2();
      var Data_FunctorWithIndex = require_Data29();
      var Data_Maybe = require_Data15();
      var Data_Monoid = require_Data18();
      var Data_Monoid_Conj = require_Data_Monoid();
      var Data_Monoid_Disj = require_Data_Monoid2();
      var Data_Monoid_Dual = require_Data_Monoid3();
      var Data_Monoid_Endo = require_Data_Monoid4();
      var Data_Newtype = require_Data26();
      var Data_Semigroup = require_Data7();
      var Data_Tuple = require_Data22();
      var Data_Unit = require_Data3();
      var foldrWithIndex = function(dict) {
        return dict.foldrWithIndex;
      };
      var traverseWithIndex_ = function(dictApplicative) {
        return function(dictFoldableWithIndex) {
          return function(f) {
            return foldrWithIndex(dictFoldableWithIndex)(function(i) {
              var $164 = Control_Apply.applySecond(dictApplicative.Apply0());
              var $165 = f(i);
              return function($166) {
                return $164($165($166));
              };
            })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
        };
      };
      var forWithIndex_ = function(dictApplicative) {
        return function(dictFoldableWithIndex) {
          return Data_Function.flip(traverseWithIndex_(dictApplicative)(dictFoldableWithIndex));
        };
      };
      var foldrDefault = function(dictFoldableWithIndex) {
        return function(f) {
          return foldrWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
        };
      };
      var foldlWithIndex = function(dict) {
        return dict.foldlWithIndex;
      };
      var foldlDefault = function(dictFoldableWithIndex) {
        return function(f) {
          return foldlWithIndex(dictFoldableWithIndex)(Data_Function["const"](f));
        };
      };
      var foldableWithIndexTuple = {
        foldrWithIndex: function(f) {
          return function(z) {
            return function(v) {
              return f(Data_Unit.unit)(v.value1)(z);
            };
          };
        },
        foldlWithIndex: function(f) {
          return function(z) {
            return function(v) {
              return f(Data_Unit.unit)(z)(v.value1);
            };
          };
        },
        foldMapWithIndex: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return f(Data_Unit.unit)(v.value1);
            };
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableTuple;
        }
      };
      var foldableWithIndexMultiplicative = {
        foldrWithIndex: function(f) {
          return Data_Foldable.foldr(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
        },
        foldlWithIndex: function(f) {
          return Data_Foldable.foldl(Data_Foldable.foldableMultiplicative)(f(Data_Unit.unit));
        },
        foldMapWithIndex: function(dictMonoid) {
          return function(f) {
            return Data_Foldable.foldMap(Data_Foldable.foldableMultiplicative)(dictMonoid)(f(Data_Unit.unit));
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableMultiplicative;
        }
      };
      var foldableWithIndexMaybe = {
        foldrWithIndex: function(f) {
          return Data_Foldable.foldr(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
        },
        foldlWithIndex: function(f) {
          return Data_Foldable.foldl(Data_Foldable.foldableMaybe)(f(Data_Unit.unit));
        },
        foldMapWithIndex: function(dictMonoid) {
          return function(f) {
            return Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(dictMonoid)(f(Data_Unit.unit));
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableMaybe;
        }
      };
      var foldableWithIndexLast = {
        foldrWithIndex: function(f) {
          return Data_Foldable.foldr(Data_Foldable.foldableLast)(f(Data_Unit.unit));
        },
        foldlWithIndex: function(f) {
          return Data_Foldable.foldl(Data_Foldable.foldableLast)(f(Data_Unit.unit));
        },
        foldMapWithIndex: function(dictMonoid) {
          return function(f) {
            return Data_Foldable.foldMap(Data_Foldable.foldableLast)(dictMonoid)(f(Data_Unit.unit));
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableLast;
        }
      };
      var foldableWithIndexIdentity = {
        foldrWithIndex: function(f) {
          return function(z) {
            return function(v) {
              return f(Data_Unit.unit)(v)(z);
            };
          };
        },
        foldlWithIndex: function(f) {
          return function(z) {
            return function(v) {
              return f(Data_Unit.unit)(z)(v);
            };
          };
        },
        foldMapWithIndex: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return f(Data_Unit.unit)(v);
            };
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableIdentity;
        }
      };
      var foldableWithIndexFirst = {
        foldrWithIndex: function(f) {
          return Data_Foldable.foldr(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
        },
        foldlWithIndex: function(f) {
          return Data_Foldable.foldl(Data_Foldable.foldableFirst)(f(Data_Unit.unit));
        },
        foldMapWithIndex: function(dictMonoid) {
          return function(f) {
            return Data_Foldable.foldMap(Data_Foldable.foldableFirst)(dictMonoid)(f(Data_Unit.unit));
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableFirst;
        }
      };
      var foldableWithIndexEither = {
        foldrWithIndex: function(v) {
          return function(z) {
            return function(v1) {
              if (v1 instanceof Data_Either.Left) {
                return z;
              }
              ;
              if (v1 instanceof Data_Either.Right) {
                return v(Data_Unit.unit)(v1.value0)(z);
              }
              ;
              throw new Error("Failed pattern match at Data.FoldableWithIndex (line 164, column 1 - line 170, column 42): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
            };
          };
        },
        foldlWithIndex: function(v) {
          return function(z) {
            return function(v1) {
              if (v1 instanceof Data_Either.Left) {
                return z;
              }
              ;
              if (v1 instanceof Data_Either.Right) {
                return v(Data_Unit.unit)(z)(v1.value0);
              }
              ;
              throw new Error("Failed pattern match at Data.FoldableWithIndex (line 164, column 1 - line 170, column 42): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
            };
          };
        },
        foldMapWithIndex: function(dictMonoid) {
          return function(v) {
            return function(v1) {
              if (v1 instanceof Data_Either.Left) {
                return Data_Monoid.mempty(dictMonoid);
              }
              ;
              if (v1 instanceof Data_Either.Right) {
                return v(Data_Unit.unit)(v1.value0);
              }
              ;
              throw new Error("Failed pattern match at Data.FoldableWithIndex (line 164, column 1 - line 170, column 42): " + [v.constructor.name, v1.constructor.name]);
            };
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableEither;
        }
      };
      var foldableWithIndexDual = {
        foldrWithIndex: function(f) {
          return Data_Foldable.foldr(Data_Foldable.foldableDual)(f(Data_Unit.unit));
        },
        foldlWithIndex: function(f) {
          return Data_Foldable.foldl(Data_Foldable.foldableDual)(f(Data_Unit.unit));
        },
        foldMapWithIndex: function(dictMonoid) {
          return function(f) {
            return Data_Foldable.foldMap(Data_Foldable.foldableDual)(dictMonoid)(f(Data_Unit.unit));
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableDual;
        }
      };
      var foldableWithIndexDisj = {
        foldrWithIndex: function(f) {
          return Data_Foldable.foldr(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
        },
        foldlWithIndex: function(f) {
          return Data_Foldable.foldl(Data_Foldable.foldableDisj)(f(Data_Unit.unit));
        },
        foldMapWithIndex: function(dictMonoid) {
          return function(f) {
            return Data_Foldable.foldMap(Data_Foldable.foldableDisj)(dictMonoid)(f(Data_Unit.unit));
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableDisj;
        }
      };
      var foldableWithIndexConst = {
        foldrWithIndex: function(v) {
          return function(z) {
            return function(v1) {
              return z;
            };
          };
        },
        foldlWithIndex: function(v) {
          return function(z) {
            return function(v1) {
              return z;
            };
          };
        },
        foldMapWithIndex: function(dictMonoid) {
          return function(v) {
            return function(v1) {
              return Data_Monoid.mempty(dictMonoid);
            };
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableConst;
        }
      };
      var foldableWithIndexConj = {
        foldrWithIndex: function(f) {
          return Data_Foldable.foldr(Data_Foldable.foldableConj)(f(Data_Unit.unit));
        },
        foldlWithIndex: function(f) {
          return Data_Foldable.foldl(Data_Foldable.foldableConj)(f(Data_Unit.unit));
        },
        foldMapWithIndex: function(dictMonoid) {
          return function(f) {
            return Data_Foldable.foldMap(Data_Foldable.foldableConj)(dictMonoid)(f(Data_Unit.unit));
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableConj;
        }
      };
      var foldableWithIndexAdditive = {
        foldrWithIndex: function(f) {
          return Data_Foldable.foldr(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
        },
        foldlWithIndex: function(f) {
          return Data_Foldable.foldl(Data_Foldable.foldableAdditive)(f(Data_Unit.unit));
        },
        foldMapWithIndex: function(dictMonoid) {
          return function(f) {
            return Data_Foldable.foldMap(Data_Foldable.foldableAdditive)(dictMonoid)(f(Data_Unit.unit));
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableAdditive;
        }
      };
      var foldWithIndexM = function(dictFoldableWithIndex) {
        return function(dictMonad) {
          return function(f) {
            return function(a0) {
              return foldlWithIndex(dictFoldableWithIndex)(function(i) {
                return function(ma) {
                  return function(b) {
                    return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f(i))(b));
                  };
                };
              })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
            };
          };
        };
      };
      var foldMapWithIndexDefaultR = function(dictFoldableWithIndex) {
        return function(dictMonoid) {
          return function(f) {
            return foldrWithIndex(dictFoldableWithIndex)(function(i) {
              return function(x) {
                return function(acc) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(i)(x))(acc);
                };
              };
            })(Data_Monoid.mempty(dictMonoid));
          };
        };
      };
      var foldableWithIndexArray = {
        foldrWithIndex: function(f) {
          return function(z) {
            var $167 = Data_Foldable.foldr(Data_Foldable.foldableArray)(function(v) {
              return function(y) {
                return f(v.value0)(v.value1)(y);
              };
            })(z);
            var $168 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
            return function($169) {
              return $167($168($169));
            };
          };
        },
        foldlWithIndex: function(f) {
          return function(z) {
            var $170 = Data_Foldable.foldl(Data_Foldable.foldableArray)(function(y) {
              return function(v) {
                return f(v.value0)(y)(v.value1);
              };
            })(z);
            var $171 = Data_FunctorWithIndex.mapWithIndex(Data_FunctorWithIndex.functorWithIndexArray)(Data_Tuple.Tuple.create);
            return function($172) {
              return $170($171($172));
            };
          };
        },
        foldMapWithIndex: function(dictMonoid) {
          return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
        },
        Foldable0: function() {
          return Data_Foldable.foldableArray;
        }
      };
      var foldMapWithIndexDefaultL = function(dictFoldableWithIndex) {
        return function(dictMonoid) {
          return function(f) {
            return foldlWithIndex(dictFoldableWithIndex)(function(i) {
              return function(acc) {
                return function(x) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(i)(x));
                };
              };
            })(Data_Monoid.mempty(dictMonoid));
          };
        };
      };
      var foldMapWithIndex = function(dict) {
        return dict.foldMapWithIndex;
      };
      var foldableWithIndexApp = function(dictFoldableWithIndex) {
        return {
          foldrWithIndex: function(f) {
            return function(z) {
              return function(v) {
                return foldrWithIndex(dictFoldableWithIndex)(f)(z)(v);
              };
            };
          },
          foldlWithIndex: function(f) {
            return function(z) {
              return function(v) {
                return foldlWithIndex(dictFoldableWithIndex)(f)(z)(v);
              };
            };
          },
          foldMapWithIndex: function(dictMonoid) {
            return function(f) {
              return function(v) {
                return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(f)(v);
              };
            };
          },
          Foldable0: function() {
            return Data_Foldable.foldableApp(dictFoldableWithIndex.Foldable0());
          }
        };
      };
      var foldableWithIndexCompose = function(dictFoldableWithIndex) {
        return function(dictFoldableWithIndex1) {
          return {
            foldrWithIndex: function(f) {
              return function(i) {
                return function(v) {
                  return foldrWithIndex(dictFoldableWithIndex)(function(a) {
                    return Data_Function.flip(foldrWithIndex(dictFoldableWithIndex1)(Data_Tuple.curry(f)(a)));
                  })(i)(v);
                };
              };
            },
            foldlWithIndex: function(f) {
              return function(i) {
                return function(v) {
                  return foldlWithIndex(dictFoldableWithIndex)(function() {
                    var $173 = foldlWithIndex(dictFoldableWithIndex1);
                    var $174 = Data_Tuple.curry(f);
                    return function($175) {
                      return $173($174($175));
                    };
                  }())(i)(v);
                };
              };
            },
            foldMapWithIndex: function(dictMonoid) {
              return function(f) {
                return function(v) {
                  return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function() {
                    var $176 = foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid);
                    var $177 = Data_Tuple.curry(f);
                    return function($178) {
                      return $176($177($178));
                    };
                  }())(v);
                };
              };
            },
            Foldable0: function() {
              return Data_Foldable.foldableCompose(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
            }
          };
        };
      };
      var foldableWithIndexCoproduct = function(dictFoldableWithIndex) {
        return function(dictFoldableWithIndex1) {
          return {
            foldrWithIndex: function(f) {
              return function(z) {
                return Data_Functor_Coproduct.coproduct(foldrWithIndex(dictFoldableWithIndex)(function($179) {
                  return f(Data_Either.Left.create($179));
                })(z))(foldrWithIndex(dictFoldableWithIndex1)(function($180) {
                  return f(Data_Either.Right.create($180));
                })(z));
              };
            },
            foldlWithIndex: function(f) {
              return function(z) {
                return Data_Functor_Coproduct.coproduct(foldlWithIndex(dictFoldableWithIndex)(function($181) {
                  return f(Data_Either.Left.create($181));
                })(z))(foldlWithIndex(dictFoldableWithIndex1)(function($182) {
                  return f(Data_Either.Right.create($182));
                })(z));
              };
            },
            foldMapWithIndex: function(dictMonoid) {
              return function(f) {
                return Data_Functor_Coproduct.coproduct(foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function($183) {
                  return f(Data_Either.Left.create($183));
                }))(foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid)(function($184) {
                  return f(Data_Either.Right.create($184));
                }));
              };
            },
            Foldable0: function() {
              return Data_Foldable.foldableCoproduct(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
            }
          };
        };
      };
      var foldableWithIndexProduct = function(dictFoldableWithIndex) {
        return function(dictFoldableWithIndex1) {
          return {
            foldrWithIndex: function(f) {
              return function(z) {
                return function(v) {
                  return foldrWithIndex(dictFoldableWithIndex)(function($185) {
                    return f(Data_Either.Left.create($185));
                  })(foldrWithIndex(dictFoldableWithIndex1)(function($186) {
                    return f(Data_Either.Right.create($186));
                  })(z)(v.value1))(v.value0);
                };
              };
            },
            foldlWithIndex: function(f) {
              return function(z) {
                return function(v) {
                  return foldlWithIndex(dictFoldableWithIndex1)(function($187) {
                    return f(Data_Either.Right.create($187));
                  })(foldlWithIndex(dictFoldableWithIndex)(function($188) {
                    return f(Data_Either.Left.create($188));
                  })(z)(v.value0))(v.value1);
                };
              };
            },
            foldMapWithIndex: function(dictMonoid) {
              return function(f) {
                return function(v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function($189) {
                    return f(Data_Either.Left.create($189));
                  })(v.value0))(foldMapWithIndex(dictFoldableWithIndex1)(dictMonoid)(function($190) {
                    return f(Data_Either.Right.create($190));
                  })(v.value1));
                };
              };
            },
            Foldable0: function() {
              return Data_Foldable.foldableProduct(dictFoldableWithIndex.Foldable0())(dictFoldableWithIndex1.Foldable0());
            }
          };
        };
      };
      var foldlWithIndexDefault = function(dictFoldableWithIndex) {
        return function(c) {
          return function(u) {
            return function(xs) {
              return Data_Newtype.unwrap()(Data_Newtype.unwrap()(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Dual.monoidDual(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn)))(function(i) {
                var $191 = Data_Function.flip(c(i));
                return function($192) {
                  return Data_Monoid_Dual.Dual(Data_Monoid_Endo.Endo($191($192)));
                };
              })(xs)))(u);
            };
          };
        };
      };
      var foldrWithIndexDefault = function(dictFoldableWithIndex) {
        return function(c) {
          return function(u) {
            return function(xs) {
              return Data_Newtype.unwrap()(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(function(i) {
                var $193 = c(i);
                return function($194) {
                  return Data_Monoid_Endo.Endo($193($194));
                };
              })(xs))(u);
            };
          };
        };
      };
      var surroundMapWithIndex = function(dictFoldableWithIndex) {
        return function(dictSemigroup) {
          return function(d) {
            return function(t) {
              return function(f) {
                var joined = function(i) {
                  return function(a) {
                    return function(m) {
                      return Data_Semigroup.append(dictSemigroup)(d)(Data_Semigroup.append(dictSemigroup)(t(i)(a))(m));
                    };
                  };
                };
                return Data_Newtype.unwrap()(foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Endo.monoidEndo(Control_Category.categoryFn))(joined)(f))(d);
              };
            };
          };
        };
      };
      var foldMapDefault = function(dictFoldableWithIndex) {
        return function(dictMonoid) {
          return function(f) {
            return foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(Data_Function["const"](f));
          };
        };
      };
      var findWithIndex = function(dictFoldableWithIndex) {
        return function(p) {
          var go = function(v) {
            return function(v1) {
              return function(v2) {
                if (v1 instanceof Data_Maybe.Nothing && p(v)(v2)) {
                  return new Data_Maybe.Just({
                    index: v,
                    value: v2
                  });
                }
                ;
                return v1;
              };
            };
          };
          return foldlWithIndex(dictFoldableWithIndex)(go)(Data_Maybe.Nothing.value);
        };
      };
      var findMapWithIndex = function(dictFoldableWithIndex) {
        return function(f) {
          var go = function(v) {
            return function(v1) {
              return function(v2) {
                if (v1 instanceof Data_Maybe.Nothing) {
                  return f(v)(v2);
                }
                ;
                return v1;
              };
            };
          };
          return foldlWithIndex(dictFoldableWithIndex)(go)(Data_Maybe.Nothing.value);
        };
      };
      var anyWithIndex = function(dictFoldableWithIndex) {
        return function(dictHeytingAlgebra) {
          return function(t) {
            var $195 = Data_Newtype.unwrap();
            var $196 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra))(function(i) {
              var $198 = t(i);
              return function($199) {
                return Data_Monoid_Disj.Disj($198($199));
              };
            });
            return function($197) {
              return $195($196($197));
            };
          };
        };
      };
      var allWithIndex = function(dictFoldableWithIndex) {
        return function(dictHeytingAlgebra) {
          return function(t) {
            var $200 = Data_Newtype.unwrap();
            var $201 = foldMapWithIndex(dictFoldableWithIndex)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra))(function(i) {
              var $203 = t(i);
              return function($204) {
                return Data_Monoid_Conj.Conj($203($204));
              };
            });
            return function($202) {
              return $200($201($202));
            };
          };
        };
      };
      module.exports = {
        foldrWithIndex,
        foldlWithIndex,
        foldMapWithIndex,
        foldrWithIndexDefault,
        foldlWithIndexDefault,
        foldMapWithIndexDefaultR,
        foldMapWithIndexDefaultL,
        foldWithIndexM,
        traverseWithIndex_,
        forWithIndex_,
        surroundMapWithIndex,
        allWithIndex,
        anyWithIndex,
        findWithIndex,
        findMapWithIndex,
        foldrDefault,
        foldlDefault,
        foldMapDefault,
        foldableWithIndexArray,
        foldableWithIndexMaybe,
        foldableWithIndexFirst,
        foldableWithIndexLast,
        foldableWithIndexAdditive,
        foldableWithIndexDual,
        foldableWithIndexDisj,
        foldableWithIndexConj,
        foldableWithIndexMultiplicative,
        foldableWithIndexEither,
        foldableWithIndexTuple,
        foldableWithIndexIdentity,
        foldableWithIndexConst,
        foldableWithIndexProduct,
        foldableWithIndexCoproduct,
        foldableWithIndexCompose,
        foldableWithIndexApp
      };
    }
  });

  // output/Data.Ord.Max/index.js
  var require_Data_Ord = __commonJS({
    "output/Data.Ord.Max/index.js"(exports, module) {
      "use strict";
      var Data_Bounded = require_Data13();
      var Data_Ord = require_Data12();
      var Data_Show = require_Data14();
      var Max = function(x) {
        return x;
      };
      var showMax = function(dictShow) {
        return {
          show: function(v) {
            return "(Max " + (Data_Show.show(dictShow)(v) + ")");
          }
        };
      };
      var semigroupMax = function(dictOrd) {
        return {
          append: function(v) {
            return function(v1) {
              return Data_Ord.max(dictOrd)(v)(v1);
            };
          }
        };
      };
      var newtypeMax = {
        Coercible0: function() {
          return void 0;
        }
      };
      var monoidMax = function(dictBounded) {
        return {
          mempty: Data_Bounded.bottom(dictBounded),
          Semigroup0: function() {
            return semigroupMax(dictBounded.Ord0());
          }
        };
      };
      var eqMax = function(dictEq) {
        return dictEq;
      };
      var ordMax = function(dictOrd) {
        return {
          compare: function(v) {
            return function(v1) {
              return Data_Ord.compare(dictOrd)(v)(v1);
            };
          },
          Eq0: function() {
            return eqMax(dictOrd.Eq0());
          }
        };
      };
      module.exports = {
        Max,
        newtypeMax,
        eqMax,
        ordMax,
        semigroupMax,
        monoidMax,
        showMax
      };
    }
  });

  // output/Data.Ord.Min/index.js
  var require_Data_Ord2 = __commonJS({
    "output/Data.Ord.Min/index.js"(exports, module) {
      "use strict";
      var Data_Bounded = require_Data13();
      var Data_Ord = require_Data12();
      var Data_Show = require_Data14();
      var Min = function(x) {
        return x;
      };
      var showMin = function(dictShow) {
        return {
          show: function(v) {
            return "(Min " + (Data_Show.show(dictShow)(v) + ")");
          }
        };
      };
      var semigroupMin = function(dictOrd) {
        return {
          append: function(v) {
            return function(v1) {
              return Data_Ord.min(dictOrd)(v)(v1);
            };
          }
        };
      };
      var newtypeMin = {
        Coercible0: function() {
          return void 0;
        }
      };
      var monoidMin = function(dictBounded) {
        return {
          mempty: Data_Bounded.top(dictBounded),
          Semigroup0: function() {
            return semigroupMin(dictBounded.Ord0());
          }
        };
      };
      var eqMin = function(dictEq) {
        return dictEq;
      };
      var ordMin = function(dictOrd) {
        return {
          compare: function(v) {
            return function(v1) {
              return Data_Ord.compare(dictOrd)(v)(v1);
            };
          },
          Eq0: function() {
            return eqMin(dictOrd.Eq0());
          }
        };
      };
      module.exports = {
        Min,
        newtypeMin,
        eqMin,
        ordMin,
        semigroupMin,
        monoidMin,
        showMin
      };
    }
  });

  // output/Data.Semigroup.Foldable/index.js
  var require_Data_Semigroup = __commonJS({
    "output/Data.Semigroup.Foldable/index.js"(exports, module) {
      "use strict";
      var Control_Apply = require_Control3();
      var Control_Category = require_Control2();
      var Data_Eq = require_Data8();
      var Data_Foldable = require_Data27();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Data_Monoid_Dual = require_Data_Monoid3();
      var Data_Newtype = require_Data26();
      var Data_Ord_Max = require_Data_Ord();
      var Data_Ord_Min = require_Data_Ord2();
      var Data_Ordering = require_Data9();
      var Data_Semigroup = require_Data7();
      var Data_Unit = require_Data3();
      var JoinWith = function(x) {
        return x;
      };
      var FoldRight1 = function() {
        function FoldRight12(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
        }
        ;
        FoldRight12.create = function(value0) {
          return function(value1) {
            return new FoldRight12(value0, value1);
          };
        };
        return FoldRight12;
      }();
      var Act = function(x) {
        return x;
      };
      var semigroupJoinWith = function(dictSemigroup) {
        return {
          append: function(v) {
            return function(v1) {
              return JoinWith(function(j) {
                return Data_Semigroup.append(dictSemigroup)(v(j))(Data_Semigroup.append(dictSemigroup)(j)(v1(j)));
              });
            };
          }
        };
      };
      var semigroupAct = function(dictApply) {
        return {
          append: function(v) {
            return function(v1) {
              return Control_Apply.applySecond(dictApply)(v)(v1);
            };
          }
        };
      };
      var runFoldRight1 = function(v) {
        return v.value0(v.value1);
      };
      var mkFoldRight1 = FoldRight1.create(Data_Function["const"]);
      var joinee = function(v) {
        return v;
      };
      var getAct = function(v) {
        return v;
      };
      var foldr1 = function(dict) {
        return dict.foldr1;
      };
      var foldl1 = function(dict) {
        return dict.foldl1;
      };
      var maximumBy = function(dictFoldable1) {
        return function(cmp) {
          return foldl1(dictFoldable1)(function(x) {
            return function(y) {
              var $76 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.GT.value);
              if ($76) {
                return x;
              }
              ;
              return y;
            };
          });
        };
      };
      var minimumBy = function(dictFoldable1) {
        return function(cmp) {
          return foldl1(dictFoldable1)(function(x) {
            return function(y) {
              var $77 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(x)(y))(Data_Ordering.LT.value);
              if ($77) {
                return x;
              }
              ;
              return y;
            };
          });
        };
      };
      var foldableTuple = {
        foldMap1: function(dictSemigroup) {
          return function(f) {
            return function(v) {
              return f(v.value1);
            };
          };
        },
        foldr1: function(v) {
          return function(v1) {
            return v1.value1;
          };
        },
        foldl1: function(v) {
          return function(v1) {
            return v1.value1;
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableTuple;
        }
      };
      var foldableMultiplicative = {
        foldr1: function(v) {
          return function(v1) {
            return v1;
          };
        },
        foldl1: function(v) {
          return function(v1) {
            return v1;
          };
        },
        foldMap1: function(dictSemigroup) {
          return function(f) {
            return function(v) {
              return f(v);
            };
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableMultiplicative;
        }
      };
      var foldableIdentity = {
        foldMap1: function(dictSemigroup) {
          return function(f) {
            return function(v) {
              return f(v);
            };
          };
        },
        foldl1: function(v) {
          return function(v1) {
            return v1;
          };
        },
        foldr1: function(v) {
          return function(v1) {
            return v1;
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableIdentity;
        }
      };
      var foldableDual = {
        foldr1: function(v) {
          return function(v1) {
            return v1;
          };
        },
        foldl1: function(v) {
          return function(v1) {
            return v1;
          };
        },
        foldMap1: function(dictSemigroup) {
          return function(f) {
            return function(v) {
              return f(v);
            };
          };
        },
        Foldable0: function() {
          return Data_Foldable.foldableDual;
        }
      };
      var foldRight1Semigroup = {
        append: function(v) {
          return function(v1) {
            return new FoldRight1(function(a) {
              return function(f) {
                return v.value0(f(v.value1)(v1.value0(a)(f)))(f);
              };
            }, v1.value1);
          };
        }
      };
      var foldMap1DefaultR = function(dictFoldable1) {
        return function(dictFunctor) {
          return function(dictSemigroup) {
            return function(f) {
              var $115 = foldr1(dictFoldable1)(Data_Semigroup.append(dictSemigroup));
              var $116 = Data_Functor.map(dictFunctor)(f);
              return function($117) {
                return $115($116($117));
              };
            };
          };
        };
      };
      var foldMap1DefaultL = function(dictFoldable1) {
        return function(dictFunctor) {
          return function(dictSemigroup) {
            return function(f) {
              var $118 = foldl1(dictFoldable1)(Data_Semigroup.append(dictSemigroup));
              var $119 = Data_Functor.map(dictFunctor)(f);
              return function($120) {
                return $118($119($120));
              };
            };
          };
        };
      };
      var foldMap1Default = function(dictWarn) {
        return function(dictFoldable1) {
          return function(dictFunctor) {
            return function(dictSemigroup) {
              return foldMap1DefaultL(dictFoldable1)(dictFunctor)(dictSemigroup);
            };
          };
        };
      };
      var foldMap1 = function(dict) {
        return dict.foldMap1;
      };
      var foldl1Default = function(dictFoldable1) {
        var $121 = Data_Function.flip(function() {
          var $123 = Data_Newtype.alaF()()()()(Data_Monoid_Dual.Dual)(foldMap1(dictFoldable1)(Data_Monoid_Dual.semigroupDual(foldRight1Semigroup)))(mkFoldRight1);
          return function($124) {
            return runFoldRight1($123($124));
          };
        }());
        return function($122) {
          return $121(Data_Function.flip($122));
        };
      };
      var foldr1Default = function(dictFoldable1) {
        return Data_Function.flip(function() {
          var $125 = foldMap1(dictFoldable1)(foldRight1Semigroup)(mkFoldRight1);
          return function($126) {
            return runFoldRight1($125($126));
          };
        }());
      };
      var intercalateMap = function(dictFoldable1) {
        return function(dictSemigroup) {
          return function(j) {
            return function(f) {
              return function(foldable) {
                return joinee(foldMap1(dictFoldable1)(semigroupJoinWith(dictSemigroup))(function($127) {
                  return JoinWith(Data_Function["const"](f($127)));
                })(foldable))(j);
              };
            };
          };
        };
      };
      var intercalate = function(dictFoldable1) {
        return function(dictSemigroup) {
          return Data_Function.flip(intercalateMap(dictFoldable1)(dictSemigroup))(Control_Category.identity(Control_Category.categoryFn));
        };
      };
      var maximum = function(dictOrd) {
        return function(dictFoldable1) {
          return Data_Newtype.ala()()()(Data_Ord_Max.Max)(foldMap1(dictFoldable1)(Data_Ord_Max.semigroupMax(dictOrd)));
        };
      };
      var minimum = function(dictOrd) {
        return function(dictFoldable1) {
          return Data_Newtype.ala()()()(Data_Ord_Min.Min)(foldMap1(dictFoldable1)(Data_Ord_Min.semigroupMin(dictOrd)));
        };
      };
      var traverse1_ = function(dictFoldable1) {
        return function(dictApply) {
          return function(f) {
            return function(t) {
              return Data_Functor.voidRight(dictApply.Functor0())(Data_Unit.unit)(getAct(foldMap1(dictFoldable1)(semigroupAct(dictApply))(function($128) {
                return Act(f($128));
              })(t)));
            };
          };
        };
      };
      var for1_ = function(dictFoldable1) {
        return function(dictApply) {
          return Data_Function.flip(traverse1_(dictFoldable1)(dictApply));
        };
      };
      var sequence1_ = function(dictFoldable1) {
        return function(dictApply) {
          return traverse1_(dictFoldable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
        };
      };
      var fold1 = function(dictFoldable1) {
        return function(dictSemigroup) {
          return foldMap1(dictFoldable1)(dictSemigroup)(Control_Category.identity(Control_Category.categoryFn));
        };
      };
      module.exports = {
        foldMap1,
        fold1,
        foldr1,
        foldl1,
        traverse1_,
        for1_,
        sequence1_,
        foldr1Default,
        foldl1Default,
        foldMap1DefaultR,
        foldMap1DefaultL,
        foldMap1Default,
        intercalate,
        intercalateMap,
        maximum,
        maximumBy,
        minimum,
        minimumBy,
        foldableDual,
        foldableMultiplicative,
        foldableTuple,
        foldableIdentity
      };
    }
  });

  // output/Data.Traversable/foreign.js
  var require_foreign31 = __commonJS({
    "output/Data.Traversable/foreign.js"(exports) {
      "use strict";
      exports.traverseArrayImpl = function() {
        function array1(a) {
          return [a];
        }
        function array2(a) {
          return function(b) {
            return [a, b];
          };
        }
        function array3(a) {
          return function(b) {
            return function(c) {
              return [a, b, c];
            };
          };
        }
        function concat2(xs) {
          return function(ys) {
            return xs.concat(ys);
          };
        }
        return function(apply) {
          return function(map) {
            return function(pure) {
              return function(f) {
                return function(array) {
                  function go(bot, top) {
                    switch (top - bot) {
                      case 0:
                        return pure([]);
                      case 1:
                        return map(array1)(f(array[bot]));
                      case 2:
                        return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                      case 3:
                        return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                      default:
                        var pivot = bot + Math.floor((top - bot) / 4) * 2;
                        return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                    }
                  }
                  return go(0, array.length);
                };
              };
            };
          };
        };
      }();
    }
  });

  // output/Data.Traversable.Accum/index.js
  var require_Data_Traversable = __commonJS({
    "output/Data.Traversable.Accum/index.js"(exports, module) {
      "use strict";
      module.exports = {};
    }
  });

  // output/Data.Traversable.Accum.Internal/index.js
  var require_Data_Traversable_Accum = __commonJS({
    "output/Data.Traversable.Accum.Internal/index.js"(exports, module) {
      "use strict";
      var StateR = function(x) {
        return x;
      };
      var StateL = function(x) {
        return x;
      };
      var stateR = function(v) {
        return v;
      };
      var stateL = function(v) {
        return v;
      };
      var functorStateR = {
        map: function(f) {
          return function(k) {
            return function(s) {
              var v = stateR(k)(s);
              return {
                accum: v.accum,
                value: f(v.value)
              };
            };
          };
        }
      };
      var functorStateL = {
        map: function(f) {
          return function(k) {
            return function(s) {
              var v = stateL(k)(s);
              return {
                accum: v.accum,
                value: f(v.value)
              };
            };
          };
        }
      };
      var applyStateR = {
        apply: function(f) {
          return function(x) {
            return function(s) {
              var v = stateR(x)(s);
              var v1 = stateR(f)(v.accum);
              return {
                accum: v1.accum,
                value: v1.value(v.value)
              };
            };
          };
        },
        Functor0: function() {
          return functorStateR;
        }
      };
      var applyStateL = {
        apply: function(f) {
          return function(x) {
            return function(s) {
              var v = stateL(f)(s);
              var v1 = stateL(x)(v.accum);
              return {
                accum: v1.accum,
                value: v.value(v1.value)
              };
            };
          };
        },
        Functor0: function() {
          return functorStateL;
        }
      };
      var applicativeStateR = {
        pure: function(a) {
          return function(s) {
            return {
              accum: s,
              value: a
            };
          };
        },
        Apply0: function() {
          return applyStateR;
        }
      };
      var applicativeStateL = {
        pure: function(a) {
          return function(s) {
            return {
              accum: s,
              value: a
            };
          };
        },
        Apply0: function() {
          return applyStateL;
        }
      };
      module.exports = {
        StateL,
        stateL,
        StateR,
        stateR,
        functorStateL,
        applyStateL,
        applicativeStateL,
        functorStateR,
        applyStateR,
        applicativeStateR
      };
    }
  });

  // output/Data.Traversable/index.js
  var require_Data31 = __commonJS({
    "output/Data.Traversable/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign31();
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Control_Category = require_Control2();
      var Data_Const = require_Data28();
      var Data_Either = require_Data19();
      var Data_Foldable = require_Data27();
      var Data_Functor = require_Data4();
      var Data_Functor_App = require_Data_Functor3();
      var Data_Functor_Compose = require_Data_Functor4();
      var Data_Functor_Coproduct = require_Data_Functor2();
      var Data_Functor_Product = require_Data_Functor5();
      var Data_Identity = require_Data20();
      var Data_Maybe = require_Data15();
      var Data_Maybe_First = require_Data_Maybe();
      var Data_Maybe_Last = require_Data_Maybe2();
      var Data_Monoid_Additive = require_Data_Monoid5();
      var Data_Monoid_Conj = require_Data_Monoid();
      var Data_Monoid_Disj = require_Data_Monoid2();
      var Data_Monoid_Dual = require_Data_Monoid3();
      var Data_Monoid_Multiplicative = require_Data_Monoid6();
      var Data_Traversable_Accum = require_Data_Traversable();
      var Data_Traversable_Accum_Internal = require_Data_Traversable_Accum();
      var Data_Tuple = require_Data22();
      var traverse = function(dict) {
        return dict.traverse;
      };
      var traversableTuple = {
        traverse: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Tuple.Tuple.create(v.value0))(f(v.value1));
            };
          };
        },
        sequence: function(dictApplicative) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Tuple.Tuple.create(v.value0))(v.value1);
          };
        },
        Functor0: function() {
          return Data_Tuple.functorTuple;
        },
        Foldable1: function() {
          return Data_Foldable.foldableTuple;
        }
      };
      var traversableMultiplicative = {
        traverse: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
            };
          };
        },
        sequence: function(dictApplicative) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Multiplicative.Multiplicative)(v);
          };
        },
        Functor0: function() {
          return Data_Monoid_Multiplicative.functorMultiplicative;
        },
        Foldable1: function() {
          return Data_Foldable.foldableMultiplicative;
        }
      };
      var traversableMaybe = {
        traverse: function(dictApplicative) {
          return function(v) {
            return function(v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
              }
              ;
              if (v1 instanceof Data_Maybe.Just) {
                return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe.Just.create)(v(v1.value0));
              }
              ;
              throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [v.constructor.name, v1.constructor.name]);
            };
          };
        },
        sequence: function(dictApplicative) {
          return function(v) {
            if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(dictApplicative)(Data_Maybe.Nothing.value);
            }
            ;
            if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe.Just.create)(v.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [v.constructor.name]);
          };
        },
        Functor0: function() {
          return Data_Maybe.functorMaybe;
        },
        Foldable1: function() {
          return Data_Foldable.foldableMaybe;
        }
      };
      var traversableIdentity = {
        traverse: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Identity.Identity)(f(v));
            };
          };
        },
        sequence: function(dictApplicative) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Identity.Identity)(v);
          };
        },
        Functor0: function() {
          return Data_Identity.functorIdentity;
        },
        Foldable1: function() {
          return Data_Foldable.foldableIdentity;
        }
      };
      var traversableEither = {
        traverse: function(dictApplicative) {
          return function(v) {
            return function(v1) {
              if (v1 instanceof Data_Either.Left) {
                return Control_Applicative.pure(dictApplicative)(new Data_Either.Left(v1.value0));
              }
              ;
              if (v1 instanceof Data_Either.Right) {
                return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Either.Right.create)(v(v1.value0));
              }
              ;
              throw new Error("Failed pattern match at Data.Traversable (line 149, column 1 - line 153, column 36): " + [v.constructor.name, v1.constructor.name]);
            };
          };
        },
        sequence: function(dictApplicative) {
          return function(v) {
            if (v instanceof Data_Either.Left) {
              return Control_Applicative.pure(dictApplicative)(new Data_Either.Left(v.value0));
            }
            ;
            if (v instanceof Data_Either.Right) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Either.Right.create)(v.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.Traversable (line 149, column 1 - line 153, column 36): " + [v.constructor.name]);
          };
        },
        Functor0: function() {
          return Data_Either.functorEither;
        },
        Foldable1: function() {
          return Data_Foldable.foldableEither;
        }
      };
      var traversableDual = {
        traverse: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Dual.Dual)(f(v));
            };
          };
        },
        sequence: function(dictApplicative) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Dual.Dual)(v);
          };
        },
        Functor0: function() {
          return Data_Monoid_Dual.functorDual;
        },
        Foldable1: function() {
          return Data_Foldable.foldableDual;
        }
      };
      var traversableDisj = {
        traverse: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Disj.Disj)(f(v));
            };
          };
        },
        sequence: function(dictApplicative) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Disj.Disj)(v);
          };
        },
        Functor0: function() {
          return Data_Monoid_Disj.functorDisj;
        },
        Foldable1: function() {
          return Data_Foldable.foldableDisj;
        }
      };
      var traversableConst = {
        traverse: function(dictApplicative) {
          return function(v) {
            return function(v1) {
              return Control_Applicative.pure(dictApplicative)(v1);
            };
          };
        },
        sequence: function(dictApplicative) {
          return function(v) {
            return Control_Applicative.pure(dictApplicative)(v);
          };
        },
        Functor0: function() {
          return Data_Const.functorConst;
        },
        Foldable1: function() {
          return Data_Foldable.foldableConst;
        }
      };
      var traversableConj = {
        traverse: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Conj.Conj)(f(v));
            };
          };
        },
        sequence: function(dictApplicative) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Conj.Conj)(v);
          };
        },
        Functor0: function() {
          return Data_Monoid_Conj.functorConj;
        },
        Foldable1: function() {
          return Data_Foldable.foldableConj;
        }
      };
      var traversableCompose = function(dictTraversable) {
        return function(dictTraversable1) {
          return {
            traverse: function(dictApplicative) {
              return function(f) {
                return function(v) {
                  return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_Compose.Compose)(traverse(dictTraversable)(dictApplicative)(traverse(dictTraversable1)(dictApplicative)(f))(v));
                };
              };
            },
            sequence: function(dictApplicative) {
              return traverse(traversableCompose(dictTraversable)(dictTraversable1))(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
            },
            Functor0: function() {
              return Data_Functor_Compose.functorCompose(dictTraversable.Functor0())(dictTraversable1.Functor0());
            },
            Foldable1: function() {
              return Data_Foldable.foldableCompose(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
            }
          };
        };
      };
      var traversableAdditive = {
        traverse: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Additive.Additive)(f(v));
            };
          };
        },
        sequence: function(dictApplicative) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Monoid_Additive.Additive)(v);
          };
        },
        Functor0: function() {
          return Data_Monoid_Additive.functorAdditive;
        },
        Foldable1: function() {
          return Data_Foldable.foldableAdditive;
        }
      };
      var sequenceDefault = function(dictTraversable) {
        return function(dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
        };
      };
      var traversableArray = {
        traverse: function(dictApplicative) {
          return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map(dictApplicative.Apply0().Functor0()))(Control_Applicative.pure(dictApplicative));
        },
        sequence: function(dictApplicative) {
          return sequenceDefault(traversableArray)(dictApplicative);
        },
        Functor0: function() {
          return Data_Functor.functorArray;
        },
        Foldable1: function() {
          return Data_Foldable.foldableArray;
        }
      };
      var sequence = function(dict) {
        return dict.sequence;
      };
      var traversableApp = function(dictTraversable) {
        return {
          traverse: function(dictApplicative) {
            return function(f) {
              return function(v) {
                return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_App.App)(traverse(dictTraversable)(dictApplicative)(f)(v));
              };
            };
          },
          sequence: function(dictApplicative) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_App.App)(sequence(dictTraversable)(dictApplicative)(v));
            };
          },
          Functor0: function() {
            return Data_Functor_App.functorApp(dictTraversable.Functor0());
          },
          Foldable1: function() {
            return Data_Foldable.foldableApp(dictTraversable.Foldable1());
          }
        };
      };
      var traversableCoproduct = function(dictTraversable) {
        return function(dictTraversable1) {
          return {
            traverse: function(dictApplicative) {
              return function(f) {
                return Data_Functor_Coproduct.coproduct(function() {
                  var $143 = Data_Functor.map(dictApplicative.Apply0().Functor0())(function($146) {
                    return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($146));
                  });
                  var $144 = traverse(dictTraversable)(dictApplicative)(f);
                  return function($145) {
                    return $143($144($145));
                  };
                }())(function() {
                  var $147 = Data_Functor.map(dictApplicative.Apply0().Functor0())(function($150) {
                    return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create($150));
                  });
                  var $148 = traverse(dictTraversable1)(dictApplicative)(f);
                  return function($149) {
                    return $147($148($149));
                  };
                }());
              };
            },
            sequence: function(dictApplicative) {
              return Data_Functor_Coproduct.coproduct(function() {
                var $151 = Data_Functor.map(dictApplicative.Apply0().Functor0())(function($154) {
                  return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($154));
                });
                var $152 = sequence(dictTraversable)(dictApplicative);
                return function($153) {
                  return $151($152($153));
                };
              }())(function() {
                var $155 = Data_Functor.map(dictApplicative.Apply0().Functor0())(function($158) {
                  return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create($158));
                });
                var $156 = sequence(dictTraversable1)(dictApplicative);
                return function($157) {
                  return $155($156($157));
                };
              }());
            },
            Functor0: function() {
              return Data_Functor_Coproduct.functorCoproduct(dictTraversable.Functor0())(dictTraversable1.Functor0());
            },
            Foldable1: function() {
              return Data_Foldable.foldableCoproduct(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
            }
          };
        };
      };
      var traversableFirst = {
        traverse: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_First.First)(traverse(traversableMaybe)(dictApplicative)(f)(v));
            };
          };
        },
        sequence: function(dictApplicative) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_First.First)(sequence(traversableMaybe)(dictApplicative)(v));
          };
        },
        Functor0: function() {
          return Data_Maybe_First.functorFirst;
        },
        Foldable1: function() {
          return Data_Foldable.foldableFirst;
        }
      };
      var traversableLast = {
        traverse: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_Last.Last)(traverse(traversableMaybe)(dictApplicative)(f)(v));
            };
          };
        },
        sequence: function(dictApplicative) {
          return function(v) {
            return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Maybe_Last.Last)(sequence(traversableMaybe)(dictApplicative)(v));
          };
        },
        Functor0: function() {
          return Data_Maybe_Last.functorLast;
        },
        Foldable1: function() {
          return Data_Foldable.foldableLast;
        }
      };
      var traversableProduct = function(dictTraversable) {
        return function(dictTraversable1) {
          return {
            traverse: function(dictApplicative) {
              return function(f) {
                return function(v) {
                  return Control_Apply.lift2(dictApplicative.Apply0())(Data_Functor_Product.product)(traverse(dictTraversable)(dictApplicative)(f)(v.value0))(traverse(dictTraversable1)(dictApplicative)(f)(v.value1));
                };
              };
            },
            sequence: function(dictApplicative) {
              return function(v) {
                return Control_Apply.lift2(dictApplicative.Apply0())(Data_Functor_Product.product)(sequence(dictTraversable)(dictApplicative)(v.value0))(sequence(dictTraversable1)(dictApplicative)(v.value1));
              };
            },
            Functor0: function() {
              return Data_Functor_Product.functorProduct(dictTraversable.Functor0())(dictTraversable1.Functor0());
            },
            Foldable1: function() {
              return Data_Foldable.foldableProduct(dictTraversable.Foldable1())(dictTraversable1.Foldable1());
            }
          };
        };
      };
      var traverseDefault = function(dictTraversable) {
        return function(dictApplicative) {
          return function(f) {
            return function(ta) {
              return sequence(dictTraversable)(dictApplicative)(Data_Functor.map(dictTraversable.Functor0())(f)(ta));
            };
          };
        };
      };
      var mapAccumR = function(dictTraversable) {
        return function(f) {
          return function(s0) {
            return function(xs) {
              return Data_Traversable_Accum_Internal.stateR(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateR)(function(a) {
                return function(s) {
                  return f(s)(a);
                };
              })(xs))(s0);
            };
          };
        };
      };
      var scanr = function(dictTraversable) {
        return function(f) {
          return function(b0) {
            return function(xs) {
              return mapAccumR(dictTraversable)(function(b) {
                return function(a) {
                  var b$prime = f(a)(b);
                  return {
                    accum: b$prime,
                    value: b$prime
                  };
                };
              })(b0)(xs).value;
            };
          };
        };
      };
      var mapAccumL = function(dictTraversable) {
        return function(f) {
          return function(s0) {
            return function(xs) {
              return Data_Traversable_Accum_Internal.stateL(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateL)(function(a) {
                return function(s) {
                  return f(s)(a);
                };
              })(xs))(s0);
            };
          };
        };
      };
      var scanl = function(dictTraversable) {
        return function(f) {
          return function(b0) {
            return function(xs) {
              return mapAccumL(dictTraversable)(function(b) {
                return function(a) {
                  var b$prime = f(b)(a);
                  return {
                    accum: b$prime,
                    value: b$prime
                  };
                };
              })(b0)(xs).value;
            };
          };
        };
      };
      var $$for = function(dictApplicative) {
        return function(dictTraversable) {
          return function(x) {
            return function(f) {
              return traverse(dictTraversable)(dictApplicative)(f)(x);
            };
          };
        };
      };
      module.exports = {
        traverse,
        sequence,
        traverseDefault,
        sequenceDefault,
        "for": $$for,
        scanl,
        scanr,
        mapAccumL,
        mapAccumR,
        traversableArray,
        traversableMaybe,
        traversableFirst,
        traversableLast,
        traversableAdditive,
        traversableDual,
        traversableConj,
        traversableDisj,
        traversableMultiplicative,
        traversableEither,
        traversableTuple,
        traversableIdentity,
        traversableConst,
        traversableProduct,
        traversableCoproduct,
        traversableCompose,
        traversableApp,
        all: Data_Foldable.all,
        and: Data_Foldable.and,
        any: Data_Foldable.any,
        elem: Data_Foldable.elem,
        find: Data_Foldable.find,
        fold: Data_Foldable.fold,
        foldMap: Data_Foldable.foldMap,
        foldMapDefaultL: Data_Foldable.foldMapDefaultL,
        foldMapDefaultR: Data_Foldable.foldMapDefaultR,
        foldl: Data_Foldable.foldl,
        foldlDefault: Data_Foldable.foldlDefault,
        foldr: Data_Foldable.foldr,
        foldrDefault: Data_Foldable.foldrDefault,
        for_: Data_Foldable.for_,
        intercalate: Data_Foldable.intercalate,
        maximum: Data_Foldable.maximum,
        maximumBy: Data_Foldable.maximumBy,
        minimum: Data_Foldable.minimum,
        minimumBy: Data_Foldable.minimumBy,
        notElem: Data_Foldable.notElem,
        oneOf: Data_Foldable.oneOf,
        or: Data_Foldable.or,
        sequence_: Data_Foldable.sequence_,
        sum: Data_Foldable.sum,
        traverse_: Data_Foldable.traverse_
      };
    }
  });

  // output/Data.TraversableWithIndex/index.js
  var require_Data32 = __commonJS({
    "output/Data.TraversableWithIndex/index.js"(exports, module) {
      "use strict";
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Data_Either = require_Data19();
      var Data_FoldableWithIndex = require_Data30();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Data_Functor_App = require_Data_Functor3();
      var Data_Functor_Compose = require_Data_Functor4();
      var Data_Functor_Coproduct = require_Data_Functor2();
      var Data_Functor_Product = require_Data_Functor5();
      var Data_FunctorWithIndex = require_Data29();
      var Data_Identity = require_Data20();
      var Data_Traversable = require_Data31();
      var Data_Traversable_Accum = require_Data_Traversable();
      var Data_Traversable_Accum_Internal = require_Data_Traversable_Accum();
      var Data_Tuple = require_Data22();
      var Data_Unit = require_Data3();
      var traverseWithIndexDefault = function(dictTraversableWithIndex) {
        return function(dictApplicative) {
          return function(f) {
            var $64 = Data_Traversable.sequence(dictTraversableWithIndex.Traversable2())(dictApplicative);
            var $65 = Data_FunctorWithIndex.mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0())(f);
            return function($66) {
              return $64($65($66));
            };
          };
        };
      };
      var traverseWithIndex = function(dict) {
        return dict.traverseWithIndex;
      };
      var traverseDefault = function(dictTraversableWithIndex) {
        return function(dictApplicative) {
          return function(f) {
            return traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(Data_Function["const"](f));
          };
        };
      };
      var traversableWithIndexTuple = {
        traverseWithIndex: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Tuple.Tuple.create(v.value0))(f(Data_Unit.unit)(v.value1));
            };
          };
        },
        FunctorWithIndex0: function() {
          return Data_FunctorWithIndex.functorWithIndexTuple;
        },
        FoldableWithIndex1: function() {
          return Data_FoldableWithIndex.foldableWithIndexTuple;
        },
        Traversable2: function() {
          return Data_Traversable.traversableTuple;
        }
      };
      var traversableWithIndexProduct = function(dictTraversableWithIndex) {
        return function(dictTraversableWithIndex1) {
          return {
            traverseWithIndex: function(dictApplicative) {
              return function(f) {
                return function(v) {
                  return Control_Apply.lift2(dictApplicative.Apply0())(Data_Functor_Product.product)(traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function($67) {
                    return f(Data_Either.Left.create($67));
                  })(v.value0))(traverseWithIndex(dictTraversableWithIndex1)(dictApplicative)(function($68) {
                    return f(Data_Either.Right.create($68));
                  })(v.value1));
                };
              };
            },
            FunctorWithIndex0: function() {
              return Data_FunctorWithIndex.functorWithIndexProduct(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
            },
            FoldableWithIndex1: function() {
              return Data_FoldableWithIndex.foldableWithIndexProduct(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
            },
            Traversable2: function() {
              return Data_Traversable.traversableProduct(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
            }
          };
        };
      };
      var traversableWithIndexMultiplicative = {
        traverseWithIndex: function(dictApplicative) {
          return function(f) {
            return Data_Traversable.traverse(Data_Traversable.traversableMultiplicative)(dictApplicative)(f(Data_Unit.unit));
          };
        },
        FunctorWithIndex0: function() {
          return Data_FunctorWithIndex.functorWithIndexMultiplicative;
        },
        FoldableWithIndex1: function() {
          return Data_FoldableWithIndex.foldableWithIndexMultiplicative;
        },
        Traversable2: function() {
          return Data_Traversable.traversableMultiplicative;
        }
      };
      var traversableWithIndexMaybe = {
        traverseWithIndex: function(dictApplicative) {
          return function(f) {
            return Data_Traversable.traverse(Data_Traversable.traversableMaybe)(dictApplicative)(f(Data_Unit.unit));
          };
        },
        FunctorWithIndex0: function() {
          return Data_FunctorWithIndex.functorWithIndexMaybe;
        },
        FoldableWithIndex1: function() {
          return Data_FoldableWithIndex.foldableWithIndexMaybe;
        },
        Traversable2: function() {
          return Data_Traversable.traversableMaybe;
        }
      };
      var traversableWithIndexLast = {
        traverseWithIndex: function(dictApplicative) {
          return function(f) {
            return Data_Traversable.traverse(Data_Traversable.traversableLast)(dictApplicative)(f(Data_Unit.unit));
          };
        },
        FunctorWithIndex0: function() {
          return Data_FunctorWithIndex.functorWithIndexLast;
        },
        FoldableWithIndex1: function() {
          return Data_FoldableWithIndex.foldableWithIndexLast;
        },
        Traversable2: function() {
          return Data_Traversable.traversableLast;
        }
      };
      var traversableWithIndexIdentity = {
        traverseWithIndex: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Identity.Identity)(f(Data_Unit.unit)(v));
            };
          };
        },
        FunctorWithIndex0: function() {
          return Data_FunctorWithIndex.functorWithIndexIdentity;
        },
        FoldableWithIndex1: function() {
          return Data_FoldableWithIndex.foldableWithIndexIdentity;
        },
        Traversable2: function() {
          return Data_Traversable.traversableIdentity;
        }
      };
      var traversableWithIndexFirst = {
        traverseWithIndex: function(dictApplicative) {
          return function(f) {
            return Data_Traversable.traverse(Data_Traversable.traversableFirst)(dictApplicative)(f(Data_Unit.unit));
          };
        },
        FunctorWithIndex0: function() {
          return Data_FunctorWithIndex.functorWithIndexFirst;
        },
        FoldableWithIndex1: function() {
          return Data_FoldableWithIndex.foldableWithIndexFirst;
        },
        Traversable2: function() {
          return Data_Traversable.traversableFirst;
        }
      };
      var traversableWithIndexEither = {
        traverseWithIndex: function(dictApplicative) {
          return function(v) {
            return function(v1) {
              if (v1 instanceof Data_Either.Left) {
                return Control_Applicative.pure(dictApplicative)(new Data_Either.Left(v1.value0));
              }
              ;
              if (v1 instanceof Data_Either.Right) {
                return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Either.Right.create)(v(Data_Unit.unit)(v1.value0));
              }
              ;
              throw new Error("Failed pattern match at Data.TraversableWithIndex (line 95, column 1 - line 97, column 53): " + [v.constructor.name, v1.constructor.name]);
            };
          };
        },
        FunctorWithIndex0: function() {
          return Data_FunctorWithIndex.functorWithIndexEither;
        },
        FoldableWithIndex1: function() {
          return Data_FoldableWithIndex.foldableWithIndexEither;
        },
        Traversable2: function() {
          return Data_Traversable.traversableEither;
        }
      };
      var traversableWithIndexDual = {
        traverseWithIndex: function(dictApplicative) {
          return function(f) {
            return Data_Traversable.traverse(Data_Traversable.traversableDual)(dictApplicative)(f(Data_Unit.unit));
          };
        },
        FunctorWithIndex0: function() {
          return Data_FunctorWithIndex.functorWithIndexDual;
        },
        FoldableWithIndex1: function() {
          return Data_FoldableWithIndex.foldableWithIndexDual;
        },
        Traversable2: function() {
          return Data_Traversable.traversableDual;
        }
      };
      var traversableWithIndexDisj = {
        traverseWithIndex: function(dictApplicative) {
          return function(f) {
            return Data_Traversable.traverse(Data_Traversable.traversableDisj)(dictApplicative)(f(Data_Unit.unit));
          };
        },
        FunctorWithIndex0: function() {
          return Data_FunctorWithIndex.functorWithIndexDisj;
        },
        FoldableWithIndex1: function() {
          return Data_FoldableWithIndex.foldableWithIndexDisj;
        },
        Traversable2: function() {
          return Data_Traversable.traversableDisj;
        }
      };
      var traversableWithIndexCoproduct = function(dictTraversableWithIndex) {
        return function(dictTraversableWithIndex1) {
          return {
            traverseWithIndex: function(dictApplicative) {
              return function(f) {
                return Data_Functor_Coproduct.coproduct(function() {
                  var $69 = Data_Functor.map(dictApplicative.Apply0().Functor0())(function($72) {
                    return Data_Functor_Coproduct.Coproduct(Data_Either.Left.create($72));
                  });
                  var $70 = traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function($73) {
                    return f(Data_Either.Left.create($73));
                  });
                  return function($71) {
                    return $69($70($71));
                  };
                }())(function() {
                  var $74 = Data_Functor.map(dictApplicative.Apply0().Functor0())(function($77) {
                    return Data_Functor_Coproduct.Coproduct(Data_Either.Right.create($77));
                  });
                  var $75 = traverseWithIndex(dictTraversableWithIndex1)(dictApplicative)(function($78) {
                    return f(Data_Either.Right.create($78));
                  });
                  return function($76) {
                    return $74($75($76));
                  };
                }());
              };
            },
            FunctorWithIndex0: function() {
              return Data_FunctorWithIndex.functorWithIndexCoproduct(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
            },
            FoldableWithIndex1: function() {
              return Data_FoldableWithIndex.foldableWithIndexCoproduct(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
            },
            Traversable2: function() {
              return Data_Traversable.traversableCoproduct(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
            }
          };
        };
      };
      var traversableWithIndexConst = {
        traverseWithIndex: function(dictApplicative) {
          return function(v) {
            return function(v1) {
              return Control_Applicative.pure(dictApplicative)(v1);
            };
          };
        },
        FunctorWithIndex0: function() {
          return Data_FunctorWithIndex.functorWithIndexConst;
        },
        FoldableWithIndex1: function() {
          return Data_FoldableWithIndex.foldableWithIndexConst;
        },
        Traversable2: function() {
          return Data_Traversable.traversableConst;
        }
      };
      var traversableWithIndexConj = {
        traverseWithIndex: function(dictApplicative) {
          return function(f) {
            return Data_Traversable.traverse(Data_Traversable.traversableConj)(dictApplicative)(f(Data_Unit.unit));
          };
        },
        FunctorWithIndex0: function() {
          return Data_FunctorWithIndex.functorWithIndexConj;
        },
        FoldableWithIndex1: function() {
          return Data_FoldableWithIndex.foldableWithIndexConj;
        },
        Traversable2: function() {
          return Data_Traversable.traversableConj;
        }
      };
      var traversableWithIndexCompose = function(dictTraversableWithIndex) {
        return function(dictTraversableWithIndex1) {
          return {
            traverseWithIndex: function(dictApplicative) {
              return function(f) {
                return function(v) {
                  return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_Compose.Compose)(traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function() {
                    var $79 = traverseWithIndex(dictTraversableWithIndex1)(dictApplicative);
                    var $80 = Data_Tuple.curry(f);
                    return function($81) {
                      return $79($80($81));
                    };
                  }())(v));
                };
              };
            },
            FunctorWithIndex0: function() {
              return Data_FunctorWithIndex.functorWithIndexCompose(dictTraversableWithIndex.FunctorWithIndex0())(dictTraversableWithIndex1.FunctorWithIndex0());
            },
            FoldableWithIndex1: function() {
              return Data_FoldableWithIndex.foldableWithIndexCompose(dictTraversableWithIndex.FoldableWithIndex1())(dictTraversableWithIndex1.FoldableWithIndex1());
            },
            Traversable2: function() {
              return Data_Traversable.traversableCompose(dictTraversableWithIndex.Traversable2())(dictTraversableWithIndex1.Traversable2());
            }
          };
        };
      };
      var traversableWithIndexArray = {
        traverseWithIndex: function(dictApplicative) {
          return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
        },
        FunctorWithIndex0: function() {
          return Data_FunctorWithIndex.functorWithIndexArray;
        },
        FoldableWithIndex1: function() {
          return Data_FoldableWithIndex.foldableWithIndexArray;
        },
        Traversable2: function() {
          return Data_Traversable.traversableArray;
        }
      };
      var traversableWithIndexApp = function(dictTraversableWithIndex) {
        return {
          traverseWithIndex: function(dictApplicative) {
            return function(f) {
              return function(v) {
                return Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Functor_App.App)(traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(f)(v));
              };
            };
          },
          FunctorWithIndex0: function() {
            return Data_FunctorWithIndex.functorWithIndexApp(dictTraversableWithIndex.FunctorWithIndex0());
          },
          FoldableWithIndex1: function() {
            return Data_FoldableWithIndex.foldableWithIndexApp(dictTraversableWithIndex.FoldableWithIndex1());
          },
          Traversable2: function() {
            return Data_Traversable.traversableApp(dictTraversableWithIndex.Traversable2());
          }
        };
      };
      var traversableWithIndexAdditive = {
        traverseWithIndex: function(dictApplicative) {
          return function(f) {
            return Data_Traversable.traverse(Data_Traversable.traversableAdditive)(dictApplicative)(f(Data_Unit.unit));
          };
        },
        FunctorWithIndex0: function() {
          return Data_FunctorWithIndex.functorWithIndexAdditive;
        },
        FoldableWithIndex1: function() {
          return Data_FoldableWithIndex.foldableWithIndexAdditive;
        },
        Traversable2: function() {
          return Data_Traversable.traversableAdditive;
        }
      };
      var mapAccumRWithIndex = function(dictTraversableWithIndex) {
        return function(f) {
          return function(s0) {
            return function(xs) {
              return Data_Traversable_Accum_Internal.stateR(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateR)(function(i) {
                return function(a) {
                  return function(s) {
                    return f(i)(s)(a);
                  };
                };
              })(xs))(s0);
            };
          };
        };
      };
      var scanrWithIndex = function(dictTraversableWithIndex) {
        return function(f) {
          return function(b0) {
            return function(xs) {
              return mapAccumRWithIndex(dictTraversableWithIndex)(function(i) {
                return function(b) {
                  return function(a) {
                    var b$prime = f(i)(a)(b);
                    return {
                      accum: b$prime,
                      value: b$prime
                    };
                  };
                };
              })(b0)(xs).value;
            };
          };
        };
      };
      var mapAccumLWithIndex = function(dictTraversableWithIndex) {
        return function(f) {
          return function(s0) {
            return function(xs) {
              return Data_Traversable_Accum_Internal.stateL(traverseWithIndex(dictTraversableWithIndex)(Data_Traversable_Accum_Internal.applicativeStateL)(function(i) {
                return function(a) {
                  return function(s) {
                    return f(i)(s)(a);
                  };
                };
              })(xs))(s0);
            };
          };
        };
      };
      var scanlWithIndex = function(dictTraversableWithIndex) {
        return function(f) {
          return function(b0) {
            return function(xs) {
              return mapAccumLWithIndex(dictTraversableWithIndex)(function(i) {
                return function(b) {
                  return function(a) {
                    var b$prime = f(i)(b)(a);
                    return {
                      accum: b$prime,
                      value: b$prime
                    };
                  };
                };
              })(b0)(xs).value;
            };
          };
        };
      };
      var forWithIndex = function(dictApplicative) {
        return function(dictTraversableWithIndex) {
          return Data_Function.flip(traverseWithIndex(dictTraversableWithIndex)(dictApplicative));
        };
      };
      module.exports = {
        traverseWithIndex,
        traverseWithIndexDefault,
        forWithIndex,
        scanlWithIndex,
        mapAccumLWithIndex,
        scanrWithIndex,
        mapAccumRWithIndex,
        traverseDefault,
        traversableWithIndexArray,
        traversableWithIndexMaybe,
        traversableWithIndexFirst,
        traversableWithIndexLast,
        traversableWithIndexAdditive,
        traversableWithIndexDual,
        traversableWithIndexConj,
        traversableWithIndexDisj,
        traversableWithIndexMultiplicative,
        traversableWithIndexEither,
        traversableWithIndexTuple,
        traversableWithIndexIdentity,
        traversableWithIndexConst,
        traversableWithIndexProduct,
        traversableWithIndexCoproduct,
        traversableWithIndexCompose,
        traversableWithIndexApp
      };
    }
  });

  // output/Data.Unfoldable/foreign.js
  var require_foreign32 = __commonJS({
    "output/Data.Unfoldable/foreign.js"(exports) {
      "use strict";
      exports.unfoldrArrayImpl = function(isNothing) {
        return function(fromJust) {
          return function(fst) {
            return function(snd) {
              return function(f) {
                return function(b) {
                  var result = [];
                  var value = b;
                  while (true) {
                    var maybe = f(value);
                    if (isNothing(maybe))
                      return result;
                    var tuple = fromJust(maybe);
                    result.push(fst(tuple));
                    value = snd(tuple);
                  }
                };
              };
            };
          };
        };
      };
    }
  });

  // output/Data.Unfoldable1/foreign.js
  var require_foreign33 = __commonJS({
    "output/Data.Unfoldable1/foreign.js"(exports) {
      "use strict";
      exports.unfoldr1ArrayImpl = function(isNothing) {
        return function(fromJust) {
          return function(fst) {
            return function(snd) {
              return function(f) {
                return function(b) {
                  var result = [];
                  var value = b;
                  while (true) {
                    var tuple = f(value);
                    result.push(fst(tuple));
                    var maybe = snd(tuple);
                    if (isNothing(maybe))
                      return result;
                    value = fromJust(maybe);
                  }
                };
              };
            };
          };
        };
      };
    }
  });

  // output/Data.Semigroup.Traversable/index.js
  var require_Data_Semigroup2 = __commonJS({
    "output/Data.Semigroup.Traversable/index.js"(exports, module) {
      "use strict";
      var Control_Category = require_Control2();
      var Data_Functor = require_Data4();
      var Data_Identity = require_Data20();
      var Data_Monoid_Dual = require_Data_Monoid3();
      var Data_Monoid_Multiplicative = require_Data_Monoid6();
      var Data_Semigroup_Foldable = require_Data_Semigroup();
      var Data_Traversable = require_Data31();
      var Data_Tuple = require_Data22();
      var traverse1 = function(dict) {
        return dict.traverse1;
      };
      var traversableTuple = {
        traverse1: function(dictApply) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApply.Functor0())(Data_Tuple.Tuple.create(v.value0))(f(v.value1));
            };
          };
        },
        sequence1: function(dictApply) {
          return function(v) {
            return Data_Functor.map(dictApply.Functor0())(Data_Tuple.Tuple.create(v.value0))(v.value1);
          };
        },
        Foldable10: function() {
          return Data_Semigroup_Foldable.foldableTuple;
        },
        Traversable1: function() {
          return Data_Traversable.traversableTuple;
        }
      };
      var traversableIdentity = {
        traverse1: function(dictApply) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApply.Functor0())(Data_Identity.Identity)(f(v));
            };
          };
        },
        sequence1: function(dictApply) {
          return function(v) {
            return Data_Functor.map(dictApply.Functor0())(Data_Identity.Identity)(v);
          };
        },
        Foldable10: function() {
          return Data_Semigroup_Foldable.foldableIdentity;
        },
        Traversable1: function() {
          return Data_Traversable.traversableIdentity;
        }
      };
      var sequence1Default = function(dictTraversable1) {
        return function(dictApply) {
          return traverse1(dictTraversable1)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
        };
      };
      var traversableDual = {
        traverse1: function(dictApply) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Dual.Dual)(f(v));
            };
          };
        },
        sequence1: function(dictApply) {
          return sequence1Default(traversableDual)(dictApply);
        },
        Foldable10: function() {
          return Data_Semigroup_Foldable.foldableDual;
        },
        Traversable1: function() {
          return Data_Traversable.traversableDual;
        }
      };
      var traversableMultiplicative = {
        traverse1: function(dictApply) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApply.Functor0())(Data_Monoid_Multiplicative.Multiplicative)(f(v));
            };
          };
        },
        sequence1: function(dictApply) {
          return sequence1Default(traversableMultiplicative)(dictApply);
        },
        Foldable10: function() {
          return Data_Semigroup_Foldable.foldableMultiplicative;
        },
        Traversable1: function() {
          return Data_Traversable.traversableMultiplicative;
        }
      };
      var sequence1 = function(dict) {
        return dict.sequence1;
      };
      var traverse1Default = function(dictTraversable1) {
        return function(dictApply) {
          return function(f) {
            return function(ta) {
              return sequence1(dictTraversable1)(dictApply)(Data_Functor.map(dictTraversable1.Traversable1().Functor0())(f)(ta));
            };
          };
        };
      };
      module.exports = {
        sequence1,
        traverse1,
        traverse1Default,
        sequence1Default,
        traversableDual,
        traversableMultiplicative,
        traversableTuple,
        traversableIdentity
      };
    }
  });

  // output/Data.Unfoldable1/index.js
  var require_Data33 = __commonJS({
    "output/Data.Unfoldable1/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign33();
      var Data_Boolean = require_Data();
      var Data_Maybe = require_Data15();
      var Data_Semigroup_Traversable = require_Data_Semigroup2();
      var Data_Tuple = require_Data22();
      var unfoldr1 = function(dict) {
        return dict.unfoldr1;
      };
      var unfoldable1Maybe = {
        unfoldr1: function(f) {
          return function(b) {
            return new Data_Maybe.Just(Data_Tuple.fst(f(b)));
          };
        }
      };
      var unfoldable1Array = {
        unfoldr1: $foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd)
      };
      var replicate1 = function(dictUnfoldable1) {
        return function(n) {
          return function(v) {
            var step = function(i) {
              if (i <= 0) {
                return new Data_Tuple.Tuple(v, Data_Maybe.Nothing.value);
              }
              ;
              if (Data_Boolean.otherwise) {
                return new Data_Tuple.Tuple(v, new Data_Maybe.Just(i - 1 | 0));
              }
              ;
              throw new Error("Failed pattern match at Data.Unfoldable1 (line 67, column 5 - line 67, column 39): " + [i.constructor.name]);
            };
            return unfoldr1(dictUnfoldable1)(step)(n - 1 | 0);
          };
        };
      };
      var replicate1A = function(dictApply) {
        return function(dictUnfoldable1) {
          return function(dictTraversable1) {
            return function(n) {
              return function(m) {
                return Data_Semigroup_Traversable.sequence1(dictTraversable1)(dictApply)(replicate1(dictUnfoldable1)(n)(m));
              };
            };
          };
        };
      };
      var singleton = function(dictUnfoldable1) {
        return replicate1(dictUnfoldable1)(1);
      };
      var range = function(dictUnfoldable1) {
        return function(start) {
          return function(end) {
            var go = function(delta2) {
              return function(i) {
                var i$prime = i + delta2 | 0;
                return new Data_Tuple.Tuple(i, function() {
                  var $9 = i === end;
                  if ($9) {
                    return Data_Maybe.Nothing.value;
                  }
                  ;
                  return new Data_Maybe.Just(i$prime);
                }());
              };
            };
            var delta = function() {
              var $10 = end >= start;
              if ($10) {
                return 1;
              }
              ;
              return -1 | 0;
            }();
            return unfoldr1(dictUnfoldable1)(go(delta))(start);
          };
        };
      };
      module.exports = {
        unfoldr1,
        replicate1,
        replicate1A,
        singleton,
        range,
        unfoldable1Array,
        unfoldable1Maybe
      };
    }
  });

  // output/Data.Unfoldable/index.js
  var require_Data34 = __commonJS({
    "output/Data.Unfoldable/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign32();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Data_Maybe = require_Data15();
      var Data_Traversable = require_Data31();
      var Data_Tuple = require_Data22();
      var Data_Unfoldable1 = require_Data33();
      var Data_Unit = require_Data3();
      var unfoldr = function(dict) {
        return dict.unfoldr;
      };
      var unfoldableMaybe = {
        unfoldr: function(f) {
          return function(b) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.fst)(f(b));
          };
        },
        Unfoldable10: function() {
          return Data_Unfoldable1.unfoldable1Maybe;
        }
      };
      var unfoldableArray = {
        unfoldr: $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd),
        Unfoldable10: function() {
          return Data_Unfoldable1.unfoldable1Array;
        }
      };
      var replicate = function(dictUnfoldable) {
        return function(n) {
          return function(v) {
            var step = function(i) {
              var $8 = i <= 0;
              if ($8) {
                return Data_Maybe.Nothing.value;
              }
              ;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v, i - 1 | 0));
            };
            return unfoldr(dictUnfoldable)(step)(n);
          };
        };
      };
      var replicateA = function(dictApplicative) {
        return function(dictUnfoldable) {
          return function(dictTraversable) {
            return function(n) {
              return function(m) {
                return Data_Traversable.sequence(dictTraversable)(dictApplicative)(replicate(dictUnfoldable)(n)(m));
              };
            };
          };
        };
      };
      var none = function(dictUnfoldable) {
        return unfoldr(dictUnfoldable)(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Unit.unit);
      };
      var fromMaybe = function(dictUnfoldable) {
        return unfoldr(dictUnfoldable)(function(b) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Maybe.Nothing.value))(b);
        });
      };
      module.exports = {
        unfoldr,
        replicate,
        replicateA,
        none,
        fromMaybe,
        unfoldableArray,
        unfoldableMaybe,
        range: Data_Unfoldable1.range,
        replicate1: Data_Unfoldable1.replicate1,
        replicate1A: Data_Unfoldable1.replicate1A,
        singleton: Data_Unfoldable1.singleton,
        unfoldr1: Data_Unfoldable1.unfoldr1
      };
    }
  });

  // output/Data.NonEmpty/index.js
  var require_Data35 = __commonJS({
    "output/Data.NonEmpty/index.js"(exports, module) {
      "use strict";
      var Control_Alt = require_Control6();
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Control_Plus = require_Control9();
      var Data_Eq = require_Data8();
      var Data_Foldable = require_Data27();
      var Data_FoldableWithIndex = require_Data30();
      var Data_Functor = require_Data4();
      var Data_FunctorWithIndex = require_Data29();
      var Data_Maybe = require_Data15();
      var Data_Ord = require_Data12();
      var Data_Ordering = require_Data9();
      var Data_Semigroup = require_Data7();
      var Data_Semigroup_Foldable = require_Data_Semigroup();
      var Data_Show = require_Data14();
      var Data_Traversable = require_Data31();
      var Data_TraversableWithIndex = require_Data32();
      var Data_Tuple = require_Data22();
      var Data_Unfoldable = require_Data34();
      var NonEmpty = function() {
        function NonEmpty2(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
        }
        ;
        NonEmpty2.create = function(value0) {
          return function(value1) {
            return new NonEmpty2(value0, value1);
          };
        };
        return NonEmpty2;
      }();
      var unfoldable1NonEmpty = function(dictUnfoldable) {
        return {
          unfoldr1: function(f) {
            return function(b) {
              return Data_Tuple.uncurry(NonEmpty.create)(Data_Functor.map(Data_Tuple.functorTuple)(Data_Unfoldable.unfoldr(dictUnfoldable)(Data_Functor.map(Data_Maybe.functorMaybe)(f)))(f(b)));
            };
          }
        };
      };
      var tail = function(v) {
        return v.value1;
      };
      var singleton = function(dictPlus) {
        return function(a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
        };
      };
      var showNonEmpty = function(dictShow) {
        return function(dictShow1) {
          return {
            show: function(v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
            }
          };
        };
      };
      var semigroupNonEmpty = function(dictApplicative) {
        return function(dictSemigroup) {
          return {
            append: function(v) {
              return function(v1) {
                return new NonEmpty(v.value0, Data_Semigroup.append(dictSemigroup)(v.value1)(Data_Semigroup.append(dictSemigroup)(Control_Applicative.pure(dictApplicative)(v1.value0))(v1.value1)));
              };
            }
          };
        };
      };
      var oneOf = function(dictAlternative) {
        return function(v) {
          return Control_Alt.alt(dictAlternative.Plus1().Alt0())(Control_Applicative.pure(dictAlternative.Applicative0())(v.value0))(v.value1);
        };
      };
      var head = function(v) {
        return v.value0;
      };
      var functorNonEmpty = function(dictFunctor) {
        return {
          map: function(f) {
            return function(m) {
              return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
            };
          }
        };
      };
      var functorWithIndex = function(dictFunctorWithIndex) {
        return {
          mapWithIndex: function(f) {
            return function(v) {
              return new NonEmpty(f(Data_Maybe.Nothing.value)(v.value0), Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(function($161) {
                return f(Data_Maybe.Just.create($161));
              })(v.value1));
            };
          },
          Functor0: function() {
            return functorNonEmpty(dictFunctorWithIndex.Functor0());
          }
        };
      };
      var fromNonEmpty = function(f) {
        return function(v) {
          return f(v.value0)(v.value1);
        };
      };
      var foldableNonEmpty = function(dictFoldable) {
        return {
          foldMap: function(dictMonoid) {
            return function(f) {
              return function(v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
            };
          },
          foldl: function(f) {
            return function(b) {
              return function(v) {
                return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
            };
          },
          foldr: function(f) {
            return function(b) {
              return function(v) {
                return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
            };
          }
        };
      };
      var foldableWithIndexNonEmpty = function(dictFoldableWithIndex) {
        return {
          foldMapWithIndex: function(dictMonoid) {
            return function(f) {
              return function(v) {
                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(Data_Maybe.Nothing.value)(v.value0))(Data_FoldableWithIndex.foldMapWithIndex(dictFoldableWithIndex)(dictMonoid)(function($162) {
                  return f(Data_Maybe.Just.create($162));
                })(v.value1));
              };
            };
          },
          foldlWithIndex: function(f) {
            return function(b) {
              return function(v) {
                return Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex)(function($163) {
                  return f(Data_Maybe.Just.create($163));
                })(f(Data_Maybe.Nothing.value)(b)(v.value0))(v.value1);
              };
            };
          },
          foldrWithIndex: function(f) {
            return function(b) {
              return function(v) {
                return f(Data_Maybe.Nothing.value)(v.value0)(Data_FoldableWithIndex.foldrWithIndex(dictFoldableWithIndex)(function($164) {
                  return f(Data_Maybe.Just.create($164));
                })(b)(v.value1));
              };
            };
          },
          Foldable0: function() {
            return foldableNonEmpty(dictFoldableWithIndex.Foldable0());
          }
        };
      };
      var traversableNonEmpty = function(dictTraversable) {
        return {
          sequence: function(dictApplicative) {
            return function(v) {
              return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(v.value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(v.value1));
            };
          },
          traverse: function(dictApplicative) {
            return function(f) {
              return function(v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(f(v.value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(v.value1));
              };
            };
          },
          Functor0: function() {
            return functorNonEmpty(dictTraversable.Functor0());
          },
          Foldable1: function() {
            return foldableNonEmpty(dictTraversable.Foldable1());
          }
        };
      };
      var traversableWithIndexNonEmpty = function(dictTraversableWithIndex) {
        return {
          traverseWithIndex: function(dictApplicative) {
            return function(f) {
              return function(v) {
                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmpty.create)(f(Data_Maybe.Nothing.value)(v.value0)))(Data_TraversableWithIndex.traverseWithIndex(dictTraversableWithIndex)(dictApplicative)(function($165) {
                  return f(Data_Maybe.Just.create($165));
                })(v.value1));
              };
            };
          },
          FunctorWithIndex0: function() {
            return functorWithIndex(dictTraversableWithIndex.FunctorWithIndex0());
          },
          FoldableWithIndex1: function() {
            return foldableWithIndexNonEmpty(dictTraversableWithIndex.FoldableWithIndex1());
          },
          Traversable2: function() {
            return traversableNonEmpty(dictTraversableWithIndex.Traversable2());
          }
        };
      };
      var foldable1NonEmpty = function(dictFoldable) {
        return {
          foldMap1: function(dictSemigroup) {
            return function(f) {
              return function(v) {
                return Data_Foldable.foldl(dictFoldable)(function(s) {
                  return function(a1) {
                    return Data_Semigroup.append(dictSemigroup)(s)(f(a1));
                  };
                })(f(v.value0))(v.value1);
              };
            };
          },
          foldr1: function(f) {
            return function(v) {
              return Data_Maybe.maybe(v.value0)(f(v.value0))(Data_Foldable.foldr(dictFoldable)(function(a1) {
                var $166 = Data_Maybe.maybe(a1)(f(a1));
                return function($167) {
                  return Data_Maybe.Just.create($166($167));
                };
              })(Data_Maybe.Nothing.value)(v.value1));
            };
          },
          foldl1: function(f) {
            return function(v) {
              return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
            };
          },
          Foldable0: function() {
            return foldableNonEmpty(dictFoldable);
          }
        };
      };
      var foldl1 = function(dictFoldable) {
        return function(dictWarn) {
          return Data_Semigroup_Foldable.foldl1(foldable1NonEmpty(dictFoldable));
        };
      };
      var eqNonEmpty = function(dictEq1) {
        return function(dictEq) {
          return {
            eq: function(x) {
              return function(y) {
                return Data_Eq.eq(dictEq)(x.value0)(y.value0) && Data_Eq.eq1(dictEq1)(dictEq)(x.value1)(y.value1);
              };
            }
          };
        };
      };
      var ordNonEmpty = function(dictOrd1) {
        return function(dictOrd) {
          return {
            compare: function(x) {
              return function(y) {
                var v = Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
                }
                ;
                if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
                }
                ;
                return Data_Ord.compare1(dictOrd1)(dictOrd)(x.value1)(y.value1);
              };
            },
            Eq0: function() {
              return eqNonEmpty(dictOrd1.Eq10())(dictOrd.Eq0());
            }
          };
        };
      };
      var eq1NonEmpty = function(dictEq1) {
        return {
          eq1: function(dictEq) {
            return Data_Eq.eq(eqNonEmpty(dictEq1)(dictEq));
          }
        };
      };
      var ord1NonEmpty = function(dictOrd1) {
        return {
          compare1: function(dictOrd) {
            return Data_Ord.compare(ordNonEmpty(dictOrd1)(dictOrd));
          },
          Eq10: function() {
            return eq1NonEmpty(dictOrd1.Eq10());
          }
        };
      };
      module.exports = {
        NonEmpty,
        singleton,
        foldl1,
        fromNonEmpty,
        oneOf,
        head,
        tail,
        showNonEmpty,
        eqNonEmpty,
        eq1NonEmpty,
        ordNonEmpty,
        ord1NonEmpty,
        functorNonEmpty,
        functorWithIndex,
        foldableNonEmpty,
        foldableWithIndexNonEmpty,
        traversableNonEmpty,
        traversableWithIndexNonEmpty,
        foldable1NonEmpty,
        unfoldable1NonEmpty,
        semigroupNonEmpty
      };
    }
  });

  // output/Data.List.Types/index.js
  var require_Data_List = __commonJS({
    "output/Data.List.Types/index.js"(exports, module) {
      "use strict";
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Control_Bind = require_Control5();
      var Control_Category = require_Control2();
      var Data_Eq = require_Data8();
      var Data_Foldable = require_Data27();
      var Data_FoldableWithIndex = require_Data30();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Data_FunctorWithIndex = require_Data29();
      var Data_Maybe = require_Data15();
      var Data_Monoid = require_Data18();
      var Data_NonEmpty = require_Data35();
      var Data_Ord = require_Data12();
      var Data_Ordering = require_Data9();
      var Data_Semigroup = require_Data7();
      var Data_Semigroup_Traversable = require_Data_Semigroup2();
      var Data_Semiring = require_Data10();
      var Data_Show = require_Data14();
      var Data_Traversable = require_Data31();
      var Data_TraversableWithIndex = require_Data32();
      var Data_Tuple = require_Data22();
      var Nil = function() {
        function Nil2() {
        }
        ;
        Nil2.value = new Nil2();
        return Nil2;
      }();
      var Cons = function() {
        function Cons2(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
        }
        ;
        Cons2.create = function(value0) {
          return function(value1) {
            return new Cons2(value0, value1);
          };
        };
        return Cons2;
      }();
      var NonEmptyList = function(x) {
        return x;
      };
      var toList = function(v) {
        return new Cons(v.value0, v.value1);
      };
      var newtypeNonEmptyList = {
        Coercible0: function() {
          return void 0;
        }
      };
      var nelCons = function(a) {
        return function(v) {
          return new Data_NonEmpty.NonEmpty(a, new Cons(v.value0, v.value1));
        };
      };
      var listMap = function(f) {
        var chunkedRevMap = function($copy_chunksAcc) {
          return function($copy_v) {
            var $tco_var_chunksAcc = $copy_chunksAcc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(chunksAcc, v) {
              if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                $tco_var_chunksAcc = new Cons(v, chunksAcc);
                $copy_v = v.value1.value1.value1;
                return;
              }
              ;
              var unrolledMap = function(v1) {
                if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                  return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                }
                ;
                if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                  return new Cons(f(v1.value0), Nil.value);
                }
                ;
                return Nil.value;
              };
              var reverseUnrolledMap = function($copy_v1) {
                return function($copy_acc) {
                  var $tco_var_v1 = $copy_v1;
                  var $tco_done1 = false;
                  var $tco_result2;
                  function $tco_loop2(v1, acc) {
                    if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                      $tco_var_v1 = v1.value1;
                      $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                      return;
                    }
                    ;
                    $tco_done1 = true;
                    return acc;
                  }
                  ;
                  while (!$tco_done1) {
                    $tco_result2 = $tco_loop2($tco_var_v1, $copy_acc);
                  }
                  ;
                  return $tco_result2;
                };
              };
              $tco_done = true;
              return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
            }
            ;
            return $tco_result;
          };
        };
        return chunkedRevMap(Nil.value);
      };
      var functorList = {
        map: listMap
      };
      var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
      var foldableList = {
        foldr: function(f) {
          return function(b) {
            var rev = function() {
              var go = function($copy_acc) {
                return function($copy_v) {
                  var $tco_var_acc = $copy_acc;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(acc, v) {
                    if (v instanceof Nil) {
                      $tco_done = true;
                      return acc;
                    }
                    ;
                    if (v instanceof Cons) {
                      $tco_var_acc = new Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                    }
                    ;
                    throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [acc.constructor.name, v.constructor.name]);
                  }
                  ;
                  while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_acc, $copy_v);
                  }
                  ;
                  return $tco_result;
                };
              };
              return go(Nil.value);
            }();
            var $205 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
            return function($206) {
              return $205(rev($206));
            };
          };
        },
        foldl: function(f) {
          var go = function($copy_b) {
            return function($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done1 = false;
              var $tco_result;
              function $tco_loop(b, v) {
                if (v instanceof Nil) {
                  $tco_done1 = true;
                  return b;
                }
                ;
                if (v instanceof Cons) {
                  $tco_var_b = f(b)(v.value0);
                  $copy_v = v.value1;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [v.constructor.name]);
              }
              ;
              while (!$tco_done1) {
                $tco_result = $tco_loop($tco_var_b, $copy_v);
              }
              ;
              return $tco_result;
            };
          };
          return go;
        },
        foldMap: function(dictMonoid) {
          return function(f) {
            return Data_Foldable.foldl(foldableList)(function(acc) {
              var $207 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function($208) {
                return $207(f($208));
              };
            })(Data_Monoid.mempty(dictMonoid));
          };
        }
      };
      var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
      var foldableWithIndexList = {
        foldrWithIndex: function(f) {
          return function(b) {
            return function(xs) {
              var v = function() {
                var rev = Data_Foldable.foldl(foldableList)(function(v1) {
                  return function(a) {
                    return new Data_Tuple.Tuple(v1.value0 + 1 | 0, new Cons(a, v1.value1));
                  };
                });
                return rev(new Data_Tuple.Tuple(0, Nil.value))(xs);
              }();
              return Data_Tuple.snd(Data_Foldable.foldl(foldableList)(function(v1) {
                return function(a) {
                  return new Data_Tuple.Tuple(v1.value0 - 1 | 0, f(v1.value0 - 1 | 0)(a)(v1.value1));
                };
              })(new Data_Tuple.Tuple(v.value0, b))(v.value1));
            };
          };
        },
        foldlWithIndex: function(f) {
          return function(acc) {
            var $209 = Data_Foldable.foldl(foldableList)(function(v) {
              return function(a) {
                return new Data_Tuple.Tuple(v.value0 + 1 | 0, f(v.value0)(v.value1)(a));
              };
            })(new Data_Tuple.Tuple(0, acc));
            return function($210) {
              return Data_Tuple.snd($209($210));
            };
          };
        },
        foldMapWithIndex: function(dictMonoid) {
          return function(f) {
            return Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function(i) {
              return function(acc) {
                var $211 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                var $212 = f(i);
                return function($213) {
                  return $211($212($213));
                };
              };
            })(Data_Monoid.mempty(dictMonoid));
          };
        },
        Foldable0: function() {
          return foldableList;
        }
      };
      var foldableWithIndexNonEmptyList = {
        foldMapWithIndex: function(dictMonoid) {
          return function(f) {
            return function(v) {
              return Data_FoldableWithIndex.foldMapWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(dictMonoid)(function() {
                var $214 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function($215) {
                  return f($214($215));
                };
              }())(v);
            };
          };
        },
        foldlWithIndex: function(f) {
          return function(b) {
            return function(v) {
              return Data_FoldableWithIndex.foldlWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function() {
                var $216 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function($217) {
                  return f($216($217));
                };
              }())(b)(v);
            };
          };
        },
        foldrWithIndex: function(f) {
          return function(b) {
            return function(v) {
              return Data_FoldableWithIndex.foldrWithIndex(Data_NonEmpty.foldableWithIndexNonEmpty(foldableWithIndexList))(function() {
                var $218 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function($219) {
                  return f($218($219));
                };
              }())(b)(v);
            };
          };
        },
        Foldable0: function() {
          return foldableNonEmptyList;
        }
      };
      var functorWithIndexList = {
        mapWithIndex: function(f) {
          return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexList)(function(i) {
            return function(x) {
              return function(acc) {
                return new Cons(f(i)(x), acc);
              };
            };
          })(Nil.value);
        },
        Functor0: function() {
          return functorList;
        }
      };
      var functorWithIndexNonEmptyList = {
        mapWithIndex: function(fn) {
          return function(v) {
            return NonEmptyList(Data_FunctorWithIndex.mapWithIndex(Data_NonEmpty.functorWithIndex(functorWithIndexList))(function() {
              var $220 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
              return function($221) {
                return fn($220($221));
              };
            }())(v));
          };
        },
        Functor0: function() {
          return functorNonEmptyList;
        }
      };
      var semigroupList = {
        append: function(xs) {
          return function(ys) {
            return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
          };
        }
      };
      var monoidList = {
        mempty: Nil.value,
        Semigroup0: function() {
          return semigroupList;
        }
      };
      var semigroupNonEmptyList = {
        append: function(v) {
          return function(as$prime) {
            return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
          };
        }
      };
      var showList = function(dictShow) {
        return {
          show: function(v) {
            if (v instanceof Nil) {
              return "Nil";
            }
            ;
            return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
          }
        };
      };
      var showNonEmptyList = function(dictShow) {
        return {
          show: function(v) {
            return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
          }
        };
      };
      var traversableList = {
        traverse: function(dictApplicative) {
          return function(f) {
            var $222 = Data_Functor.map(dictApplicative.Apply0().Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value));
            var $223 = Data_Foldable.foldl(foldableList)(function(acc) {
              var $225 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
              return function($226) {
                return $225(f($226));
              };
            })(Control_Applicative.pure(dictApplicative)(Nil.value));
            return function($224) {
              return $222($223($224));
            };
          };
        },
        sequence: function(dictApplicative) {
          return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
        },
        Functor0: function() {
          return functorList;
        },
        Foldable1: function() {
          return foldableList;
        }
      };
      var traversableNonEmptyList = Data_NonEmpty.traversableNonEmpty(traversableList);
      var traversableWithIndexList = {
        traverseWithIndex: function(dictApplicative) {
          return function(f) {
            var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
            var $227 = Data_Functor.map(dictApplicative.Apply0().Functor0())(rev);
            var $228 = Data_FoldableWithIndex.foldlWithIndex(foldableWithIndexList)(function(i) {
              return function(acc) {
                var $230 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
                var $231 = f(i);
                return function($232) {
                  return $230($231($232));
                };
              };
            })(Control_Applicative.pure(dictApplicative)(Nil.value));
            return function($229) {
              return $227($228($229));
            };
          };
        },
        FunctorWithIndex0: function() {
          return functorWithIndexList;
        },
        FoldableWithIndex1: function() {
          return foldableWithIndexList;
        },
        Traversable2: function() {
          return traversableList;
        }
      };
      var traversableWithIndexNonEmptyList = {
        traverseWithIndex: function(dictApplicative) {
          return function(f) {
            return function(v) {
              return Data_Functor.map(dictApplicative.Apply0().Functor0())(NonEmptyList)(Data_TraversableWithIndex.traverseWithIndex(Data_NonEmpty.traversableWithIndexNonEmpty(traversableWithIndexList))(dictApplicative)(function() {
                var $233 = Data_Maybe.maybe(0)(Data_Semiring.add(Data_Semiring.semiringInt)(1));
                return function($234) {
                  return f($233($234));
                };
              }())(v));
            };
          };
        },
        FunctorWithIndex0: function() {
          return functorWithIndexNonEmptyList;
        },
        FoldableWithIndex1: function() {
          return foldableWithIndexNonEmptyList;
        },
        Traversable2: function() {
          return traversableNonEmptyList;
        }
      };
      var unfoldable1List = {
        unfoldr1: function(f) {
          return function(b) {
            var go = function($copy_source) {
              return function($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                  var v = f(source);
                  if (v.value1 instanceof Data_Maybe.Just) {
                    $tco_var_source = v.value1.value0;
                    $copy_memo = new Cons(v.value0, memo);
                    return;
                  }
                  ;
                  if (v.value1 instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                  }
                  ;
                  throw new Error("Failed pattern match at Data.List.Types (line 136, column 22 - line 138, column 61): " + [v.constructor.name]);
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_source, $copy_memo);
                }
                ;
                return $tco_result;
              };
            };
            return go(b)(Nil.value);
          };
        }
      };
      var unfoldableList = {
        unfoldr: function(f) {
          return function(b) {
            var go = function($copy_source) {
              return function($copy_memo) {
                var $tco_var_source = $copy_source;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(source, memo) {
                  var v = f(source);
                  if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                  }
                  ;
                  if (v instanceof Data_Maybe.Just) {
                    $tco_var_source = v.value0.value1;
                    $copy_memo = new Cons(v.value0.value0, memo);
                    return;
                  }
                  ;
                  throw new Error("Failed pattern match at Data.List.Types (line 143, column 22 - line 145, column 52): " + [v.constructor.name]);
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_source, $copy_memo);
                }
                ;
                return $tco_result;
              };
            };
            return go(b)(Nil.value);
          };
        },
        Unfoldable10: function() {
          return unfoldable1List;
        }
      };
      var unfoldable1NonEmptyList = Data_NonEmpty.unfoldable1NonEmpty(unfoldableList);
      var foldable1NonEmptyList = Data_NonEmpty.foldable1NonEmpty(foldableList);
      var extendNonEmptyList = {
        extend: function(f) {
          return function(v) {
            var go = function(a) {
              return function(v1) {
                return {
                  val: new Cons(f(new Data_NonEmpty.NonEmpty(a, v1.acc)), v1.val),
                  acc: new Cons(a, v1.acc)
                };
              };
            };
            return new Data_NonEmpty.NonEmpty(f(v), Data_Foldable.foldr(foldableList)(go)({
              val: Nil.value,
              acc: Nil.value
            })(v.value1).val);
          };
        },
        Functor0: function() {
          return functorNonEmptyList;
        }
      };
      var extendList = {
        extend: function(v) {
          return function(v1) {
            if (v1 instanceof Nil) {
              return Nil.value;
            }
            ;
            if (v1 instanceof Cons) {
              var go = function(a$prime) {
                return function(v2) {
                  var acc$prime = new Cons(a$prime, v2.acc);
                  return {
                    val: new Cons(v(acc$prime), v2.val),
                    acc: acc$prime
                  };
                };
              };
              return new Cons(v(v1), Data_Foldable.foldr(foldableList)(go)({
                val: Nil.value,
                acc: Nil.value
              })(v1.value1).val);
            }
            ;
            throw new Error("Failed pattern match at Data.List.Types (line 183, column 1 - line 190, column 42): " + [v.constructor.name, v1.constructor.name]);
          };
        },
        Functor0: function() {
          return functorList;
        }
      };
      var eq1List = {
        eq1: function(dictEq) {
          return function(xs) {
            return function(ys) {
              var go = function($copy_v) {
                return function($copy_v1) {
                  return function($copy_v2) {
                    var $tco_var_v = $copy_v;
                    var $tco_var_v1 = $copy_v1;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1, v2) {
                      if (!v2) {
                        $tco_done = true;
                        return false;
                      }
                      ;
                      if (v instanceof Nil && v1 instanceof Nil) {
                        $tco_done = true;
                        return v2;
                      }
                      ;
                      if (v instanceof Cons && v1 instanceof Cons) {
                        $tco_var_v = v.value1;
                        $tco_var_v1 = v1.value1;
                        $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                        return;
                      }
                      ;
                      $tco_done = true;
                      return false;
                    }
                    ;
                    while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                    }
                    ;
                    return $tco_result;
                  };
                };
              };
              return go(xs)(ys)(true);
            };
          };
        }
      };
      var eq1NonEmptyList = Data_NonEmpty.eq1NonEmpty(eq1List);
      var eqList = function(dictEq) {
        return {
          eq: Data_Eq.eq1(eq1List)(dictEq)
        };
      };
      var eqNonEmptyList = function(dictEq) {
        return Data_NonEmpty.eqNonEmpty(eq1List)(dictEq);
      };
      var ord1List = {
        compare1: function(dictOrd) {
          return function(xs) {
            return function(ys) {
              var go = function($copy_v) {
                return function($copy_v1) {
                  var $tco_var_v = $copy_v;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v, v1) {
                    if (v instanceof Nil && v1 instanceof Nil) {
                      $tco_done = true;
                      return Data_Ordering.EQ.value;
                    }
                    ;
                    if (v instanceof Nil) {
                      $tco_done = true;
                      return Data_Ordering.LT.value;
                    }
                    ;
                    if (v1 instanceof Nil) {
                      $tco_done = true;
                      return Data_Ordering.GT.value;
                    }
                    ;
                    if (v instanceof Cons && v1 instanceof Cons) {
                      var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                      if (v2 instanceof Data_Ordering.EQ) {
                        $tco_var_v = v.value1;
                        $copy_v1 = v1.value1;
                        return;
                      }
                      ;
                      $tco_done = true;
                      return v2;
                    }
                    ;
                    throw new Error("Failed pattern match at Data.List.Types (line 61, column 5 - line 61, column 20): " + [v.constructor.name, v1.constructor.name]);
                  }
                  ;
                  while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v, $copy_v1);
                  }
                  ;
                  return $tco_result;
                };
              };
              return go(xs)(ys);
            };
          };
        },
        Eq10: function() {
          return eq1List;
        }
      };
      var ord1NonEmptyList = Data_NonEmpty.ord1NonEmpty(ord1List);
      var ordList = function(dictOrd) {
        return {
          compare: Data_Ord.compare1(ord1List)(dictOrd),
          Eq0: function() {
            return eqList(dictOrd.Eq0());
          }
        };
      };
      var ordNonEmptyList = function(dictOrd) {
        return Data_NonEmpty.ordNonEmpty(ord1List)(dictOrd);
      };
      var comonadNonEmptyList = {
        extract: function(v) {
          return v.value0;
        },
        Extend0: function() {
          return extendNonEmptyList;
        }
      };
      var applyList = {
        apply: function(v) {
          return function(v1) {
            if (v instanceof Nil) {
              return Nil.value;
            }
            ;
            if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
            }
            ;
            throw new Error("Failed pattern match at Data.List.Types (line 158, column 1 - line 160, column 48): " + [v.constructor.name, v1.constructor.name]);
          };
        },
        Functor0: function() {
          return functorList;
        }
      };
      var applyNonEmptyList = {
        apply: function(v) {
          return function(v1) {
            return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
          };
        },
        Functor0: function() {
          return functorNonEmptyList;
        }
      };
      var bindList = {
        bind: function(v) {
          return function(v1) {
            if (v instanceof Nil) {
              return Nil.value;
            }
            ;
            if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
            }
            ;
            throw new Error("Failed pattern match at Data.List.Types (line 165, column 1 - line 167, column 37): " + [v.constructor.name, v1.constructor.name]);
          };
        },
        Apply0: function() {
          return applyList;
        }
      };
      var bindNonEmptyList = {
        bind: function(v) {
          return function(f) {
            var v1 = f(v.value0);
            return new Data_NonEmpty.NonEmpty(v1.value0, Data_Semigroup.append(semigroupList)(v1.value1)(Control_Bind.bind(bindList)(v.value1)(function($235) {
              return toList(f($235));
            })));
          };
        },
        Apply0: function() {
          return applyNonEmptyList;
        }
      };
      var applicativeList = {
        pure: function(a) {
          return new Cons(a, Nil.value);
        },
        Apply0: function() {
          return applyList;
        }
      };
      var monadList = {
        Applicative0: function() {
          return applicativeList;
        },
        Bind1: function() {
          return bindList;
        }
      };
      var altNonEmptyList = {
        alt: Data_Semigroup.append(semigroupNonEmptyList),
        Functor0: function() {
          return functorNonEmptyList;
        }
      };
      var altList = {
        alt: Data_Semigroup.append(semigroupList),
        Functor0: function() {
          return functorList;
        }
      };
      var plusList = {
        empty: Nil.value,
        Alt0: function() {
          return altList;
        }
      };
      var alternativeList = {
        Applicative0: function() {
          return applicativeList;
        },
        Plus1: function() {
          return plusList;
        }
      };
      var monadPlusList = {
        Monad0: function() {
          return monadList;
        },
        Alternative1: function() {
          return alternativeList;
        }
      };
      var monadZeroList = {
        Monad0: function() {
          return monadList;
        },
        Alternative1: function() {
          return alternativeList;
        },
        MonadZeroIsDeprecated2: function() {
          return void 0;
        }
      };
      var applicativeNonEmptyList = {
        pure: function() {
          var $236 = Data_NonEmpty.singleton(plusList);
          return function($237) {
            return NonEmptyList($236($237));
          };
        }(),
        Apply0: function() {
          return applyNonEmptyList;
        }
      };
      var monadNonEmptyList = {
        Applicative0: function() {
          return applicativeNonEmptyList;
        },
        Bind1: function() {
          return bindNonEmptyList;
        }
      };
      var traversable1NonEmptyList = {
        traverse1: function(dictApply) {
          return function(f) {
            return function(v) {
              return Data_Functor.mapFlipped(dictApply.Functor0())(Data_Foldable.foldl(foldableList)(function(acc) {
                var $238 = Control_Apply.lift2(dictApply)(Data_Function.flip(nelCons))(acc);
                return function($239) {
                  return $238(f($239));
                };
              })(Data_Functor.map(dictApply.Functor0())(Control_Applicative.pure(applicativeNonEmptyList))(f(v.value0)))(v.value1))(function(v1) {
                return Data_Foldable.foldl(foldableList)(Data_Function.flip(nelCons))(Control_Applicative.pure(applicativeNonEmptyList)(v1.value0))(v1.value1);
              });
            };
          };
        },
        sequence1: function(dictApply) {
          return Data_Semigroup_Traversable.traverse1(traversable1NonEmptyList)(dictApply)(Control_Category.identity(Control_Category.categoryFn));
        },
        Foldable10: function() {
          return foldable1NonEmptyList;
        },
        Traversable1: function() {
          return traversableNonEmptyList;
        }
      };
      module.exports = {
        Nil,
        Cons,
        NonEmptyList,
        toList,
        nelCons,
        showList,
        eqList,
        eq1List,
        ordList,
        ord1List,
        semigroupList,
        monoidList,
        functorList,
        functorWithIndexList,
        foldableList,
        foldableWithIndexList,
        unfoldable1List,
        unfoldableList,
        traversableList,
        traversableWithIndexList,
        applyList,
        applicativeList,
        bindList,
        monadList,
        altList,
        plusList,
        alternativeList,
        monadZeroList,
        monadPlusList,
        extendList,
        newtypeNonEmptyList,
        eqNonEmptyList,
        ordNonEmptyList,
        eq1NonEmptyList,
        ord1NonEmptyList,
        showNonEmptyList,
        functorNonEmptyList,
        applyNonEmptyList,
        applicativeNonEmptyList,
        bindNonEmptyList,
        monadNonEmptyList,
        altNonEmptyList,
        extendNonEmptyList,
        comonadNonEmptyList,
        semigroupNonEmptyList,
        foldableNonEmptyList,
        traversableNonEmptyList,
        foldable1NonEmptyList,
        unfoldable1NonEmptyList,
        functorWithIndexNonEmptyList,
        foldableWithIndexNonEmptyList,
        traversableWithIndexNonEmptyList,
        traversable1NonEmptyList
      };
    }
  });

  // output/Data.List.Internal/index.js
  var require_Data_List2 = __commonJS({
    "output/Data.List.Internal/index.js"(exports, module) {
      "use strict";
      var Data_List_Types = require_Data_List();
      var Data_Ordering = require_Data9();
      var Leaf = function() {
        function Leaf2() {
        }
        ;
        Leaf2.value = new Leaf2();
        return Leaf2;
      }();
      var Two = function() {
        function Two2(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
        }
        ;
        Two2.create = function(value0) {
          return function(value1) {
            return function(value2) {
              return new Two2(value0, value1, value2);
            };
          };
        };
        return Two2;
      }();
      var Three = function() {
        function Three2(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
        }
        ;
        Three2.create = function(value0) {
          return function(value1) {
            return function(value2) {
              return function(value3) {
                return function(value4) {
                  return new Three2(value0, value1, value2, value3, value4);
                };
              };
            };
          };
        };
        return Three2;
      }();
      var TwoLeft = function() {
        function TwoLeft2(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
        }
        ;
        TwoLeft2.create = function(value0) {
          return function(value1) {
            return new TwoLeft2(value0, value1);
          };
        };
        return TwoLeft2;
      }();
      var TwoRight = function() {
        function TwoRight2(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
        }
        ;
        TwoRight2.create = function(value0) {
          return function(value1) {
            return new TwoRight2(value0, value1);
          };
        };
        return TwoRight2;
      }();
      var ThreeLeft = function() {
        function ThreeLeft2(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
        }
        ;
        ThreeLeft2.create = function(value0) {
          return function(value1) {
            return function(value2) {
              return function(value3) {
                return new ThreeLeft2(value0, value1, value2, value3);
              };
            };
          };
        };
        return ThreeLeft2;
      }();
      var ThreeMiddle = function() {
        function ThreeMiddle2(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
        }
        ;
        ThreeMiddle2.create = function(value0) {
          return function(value1) {
            return function(value2) {
              return function(value3) {
                return new ThreeMiddle2(value0, value1, value2, value3);
              };
            };
          };
        };
        return ThreeMiddle2;
      }();
      var ThreeRight = function() {
        function ThreeRight2(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
        }
        ;
        ThreeRight2.create = function(value0) {
          return function(value1) {
            return function(value2) {
              return function(value3) {
                return new ThreeRight2(value0, value1, value2, value3);
              };
            };
          };
        };
        return ThreeRight2;
      }();
      var KickUp = function() {
        function KickUp2(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
        }
        ;
        KickUp2.create = function(value0) {
          return function(value1) {
            return function(value2) {
              return new KickUp2(value0, value1, value2);
            };
          };
        };
        return KickUp2;
      }();
      var fromZipper = function($copy_v) {
        return function($copy_tree) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, tree) {
            if (v instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return tree;
            }
            ;
            if (v instanceof Data_List_Types.Cons) {
              if (v.value0 instanceof TwoLeft) {
                $tco_var_v = v.value1;
                $copy_tree = new Two(tree, v.value0.value0, v.value0.value1);
                return;
              }
              ;
              if (v.value0 instanceof TwoRight) {
                $tco_var_v = v.value1;
                $copy_tree = new Two(v.value0.value0, v.value0.value1, tree);
                return;
              }
              ;
              if (v.value0 instanceof ThreeLeft) {
                $tco_var_v = v.value1;
                $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3);
                return;
              }
              ;
              if (v.value0 instanceof ThreeMiddle) {
                $tco_var_v = v.value1;
                $copy_tree = new Three(v.value0.value0, v.value0.value1, tree, v.value0.value2, v.value0.value3);
                return;
              }
              ;
              if (v.value0 instanceof ThreeRight) {
                $tco_var_v = v.value1;
                $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, tree);
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.List.Internal (line 25, column 3 - line 30, column 76): " + [v.value0.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Data.List.Internal (line 22, column 1 - line 22, column 63): " + [v.constructor.name, tree.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_tree);
          }
          ;
          return $tco_result;
        };
      };
      var insertAndLookupBy = function(comp) {
        return function(k) {
          return function(orig) {
            var up = function($copy_v) {
              return function($copy_v1) {
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, v1) {
                  if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return new Two(v1.value0, v1.value1, v1.value2);
                  }
                  ;
                  if (v instanceof Data_List_Types.Cons) {
                    if (v.value0 instanceof TwoLeft) {
                      $tco_done = true;
                      return fromZipper(v.value1)(new Three(v1.value0, v1.value1, v1.value2, v.value0.value0, v.value0.value1));
                    }
                    ;
                    if (v.value0 instanceof TwoRight) {
                      $tco_done = true;
                      return fromZipper(v.value1)(new Three(v.value0.value0, v.value0.value1, v1.value0, v1.value1, v1.value2));
                    }
                    ;
                    if (v.value0 instanceof ThreeLeft) {
                      $tco_var_v = v.value1;
                      $copy_v1 = new KickUp(new Two(v1.value0, v1.value1, v1.value2), v.value0.value0, new Two(v.value0.value1, v.value0.value2, v.value0.value3));
                      return;
                    }
                    ;
                    if (v.value0 instanceof ThreeMiddle) {
                      $tco_var_v = v.value1;
                      $copy_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v1.value0), v1.value1, new Two(v1.value2, v.value0.value2, v.value0.value3));
                      return;
                    }
                    ;
                    if (v.value0 instanceof ThreeRight) {
                      $tco_var_v = v.value1;
                      $copy_v1 = new KickUp(new Two(v.value0.value0, v.value0.value1, v.value0.value2), v.value0.value3, new Two(v1.value0, v1.value1, v1.value2));
                      return;
                    }
                    ;
                    throw new Error("Failed pattern match at Data.List.Internal (line 58, column 5 - line 63, column 90): " + [v.value0.constructor.name, v1.constructor.name]);
                  }
                  ;
                  throw new Error("Failed pattern match at Data.List.Internal (line 55, column 3 - line 55, column 50): " + [v.constructor.name, v1.constructor.name]);
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
                }
                ;
                return $tco_result;
              };
            };
            var down = function($copy_ctx) {
              return function($copy_v) {
                var $tco_var_ctx = $copy_ctx;
                var $tco_done1 = false;
                var $tco_result;
                function $tco_loop(ctx, v) {
                  if (v instanceof Leaf) {
                    $tco_done1 = true;
                    return {
                      found: false,
                      result: up(ctx)(new KickUp(Leaf.value, k, Leaf.value))
                    };
                  }
                  ;
                  if (v instanceof Two) {
                    var v1 = comp(k)(v.value1);
                    if (v1 instanceof Data_Ordering.EQ) {
                      $tco_done1 = true;
                      return {
                        found: true,
                        result: orig
                      };
                    }
                    ;
                    if (v1 instanceof Data_Ordering.LT) {
                      $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v.value1, v.value2), ctx);
                      $copy_v = v.value0;
                      return;
                    }
                    ;
                    $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v.value0, v.value1), ctx);
                    $copy_v = v.value2;
                    return;
                  }
                  ;
                  if (v instanceof Three) {
                    var v1 = comp(k)(v.value1);
                    if (v1 instanceof Data_Ordering.EQ) {
                      $tco_done1 = true;
                      return {
                        found: true,
                        result: orig
                      };
                    }
                    ;
                    var v2 = comp(k)(v.value3);
                    if (v2 instanceof Data_Ordering.EQ) {
                      $tco_done1 = true;
                      return {
                        found: true,
                        result: orig
                      };
                    }
                    ;
                    if (v1 instanceof Data_Ordering.LT) {
                      $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v.value1, v.value2, v.value3, v.value4), ctx);
                      $copy_v = v.value0;
                      return;
                    }
                    ;
                    if (v1 instanceof Data_Ordering.GT && v2 instanceof Data_Ordering.LT) {
                      $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v.value0, v.value1, v.value3, v.value4), ctx);
                      $copy_v = v.value2;
                      return;
                    }
                    ;
                    $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v.value0, v.value1, v.value2, v.value3), ctx);
                    $copy_v = v.value4;
                    return;
                  }
                  ;
                  throw new Error("Failed pattern match at Data.List.Internal (line 38, column 3 - line 38, column 81): " + [ctx.constructor.name, v.constructor.name]);
                }
                ;
                while (!$tco_done1) {
                  $tco_result = $tco_loop($tco_var_ctx, $copy_v);
                }
                ;
                return $tco_result;
              };
            };
            return down(Data_List_Types.Nil.value)(orig);
          };
        };
      };
      var emptySet = Leaf.value;
      module.exports = {
        emptySet,
        insertAndLookupBy
      };
    }
  });

  // output/Data.List/index.js
  var require_Data36 = __commonJS({
    "output/Data.List/index.js"(exports, module) {
      "use strict";
      var Control_Alt = require_Control6();
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Control_Bind = require_Control5();
      var Control_Category = require_Control2();
      var Control_Lazy = require_Control8();
      var Control_Monad_Rec_Class = require_Control_Monad_Rec();
      var Data_Bifunctor = require_Data25();
      var Data_Boolean = require_Data();
      var Data_Eq = require_Data8();
      var Data_Foldable = require_Data27();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Data_FunctorWithIndex = require_Data29();
      var Data_HeytingAlgebra = require_Data21();
      var Data_List_Internal = require_Data_List2();
      var Data_List_Types = require_Data_List();
      var Data_Maybe = require_Data15();
      var Data_NonEmpty = require_Data35();
      var Data_Ord = require_Data12();
      var Data_Ordering = require_Data9();
      var Data_Semigroup = require_Data7();
      var Data_Show = require_Data14();
      var Data_Traversable = require_Data31();
      var Data_Tuple = require_Data22();
      var Data_Unfoldable = require_Data34();
      var Data_Unit = require_Data3();
      var Pattern = function(x) {
        return x;
      };
      var updateAt = function(v) {
        return function(v1) {
          return function(v2) {
            if (v === 0 && v2 instanceof Data_List_Types.Cons) {
              return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2.value1));
            }
            ;
            if (v2 instanceof Data_List_Types.Cons) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function(v3) {
                return new Data_List_Types.Cons(v2.value0, v3);
              })(updateAt(v - 1 | 0)(v1)(v2.value1));
            }
            ;
            return Data_Maybe.Nothing.value;
          };
        };
      };
      var unzip = Data_Foldable.foldr(Data_List_Types.foldableList)(function(v) {
        return function(v1) {
          return new Data_Tuple.Tuple(new Data_List_Types.Cons(v.value0, v1.value0), new Data_List_Types.Cons(v.value1, v1.value1));
        };
      })(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_List_Types.Nil.value));
      var uncons = function(v) {
        if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
        }
        ;
        if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
            head: v.value0,
            tail: v.value1
          });
        }
        ;
        throw new Error("Failed pattern match at Data.List (line 263, column 1 - line 263, column 66): " + [v.constructor.name]);
      };
      var toUnfoldable = function(dictUnfoldable) {
        return Data_Unfoldable.unfoldr(dictUnfoldable)(function(xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function(rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
        });
      };
      var tail = function(v) {
        if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
        }
        ;
        if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
        }
        ;
        throw new Error("Failed pattern match at Data.List (line 249, column 1 - line 249, column 43): " + [v.constructor.name]);
      };
      var stripPrefix = function(dictEq) {
        return function(v) {
          return function(s) {
            var go = function(prefix) {
              return function(input) {
                if (prefix instanceof Data_List_Types.Cons && (input instanceof Data_List_Types.Cons && Data_Eq.eq(dictEq)(prefix.value0)(input.value0))) {
                  return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Loop({
                    a: prefix.value1,
                    b: input.value1
                  }));
                }
                ;
                if (prefix instanceof Data_List_Types.Nil) {
                  return Data_Maybe.Just.create(new Control_Monad_Rec_Class.Done(input));
                }
                ;
                return Data_Maybe.Nothing.value;
              };
            };
            return Control_Monad_Rec_Class.tailRecM2(Control_Monad_Rec_Class.monadRecMaybe)(go)(v)(s);
          };
        };
      };
      var span = function(v) {
        return function(v1) {
          if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
            var v2 = span(v)(v1.value1);
            return {
              init: new Data_List_Types.Cons(v1.value0, v2.init),
              rest: v2.rest
            };
          }
          ;
          return {
            init: Data_List_Types.Nil.value,
            rest: v1
          };
        };
      };
      var snoc = function(xs) {
        return function(x) {
          return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_List_Types.Cons.create)(new Data_List_Types.Cons(x, Data_List_Types.Nil.value))(xs);
        };
      };
      var singleton = function(a) {
        return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
      };
      var sortBy = function(cmp) {
        var merge = function(v) {
          return function(v1) {
            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
              if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
              }
              ;
              if (Data_Boolean.otherwise) {
                return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
              }
              ;
            }
            ;
            if (v instanceof Data_List_Types.Nil) {
              return v1;
            }
            ;
            if (v1 instanceof Data_List_Types.Nil) {
              return v;
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 477, column 3 - line 477, column 38): " + [v.constructor.name, v1.constructor.name]);
          };
        };
        var mergePairs = function(v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
            return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
          }
          ;
          return v;
        };
        var mergeAll = function($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return v.value0;
            }
            ;
            $copy_v = mergePairs(v);
            return;
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
          }
          ;
          return $tco_result;
        };
        var sequences = function(v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
            if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
              return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
            }
            ;
            if (Data_Boolean.otherwise) {
              return ascending(v.value1.value0)(function(v1) {
                return new Data_List_Types.Cons(v.value0, v1);
              })(v.value1.value1);
            }
            ;
          }
          ;
          return singleton(v);
        };
        var descending = function($copy_a) {
          return function($copy_as) {
            return function($copy_v) {
              var $tco_var_a = $copy_a;
              var $tco_var_as = $copy_as;
              var $tco_done1 = false;
              var $tco_result;
              function $tco_loop(a, as, v) {
                if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                  $tco_var_a = v.value0;
                  $tco_var_as = new Data_List_Types.Cons(a, as);
                  $copy_v = v.value1;
                  return;
                }
                ;
                $tco_done1 = true;
                return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
              }
              ;
              while (!$tco_done1) {
                $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
              }
              ;
              return $tco_result;
            };
          };
        };
        var ascending = function($copy_a) {
          return function($copy_as) {
            return function($copy_v) {
              var $tco_var_a = $copy_a;
              var $tco_var_as = $copy_as;
              var $tco_done2 = false;
              var $tco_result;
              function $tco_loop(a, as, v) {
                if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                  $tco_var_a = v.value0;
                  $tco_var_as = function(ys) {
                    return as(new Data_List_Types.Cons(a, ys));
                  };
                  $copy_v = v.value1;
                  return;
                }
                ;
                $tco_done2 = true;
                return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
              }
              ;
              while (!$tco_done2) {
                $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
              }
              ;
              return $tco_result;
            };
          };
        };
        return function($345) {
          return mergeAll(sequences($345));
        };
      };
      var sort = function(dictOrd) {
        return function(xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
        };
      };
      var showPattern = function(dictShow) {
        return {
          show: function(v) {
            return "(Pattern " + (Data_Show.show(Data_List_Types.showList(dictShow))(v) + ")");
          }
        };
      };
      var reverse = function() {
        var go = function($copy_acc) {
          return function($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
              if (v instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return acc;
              }
              ;
              if (v instanceof Data_List_Types.Cons) {
                $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                $copy_v = v.value1;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.List (line 372, column 3 - line 372, column 19): " + [acc.constructor.name, v.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_acc, $copy_v);
            }
            ;
            return $tco_result;
          };
        };
        return go(Data_List_Types.Nil.value);
      }();
      var take = function() {
        var go = function($copy_acc) {
          return function($copy_v) {
            return function($copy_v1) {
              var $tco_var_acc = $copy_acc;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v, v1) {
                if (v < 1) {
                  $tco_done = true;
                  return reverse(acc);
                }
                ;
                if (v1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return reverse(acc);
                }
                ;
                if (v1 instanceof Data_List_Types.Cons) {
                  $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                  $tco_var_v = v - 1 | 0;
                  $copy_v1 = v1.value1;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.List (line 524, column 3 - line 524, column 35): " + [acc.constructor.name, v.constructor.name, v1.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $tco_var_v, $copy_v1);
              }
              ;
              return $tco_result;
            };
          };
        };
        return go(Data_List_Types.Nil.value);
      }();
      var takeWhile = function(p) {
        var go = function($copy_acc) {
          return function($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
              if (v instanceof Data_List_Types.Cons && p(v.value0)) {
                $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                $copy_v = v.value1;
                return;
              }
              ;
              $tco_done = true;
              return reverse(acc);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_acc, $copy_v);
            }
            ;
            return $tco_result;
          };
        };
        return go(Data_List_Types.Nil.value);
      };
      var unsnoc = function(lst) {
        var go = function($copy_v) {
          return function($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
              if (v instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return Data_Maybe.Nothing.value;
              }
              ;
              if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return new Data_Maybe.Just({
                  revInit: v1,
                  last: v.value0
                });
              }
              ;
              if (v instanceof Data_List_Types.Cons) {
                $tco_var_v = v.value1;
                $copy_v1 = new Data_List_Types.Cons(v.value0, v1);
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.List (line 274, column 3 - line 274, column 21): " + [v.constructor.name, v1.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
            }
            ;
            return $tco_result;
          };
        };
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(h) {
          return {
            init: reverse(h.revInit),
            last: h.last
          };
        })(go(lst)(Data_List_Types.Nil.value));
      };
      var zipWith = function(f) {
        return function(xs) {
          return function(ys) {
            var go = function($copy_v) {
              return function($copy_v1) {
                return function($copy_acc) {
                  var $tco_var_v = $copy_v;
                  var $tco_var_v1 = $copy_v1;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(v, v1, acc) {
                    if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                    }
                    ;
                    if (v1 instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                    }
                    ;
                    if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                      $tco_var_v = v.value1;
                      $tco_var_v1 = v1.value1;
                      $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                      return;
                    }
                    ;
                    throw new Error("Failed pattern match at Data.List (line 795, column 3 - line 795, column 21): " + [v.constructor.name, v1.constructor.name, acc.constructor.name]);
                  }
                  ;
                  while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                  }
                  ;
                  return $tco_result;
                };
              };
            };
            return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
          };
        };
      };
      var zip = zipWith(Data_Tuple.Tuple.create);
      var zipWithA = function(dictApplicative) {
        return function(f) {
          return function(xs) {
            return function(ys) {
              return Data_Traversable.sequence(Data_List_Types.traversableList)(dictApplicative)(zipWith(f)(xs)(ys));
            };
          };
        };
      };
      var range = function(start) {
        return function(end) {
          if (start === end) {
            return singleton(start);
          }
          ;
          if (Data_Boolean.otherwise) {
            var go = function($copy_s) {
              return function($copy_e) {
                return function($copy_step) {
                  return function($copy_rest) {
                    var $tco_var_s = $copy_s;
                    var $tco_var_e = $copy_e;
                    var $tco_var_step = $copy_step;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(s, e, step, rest) {
                      if (s === e) {
                        $tco_done = true;
                        return new Data_List_Types.Cons(s, rest);
                      }
                      ;
                      if (Data_Boolean.otherwise) {
                        $tco_var_s = s + step | 0;
                        $tco_var_e = e;
                        $tco_var_step = step;
                        $copy_rest = new Data_List_Types.Cons(s, rest);
                        return;
                      }
                      ;
                      throw new Error("Failed pattern match at Data.List (line 152, column 3 - line 153, column 65): " + [s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name]);
                    }
                    ;
                    while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                    }
                    ;
                    return $tco_result;
                  };
                };
              };
            };
            return go(end)(start)(function() {
              var $226 = start > end;
              if ($226) {
                return 1;
              }
              ;
              return -1 | 0;
            }())(Data_List_Types.Nil.value);
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 148, column 1 - line 148, column 32): " + [start.constructor.name, end.constructor.name]);
        };
      };
      var partition = function(p) {
        return function(xs) {
          var select = function(x) {
            return function(v) {
              var $229 = p(x);
              if ($229) {
                return {
                  no: v.no,
                  yes: new Data_List_Types.Cons(x, v.yes)
                };
              }
              ;
              return {
                no: new Data_List_Types.Cons(x, v.no),
                yes: v.yes
              };
            };
          };
          return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
            no: Data_List_Types.Nil.value,
            yes: Data_List_Types.Nil.value
          })(xs);
        };
      };
      var $$null = function(v) {
        if (v instanceof Data_List_Types.Nil) {
          return true;
        }
        ;
        return false;
      };
      var nubBy = function(p) {
        var go = function($copy_v) {
          return function($copy_acc) {
            return function($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, acc, v1) {
                if (v1 instanceof Data_List_Types.Nil) {
                  $tco_done = true;
                  return acc;
                }
                ;
                if (v1 instanceof Data_List_Types.Cons) {
                  var v2 = Data_List_Internal.insertAndLookupBy(p)(v1.value0)(v);
                  if (v2.found) {
                    $tco_var_v = v2.result;
                    $tco_var_acc = acc;
                    $copy_v1 = v1.value1;
                    return;
                  }
                  ;
                  $tco_var_v = v2.result;
                  $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                  $copy_v1 = v1.value1;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.List (line 689, column 5 - line 689, column 23): " + [v.constructor.name, acc.constructor.name, v1.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $tco_var_acc, $copy_v1);
              }
              ;
              return $tco_result;
            };
          };
        };
        var $346 = go(Data_List_Internal.emptySet)(Data_List_Types.Nil.value);
        return function($347) {
          return reverse($346($347));
        };
      };
      var nub = function(dictOrd) {
        return nubBy(Data_Ord.compare(dictOrd));
      };
      var newtypePattern = {
        Coercible0: function() {
          return void 0;
        }
      };
      var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexList);
      var mapMaybe = function(f) {
        var go = function($copy_acc) {
          return function($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
              if (v instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return reverse(acc);
              }
              ;
              if (v instanceof Data_List_Types.Cons) {
                var v1 = f(v.value0);
                if (v1 instanceof Data_Maybe.Nothing) {
                  $tco_var_acc = acc;
                  $copy_v = v.value1;
                  return;
                }
                ;
                if (v1 instanceof Data_Maybe.Just) {
                  $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                  $copy_v = v.value1;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.List (line 423, column 5 - line 425, column 32): " + [v1.constructor.name]);
              }
              ;
              throw new Error("Failed pattern match at Data.List (line 421, column 3 - line 421, column 27): " + [acc.constructor.name, v.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_acc, $copy_v);
            }
            ;
            return $tco_result;
          };
        };
        return go(Data_List_Types.Nil.value);
      };
      var manyRec = function(dictMonadRec) {
        return function(dictAlternative) {
          return function(p) {
            var go = function(acc) {
              return Control_Bind.bind(dictMonadRec.Monad0().Bind1())(Control_Alt.alt(dictAlternative.Plus1().Alt0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Control_Monad_Rec_Class.Loop.create)(p))(Control_Applicative.pure(dictAlternative.Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit))))(function(aa) {
                return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Bifunctor.bimap(Control_Monad_Rec_Class.bifunctorStep)(function(v) {
                  return new Data_List_Types.Cons(v, acc);
                })(function(v) {
                  return reverse(acc);
                })(aa));
              });
            };
            return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go)(Data_List_Types.Nil.value);
          };
        };
      };
      var someRec = function(dictMonadRec) {
        return function(dictAlternative) {
          return function(v) {
            return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Data_List_Types.Cons.create)(v))(manyRec(dictMonadRec)(dictAlternative)(v));
          };
        };
      };
      var some = function(dictAlternative) {
        return function(dictLazy) {
          return function(v) {
            return Control_Apply.apply(dictAlternative.Applicative0().Apply0())(Data_Functor.map(dictAlternative.Plus1().Alt0().Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function(v1) {
              return many(dictAlternative)(dictLazy)(v);
            }));
          };
        };
      };
      var many = function(dictAlternative) {
        return function(dictLazy) {
          return function(v) {
            return Control_Alt.alt(dictAlternative.Plus1().Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
          };
        };
      };
      var length = Data_Foldable.foldl(Data_List_Types.foldableList)(function(acc) {
        return function(v) {
          return acc + 1 | 0;
        };
      })(0);
      var last = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
          if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
            $tco_done = true;
            return new Data_Maybe.Just(v.value0);
          }
          ;
          if (v instanceof Data_List_Types.Cons) {
            $copy_v = v.value1;
            return;
          }
          ;
          $tco_done = true;
          return Data_Maybe.Nothing.value;
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      var insertBy = function(v) {
        return function(x) {
          return function(v1) {
            if (v1 instanceof Data_List_Types.Nil) {
              return singleton(x);
            }
            ;
            if (v1 instanceof Data_List_Types.Cons) {
              var v2 = v(x)(v1.value0);
              if (v2 instanceof Data_Ordering.GT) {
                return new Data_List_Types.Cons(v1.value0, insertBy(v)(x)(v1.value1));
              }
              ;
              return new Data_List_Types.Cons(x, v1);
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 220, column 1 - line 220, column 68): " + [v.constructor.name, x.constructor.name, v1.constructor.name]);
          };
        };
      };
      var insertAt = function(v) {
        return function(v1) {
          return function(v2) {
            if (v === 0) {
              return new Data_Maybe.Just(new Data_List_Types.Cons(v1, v2));
            }
            ;
            if (v2 instanceof Data_List_Types.Cons) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function(v3) {
                return new Data_List_Types.Cons(v2.value0, v3);
              })(insertAt(v - 1 | 0)(v1)(v2.value1));
            }
            ;
            return Data_Maybe.Nothing.value;
          };
        };
      };
      var insert = function(dictOrd) {
        return insertBy(Data_Ord.compare(dictOrd));
      };
      var init = function(lst) {
        return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
          return v.init;
        })(unsnoc(lst));
      };
      var index = function($copy_v) {
        return function($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
            if (v instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
            }
            ;
            if (v instanceof Data_List_Types.Cons && v1 === 0) {
              $tco_done = true;
              return new Data_Maybe.Just(v.value0);
            }
            ;
            if (v instanceof Data_List_Types.Cons) {
              $tco_var_v = v.value1;
              $copy_v1 = v1 - 1 | 0;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 285, column 1 - line 285, column 44): " + [v.constructor.name, v1.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
      var head = function(v) {
        if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
        }
        ;
        if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.List (line 234, column 1 - line 234, column 22): " + [v.constructor.name]);
      };
      var transpose = function(v) {
        if (v instanceof Data_List_Types.Nil) {
          return Data_List_Types.Nil.value;
        }
        ;
        if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Nil) {
          return transpose(v.value1);
        }
        ;
        if (v instanceof Data_List_Types.Cons && v.value0 instanceof Data_List_Types.Cons) {
          return new Data_List_Types.Cons(new Data_List_Types.Cons(v.value0.value0, mapMaybe(head)(v.value1)), transpose(new Data_List_Types.Cons(v.value0.value1, mapMaybe(tail)(v.value1))));
        }
        ;
        throw new Error("Failed pattern match at Data.List (line 829, column 1 - line 829, column 54): " + [v.constructor.name]);
      };
      var groupBy = function(v) {
        return function(v1) {
          if (v1 instanceof Data_List_Types.Nil) {
            return Data_List_Types.Nil.value;
          }
          ;
          if (v1 instanceof Data_List_Types.Cons) {
            var v2 = span(v(v1.value0))(v1.value1);
            return new Data_List_Types.Cons(new Data_NonEmpty.NonEmpty(v1.value0, v2.init), groupBy(v)(v2.rest));
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 624, column 1 - line 624, column 80): " + [v.constructor.name, v1.constructor.name]);
        };
      };
      var groupAllBy = function(dictOrd) {
        return function(p) {
          var $348 = groupBy(p);
          var $349 = sort(dictOrd);
          return function($350) {
            return $348($349($350));
          };
        };
      };
      var group = function(dictEq) {
        return groupBy(Data_Eq.eq(dictEq));
      };
      var groupAll = function(dictOrd) {
        var $351 = group(dictOrd.Eq0());
        var $352 = sort(dictOrd);
        return function($353) {
          return $351($352($353));
        };
      };
      var group$prime = function(dictWarn) {
        return function(dictOrd) {
          return groupAll(dictOrd);
        };
      };
      var fromFoldable = function(dictFoldable) {
        return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
      };
      var foldM = function(dictMonad) {
        return function(v) {
          return function(b) {
            return function(v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                return Control_Applicative.pure(dictMonad.Applicative0())(b);
              }
              ;
              if (v1 instanceof Data_List_Types.Cons) {
                return Control_Bind.bind(dictMonad.Bind1())(v(b)(v1.value0))(function(b$prime) {
                  return foldM(dictMonad)(v)(b$prime)(v1.value1);
                });
              }
              ;
              throw new Error("Failed pattern match at Data.List (line 840, column 1 - line 840, column 72): " + [v.constructor.name, b.constructor.name, v1.constructor.name]);
            };
          };
        };
      };
      var findIndex = function(fn) {
        var go = function($copy_v) {
          return function($copy_v1) {
            var $tco_var_v = $copy_v;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v, v1) {
              if (v1 instanceof Data_List_Types.Cons) {
                if (fn(v1.value0)) {
                  $tco_done = true;
                  return new Data_Maybe.Just(v);
                }
                ;
                if (Data_Boolean.otherwise) {
                  $tco_var_v = v + 1 | 0;
                  $copy_v1 = v1.value1;
                  return;
                }
                ;
              }
              ;
              if (v1 instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return Data_Maybe.Nothing.value;
              }
              ;
              throw new Error("Failed pattern match at Data.List (line 305, column 3 - line 305, column 35): " + [v.constructor.name, v1.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v, $copy_v1);
            }
            ;
            return $tco_result;
          };
        };
        return go(0);
      };
      var findLastIndex = function(fn) {
        return function(xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function(v) {
            return (length(xs) - 1 | 0) - v | 0;
          })(findIndex(fn)(reverse(xs)));
        };
      };
      var filterM = function(dictMonad) {
        return function(v) {
          return function(v1) {
            if (v1 instanceof Data_List_Types.Nil) {
              return Control_Applicative.pure(dictMonad.Applicative0())(Data_List_Types.Nil.value);
            }
            ;
            if (v1 instanceof Data_List_Types.Cons) {
              return Control_Bind.bind(dictMonad.Bind1())(v(v1.value0))(function(b) {
                return Control_Bind.bind(dictMonad.Bind1())(filterM(dictMonad)(v)(v1.value1))(function(xs$prime) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(function() {
                    if (b) {
                      return new Data_List_Types.Cons(v1.value0, xs$prime);
                    }
                    ;
                    return xs$prime;
                  }());
                });
              });
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 407, column 1 - line 407, column 75): " + [v.constructor.name, v1.constructor.name]);
          };
        };
      };
      var filter = function(p) {
        var go = function($copy_acc) {
          return function($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
              if (v instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return reverse(acc);
              }
              ;
              if (v instanceof Data_List_Types.Cons) {
                if (p(v.value0)) {
                  $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                  $copy_v = v.value1;
                  return;
                }
                ;
                if (Data_Boolean.otherwise) {
                  $tco_var_acc = acc;
                  $copy_v = v.value1;
                  return;
                }
                ;
              }
              ;
              throw new Error("Failed pattern match at Data.List (line 394, column 3 - line 394, column 27): " + [acc.constructor.name, v.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_acc, $copy_v);
            }
            ;
            return $tco_result;
          };
        };
        return go(Data_List_Types.Nil.value);
      };
      var intersectBy = function(v) {
        return function(v1) {
          return function(v2) {
            if (v1 instanceof Data_List_Types.Nil) {
              return Data_List_Types.Nil.value;
            }
            ;
            if (v2 instanceof Data_List_Types.Nil) {
              return Data_List_Types.Nil.value;
            }
            ;
            return filter(function(x) {
              return Data_Foldable.any(Data_List_Types.foldableList)(Data_HeytingAlgebra.heytingAlgebraBoolean)(v(x))(v2);
            })(v1);
          };
        };
      };
      var intersect = function(dictEq) {
        return intersectBy(Data_Eq.eq(dictEq));
      };
      var nubByEq = function(v) {
        return function(v1) {
          if (v1 instanceof Data_List_Types.Nil) {
            return Data_List_Types.Nil.value;
          }
          ;
          if (v1 instanceof Data_List_Types.Cons) {
            return new Data_List_Types.Cons(v1.value0, nubByEq(v)(filter(function(y) {
              return !v(v1.value0)(y);
            })(v1.value1)));
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 721, column 1 - line 721, column 61): " + [v.constructor.name, v1.constructor.name]);
        };
      };
      var nubEq = function(dictEq) {
        return nubByEq(Data_Eq.eq(dictEq));
      };
      var eqPattern = function(dictEq) {
        return {
          eq: function(x) {
            return function(y) {
              return Data_Eq.eq(Data_List_Types.eqList(dictEq))(x)(y);
            };
          }
        };
      };
      var ordPattern = function(dictOrd) {
        return {
          compare: function(x) {
            return function(y) {
              return Data_Ord.compare(Data_List_Types.ordList(dictOrd))(x)(y);
            };
          },
          Eq0: function() {
            return eqPattern(dictOrd.Eq0());
          }
        };
      };
      var elemLastIndex = function(dictEq) {
        return function(x) {
          return findLastIndex(function(v) {
            return Data_Eq.eq(dictEq)(v)(x);
          });
        };
      };
      var elemIndex = function(dictEq) {
        return function(x) {
          return findIndex(function(v) {
            return Data_Eq.eq(dictEq)(v)(x);
          });
        };
      };
      var dropWhile = function(p) {
        var go = function($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons && p(v.value0)) {
              $copy_v = v.value1;
              return;
            }
            ;
            $tco_done = true;
            return v;
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
          }
          ;
          return $tco_result;
        };
        return go;
      };
      var dropEnd = function(n) {
        return function(xs) {
          return take(length(xs) - n | 0)(xs);
        };
      };
      var drop = function($copy_v) {
        return function($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
            if (v < 1) {
              $tco_done = true;
              return v1;
            }
            ;
            if (v1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_List_Types.Nil.value;
            }
            ;
            if (v1 instanceof Data_List_Types.Cons) {
              $tco_var_v = v - 1 | 0;
              $copy_v1 = v1.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 547, column 1 - line 547, column 42): " + [v.constructor.name, v1.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
      var slice = function(start) {
        return function(end) {
          return function(xs) {
            return take(end - start | 0)(drop(start)(xs));
          };
        };
      };
      var takeEnd = function(n) {
        return function(xs) {
          return drop(length(xs) - n | 0)(xs);
        };
      };
      var deleteBy = function(v) {
        return function(v1) {
          return function(v2) {
            if (v2 instanceof Data_List_Types.Nil) {
              return Data_List_Types.Nil.value;
            }
            ;
            if (v2 instanceof Data_List_Types.Cons && v(v1)(v2.value0)) {
              return v2.value1;
            }
            ;
            if (v2 instanceof Data_List_Types.Cons) {
              return new Data_List_Types.Cons(v2.value0, deleteBy(v)(v1)(v2.value1));
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 748, column 1 - line 748, column 67): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
          };
        };
      };
      var unionBy = function(eq) {
        return function(xs) {
          return function(ys) {
            return Data_Semigroup.append(Data_List_Types.semigroupList)(xs)(Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
          };
        };
      };
      var union = function(dictEq) {
        return unionBy(Data_Eq.eq(dictEq));
      };
      var deleteAt = function(v) {
        return function(v1) {
          if (v === 0 && v1 instanceof Data_List_Types.Cons) {
            return new Data_Maybe.Just(v1.value1);
          }
          ;
          if (v1 instanceof Data_List_Types.Cons) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function(v2) {
              return new Data_List_Types.Cons(v1.value0, v2);
            })(deleteAt(v - 1 | 0)(v1.value1));
          }
          ;
          return Data_Maybe.Nothing.value;
        };
      };
      var $$delete = function(dictEq) {
        return deleteBy(Data_Eq.eq(dictEq));
      };
      var difference = function(dictEq) {
        return Data_Foldable.foldl(Data_List_Types.foldableList)(Data_Function.flip($$delete(dictEq)));
      };
      var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindList));
      var concat = function(v) {
        return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
      };
      var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
      var alterAt = function(v) {
        return function(v1) {
          return function(v2) {
            if (v === 0 && v2 instanceof Data_List_Types.Cons) {
              return Data_Maybe.Just.create(function() {
                var v3 = v1(v2.value0);
                if (v3 instanceof Data_Maybe.Nothing) {
                  return v2.value1;
                }
                ;
                if (v3 instanceof Data_Maybe.Just) {
                  return new Data_List_Types.Cons(v3.value0, v2.value1);
                }
                ;
                throw new Error("Failed pattern match at Data.List (line 356, column 3 - line 358, column 23): " + [v3.constructor.name]);
              }());
            }
            ;
            if (v2 instanceof Data_List_Types.Cons) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function(v3) {
                return new Data_List_Types.Cons(v2.value0, v3);
              })(alterAt(v - 1 | 0)(v1)(v2.value1));
            }
            ;
            return Data_Maybe.Nothing.value;
          };
        };
      };
      var modifyAt = function(n) {
        return function(f) {
          return alterAt(n)(function($354) {
            return Data_Maybe.Just.create(f($354));
          });
        };
      };
      module.exports = {
        toUnfoldable,
        fromFoldable,
        singleton,
        range,
        some,
        someRec,
        many,
        manyRec,
        "null": $$null,
        length,
        snoc,
        insert,
        insertBy,
        head,
        last,
        tail,
        init,
        uncons,
        unsnoc,
        index,
        elemIndex,
        elemLastIndex,
        findIndex,
        findLastIndex,
        insertAt,
        deleteAt,
        updateAt,
        modifyAt,
        alterAt,
        reverse,
        concat,
        concatMap,
        filter,
        filterM,
        mapMaybe,
        catMaybes,
        mapWithIndex,
        sort,
        sortBy,
        Pattern,
        stripPrefix,
        slice,
        take,
        takeEnd,
        takeWhile,
        drop,
        dropEnd,
        dropWhile,
        span,
        group,
        groupAll,
        "group'": group$prime,
        groupBy,
        groupAllBy,
        partition,
        nub,
        nubBy,
        nubEq,
        nubByEq,
        union,
        unionBy,
        "delete": $$delete,
        deleteBy,
        difference,
        intersect,
        intersectBy,
        zipWith,
        zipWithA,
        zip,
        unzip,
        transpose,
        foldM,
        eqPattern,
        ordPattern,
        newtypePattern,
        showPattern,
        all: Data_Foldable.all,
        any: Data_Foldable.any,
        elem: Data_Foldable.elem,
        find: Data_Foldable.find,
        findMap: Data_Foldable.findMap,
        fold: Data_Foldable.fold,
        foldMap: Data_Foldable.foldMap,
        foldl: Data_Foldable.foldl,
        foldr: Data_Foldable.foldr,
        intercalate: Data_Foldable.intercalate,
        notElem: Data_Foldable.notElem,
        Cons: Data_List_Types.Cons,
        Nil: Data_List_Types.Nil,
        scanl: Data_Traversable.scanl,
        scanr: Data_Traversable.scanr
      };
    }
  });

  // output/Partial.Unsafe/foreign.js
  var require_foreign34 = __commonJS({
    "output/Partial.Unsafe/foreign.js"(exports) {
      "use strict";
      exports._unsafePartial = function(f) {
        return f();
      };
    }
  });

  // output/Partial/foreign.js
  var require_foreign35 = __commonJS({
    "output/Partial/foreign.js"(exports) {
      "use strict";
      exports._crashWith = function(msg) {
        throw new Error(msg);
      };
    }
  });

  // output/Partial/index.js
  var require_Partial = __commonJS({
    "output/Partial/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign35();
      var crashWith = function(dictPartial) {
        return $foreign["_crashWith"];
      };
      var crash = function(dictPartial) {
        return crashWith()("Partial.crash: partial function");
      };
      module.exports = {
        crash,
        crashWith
      };
    }
  });

  // output/Partial.Unsafe/index.js
  var require_Partial2 = __commonJS({
    "output/Partial.Unsafe/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign34();
      var Partial = require_Partial();
      var unsafePartial = $foreign["_unsafePartial"];
      var unsafeCrashWith = function(msg) {
        return unsafePartial(function(dictPartial) {
          return Partial.crashWith()(msg);
        });
      };
      module.exports = {
        unsafePartial,
        unsafeCrashWith
      };
    }
  });

  // output/Data.List.NonEmpty/index.js
  var require_Data_List3 = __commonJS({
    "output/Data.List.NonEmpty/index.js"(exports, module) {
      "use strict";
      var Control_Bind = require_Control5();
      var Control_Category = require_Control2();
      var Data_Boolean = require_Data();
      var Data_Eq = require_Data8();
      var Data_Foldable = require_Data27();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Data_FunctorWithIndex = require_Data29();
      var Data_List = require_Data36();
      var Data_List_Types = require_Data_List();
      var Data_Maybe = require_Data15();
      var Data_NonEmpty = require_Data35();
      var Data_Ord = require_Data12();
      var Data_Semigroup = require_Data7();
      var Data_Semigroup_Foldable = require_Data_Semigroup();
      var Data_Semigroup_Traversable = require_Data_Semigroup2();
      var Data_Traversable = require_Data31();
      var Data_Tuple = require_Data22();
      var Data_Unfoldable = require_Data34();
      var Partial_Unsafe = require_Partial2();
      var zipWith = function(f) {
        return function(v) {
          return function(v1) {
            return new Data_NonEmpty.NonEmpty(f(v.value0)(v1.value0), Data_List.zipWith(f)(v.value1)(v1.value1));
          };
        };
      };
      var zipWithA = function(dictApplicative) {
        return function(f) {
          return function(xs) {
            return function(ys) {
              return Data_Semigroup_Traversable.sequence1(Data_List_Types.traversable1NonEmptyList)(dictApplicative.Apply0())(zipWith(f)(xs)(ys));
            };
          };
        };
      };
      var zip = zipWith(Data_Tuple.Tuple.create);
      var wrappedOperation2 = function(name) {
        return function(f) {
          return function(v) {
            return function(v1) {
              var v2 = f(new Data_List_Types.Cons(v.value0, v.value1))(new Data_List_Types.Cons(v1.value0, v1.value1));
              if (v2 instanceof Data_List_Types.Cons) {
                return new Data_NonEmpty.NonEmpty(v2.value0, v2.value1);
              }
              ;
              if (v2 instanceof Data_List_Types.Nil) {
                return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
              }
              ;
              throw new Error("Failed pattern match at Data.List.NonEmpty (line 110, column 3 - line 112, column 81): " + [v2.constructor.name]);
            };
          };
        };
      };
      var wrappedOperation = function(name) {
        return function(f) {
          return function(v) {
            var v1 = f(new Data_List_Types.Cons(v.value0, v.value1));
            if (v1 instanceof Data_List_Types.Cons) {
              return new Data_NonEmpty.NonEmpty(v1.value0, v1.value1);
            }
            ;
            if (v1 instanceof Data_List_Types.Nil) {
              return Partial_Unsafe.unsafeCrashWith("Impossible: empty list in NonEmptyList " + name);
            }
            ;
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 97, column 3 - line 99, column 81): " + [v1.constructor.name]);
          };
        };
      };
      var updateAt = function(i) {
        return function(a) {
          return function(v) {
            if (i === 0) {
              return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, v.value1));
            }
            ;
            if (Data_Boolean.otherwise) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function($165) {
                return Data_List_Types.NonEmptyList(function(v1) {
                  return new Data_NonEmpty.NonEmpty(v.value0, v1);
                }($165));
              })(Data_List.updateAt(i - 1 | 0)(a)(v.value1));
            }
            ;
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 203, column 1 - line 203, column 75): " + [i.constructor.name, a.constructor.name, v.constructor.name]);
          };
        };
      };
      var unzip = function(ts) {
        return new Data_Tuple.Tuple(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.fst)(ts), Data_Functor.map(Data_List_Types.functorNonEmptyList)(Data_Tuple.snd)(ts));
      };
      var unsnoc = function(v) {
        var v1 = Data_List.unsnoc(v.value1);
        if (v1 instanceof Data_Maybe.Nothing) {
          return {
            init: Data_List_Types.Nil.value,
            last: v.value0
          };
        }
        ;
        if (v1 instanceof Data_Maybe.Just) {
          return {
            init: new Data_List_Types.Cons(v.value0, v1.value0.init),
            last: v1.value0.last
          };
        }
        ;
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 165, column 35 - line 167, column 50): " + [v1.constructor.name]);
      };
      var unionBy = function() {
        var $166 = wrappedOperation2("unionBy");
        return function($167) {
          return $166(Data_List.unionBy($167));
        };
      }();
      var union = function(dictEq) {
        return wrappedOperation2("union")(Data_List.union(dictEq));
      };
      var uncons = function(v) {
        return {
          head: v.value0,
          tail: v.value1
        };
      };
      var toList = function(v) {
        return new Data_List_Types.Cons(v.value0, v.value1);
      };
      var toUnfoldable = function(dictUnfoldable) {
        var $168 = Data_Unfoldable.unfoldr(dictUnfoldable)(function(xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function(rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(Data_List.uncons(xs));
        });
        return function($169) {
          return $168(toList($169));
        };
      };
      var tail = function(v) {
        return v.value1;
      };
      var sortBy = function() {
        var $170 = wrappedOperation("sortBy");
        return function($171) {
          return $170(Data_List.sortBy($171));
        };
      }();
      var sort = function(dictOrd) {
        return function(xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
        };
      };
      var snoc = function(v) {
        return function(y) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
        };
      };
      var singleton = function() {
        var $172 = Data_NonEmpty.singleton(Data_List_Types.plusList);
        return function($173) {
          return Data_List_Types.NonEmptyList($172($173));
        };
      }();
      var snoc$prime = function(v) {
        return function(y) {
          if (v instanceof Data_List_Types.Cons) {
            return new Data_NonEmpty.NonEmpty(v.value0, Data_List.snoc(v.value1)(y));
          }
          ;
          if (v instanceof Data_List_Types.Nil) {
            return singleton(y);
          }
          ;
          throw new Error("Failed pattern match at Data.List.NonEmpty (line 145, column 1 - line 145, column 51): " + [v.constructor.name, y.constructor.name]);
        };
      };
      var reverse = wrappedOperation("reverse")(Data_List.reverse);
      var nubEq = function(dictEq) {
        return wrappedOperation("nubEq")(Data_List.nubEq(dictEq));
      };
      var nubByEq = function() {
        var $174 = wrappedOperation("nubByEq");
        return function($175) {
          return $174(Data_List.nubByEq($175));
        };
      }();
      var nubBy = function() {
        var $176 = wrappedOperation("nubBy");
        return function($177) {
          return $176(Data_List.nubBy($177));
        };
      }();
      var nub = function(dictOrd) {
        return wrappedOperation("nub")(Data_List.nub(dictOrd));
      };
      var modifyAt = function(i) {
        return function(f) {
          return function(v) {
            if (i === 0) {
              return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(f(v.value0), v.value1));
            }
            ;
            if (Data_Boolean.otherwise) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function($178) {
                return Data_List_Types.NonEmptyList(function(v1) {
                  return new Data_NonEmpty.NonEmpty(v.value0, v1);
                }($178));
              })(Data_List.modifyAt(i - 1 | 0)(f)(v.value1));
            }
            ;
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 208, column 1 - line 208, column 82): " + [i.constructor.name, f.constructor.name, v.constructor.name]);
          };
        };
      };
      var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(Data_List_Types.functorWithIndexNonEmptyList);
      var lift = function(f) {
        return function(v) {
          return f(new Data_List_Types.Cons(v.value0, v.value1));
        };
      };
      var mapMaybe = function($179) {
        return lift(Data_List.mapMaybe($179));
      };
      var partition = function($180) {
        return lift(Data_List.partition($180));
      };
      var span = function($181) {
        return lift(Data_List.span($181));
      };
      var take = function($182) {
        return lift(Data_List.take($182));
      };
      var takeWhile = function($183) {
        return lift(Data_List.takeWhile($183));
      };
      var length = function(v) {
        return 1 + Data_List.length(v.value1) | 0;
      };
      var last = function(v) {
        return Data_Maybe.fromMaybe(v.value0)(Data_List.last(v.value1));
      };
      var intersectBy = function() {
        var $184 = wrappedOperation2("intersectBy");
        return function($185) {
          return $184(Data_List.intersectBy($185));
        };
      }();
      var intersect = function(dictEq) {
        return wrappedOperation2("intersect")(Data_List.intersect(dictEq));
      };
      var insertAt = function(i) {
        return function(a) {
          return function(v) {
            if (i === 0) {
              return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(a, new Data_List_Types.Cons(v.value0, v.value1)));
            }
            ;
            if (Data_Boolean.otherwise) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(function($186) {
                return Data_List_Types.NonEmptyList(function(v1) {
                  return new Data_NonEmpty.NonEmpty(v.value0, v1);
                }($186));
              })(Data_List.insertAt(i - 1 | 0)(a)(v.value1));
            }
            ;
            throw new Error("Failed pattern match at Data.List.NonEmpty (line 198, column 1 - line 198, column 75): " + [i.constructor.name, a.constructor.name, v.constructor.name]);
          };
        };
      };
      var init = function(v) {
        return Data_Maybe.maybe(Data_List_Types.Nil.value)(function(v1) {
          return new Data_List_Types.Cons(v.value0, v1);
        })(Data_List.init(v.value1));
      };
      var index = function(v) {
        return function(i) {
          if (i === 0) {
            return new Data_Maybe.Just(v.value0);
          }
          ;
          if (Data_Boolean.otherwise) {
            return Data_List.index(v.value1)(i - 1 | 0);
          }
          ;
          throw new Error("Failed pattern match at Data.List.NonEmpty (line 172, column 1 - line 172, column 52): " + [v.constructor.name, i.constructor.name]);
        };
      };
      var head = function(v) {
        return v.value0;
      };
      var groupBy = function() {
        var $187 = wrappedOperation("groupBy");
        return function($188) {
          return $187(Data_List.groupBy($188));
        };
      }();
      var groupAllBy = function(dictOrd) {
        var $189 = wrappedOperation("groupAllBy");
        var $190 = Data_List.groupAllBy(dictOrd);
        return function($191) {
          return $189($190($191));
        };
      };
      var groupAll = function(dictOrd) {
        return wrappedOperation("groupAll")(Data_List.groupAll(dictOrd));
      };
      var group$prime = function(dictWarn) {
        return function(dictOrd) {
          return groupAll(dictOrd);
        };
      };
      var group = function(dictEq) {
        return wrappedOperation("group")(Data_List.group(dictEq));
      };
      var fromList = function(v) {
        if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
        }
        ;
        if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(new Data_NonEmpty.NonEmpty(v.value0, v.value1));
        }
        ;
        throw new Error("Failed pattern match at Data.List.NonEmpty (line 126, column 1 - line 126, column 57): " + [v.constructor.name]);
      };
      var fromFoldable = function(dictFoldable) {
        var $192 = Data_List.fromFoldable(dictFoldable);
        return function($193) {
          return fromList($192($193));
        };
      };
      var foldM = function(dictMonad) {
        return function(f) {
          return function(b) {
            return function(v) {
              return Control_Bind.bind(dictMonad.Bind1())(f(b)(v.value0))(function(b$prime) {
                return Data_List.foldM(dictMonad)(f)(b$prime)(v.value1);
              });
            };
          };
        };
      };
      var findLastIndex = function(f) {
        return function(v) {
          var v1 = Data_List.findLastIndex(f)(v.value1);
          if (v1 instanceof Data_Maybe.Just) {
            return new Data_Maybe.Just(v1.value0 + 1 | 0);
          }
          ;
          if (v1 instanceof Data_Maybe.Nothing) {
            if (f(v.value0)) {
              return new Data_Maybe.Just(0);
            }
            ;
            if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
            }
            ;
          }
          ;
          throw new Error("Failed pattern match at Data.List.NonEmpty (line 192, column 3 - line 196, column 29): " + [v1.constructor.name]);
        };
      };
      var findIndex = function(f) {
        return function(v) {
          if (f(v.value0)) {
            return new Data_Maybe.Just(0);
          }
          ;
          if (Data_Boolean.otherwise) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(function(v1) {
              return v1 + 1 | 0;
            })(Data_List.findIndex(f)(v.value1));
          }
          ;
          throw new Error("Failed pattern match at Data.List.NonEmpty (line 185, column 1 - line 185, column 69): " + [f.constructor.name, v.constructor.name]);
        };
      };
      var filterM = function(dictMonad) {
        var $194 = Data_List.filterM(dictMonad);
        return function($195) {
          return lift($194($195));
        };
      };
      var filter = function($196) {
        return lift(Data_List.filter($196));
      };
      var elemLastIndex = function(dictEq) {
        return function(x) {
          return findLastIndex(function(v) {
            return Data_Eq.eq(dictEq)(v)(x);
          });
        };
      };
      var elemIndex = function(dictEq) {
        return function(x) {
          return findIndex(function(v) {
            return Data_Eq.eq(dictEq)(v)(x);
          });
        };
      };
      var dropWhile = function($197) {
        return lift(Data_List.dropWhile($197));
      };
      var drop = function($198) {
        return lift(Data_List.drop($198));
      };
      var cons$prime = function(x) {
        return function(xs) {
          return new Data_NonEmpty.NonEmpty(x, xs);
        };
      };
      var cons = function(y) {
        return function(v) {
          return new Data_NonEmpty.NonEmpty(y, new Data_List_Types.Cons(v.value0, v.value1));
        };
      };
      var concatMap = Data_Function.flip(Control_Bind.bind(Data_List_Types.bindNonEmptyList));
      var concat = function(v) {
        return Control_Bind.bind(Data_List_Types.bindNonEmptyList)(v)(Control_Category.identity(Control_Category.categoryFn));
      };
      var catMaybes = lift(Data_List.catMaybes);
      var appendFoldable = function(dictFoldable) {
        return function(v) {
          return function(ys) {
            return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(Data_List_Types.semigroupList)(v.value1)(Data_List.fromFoldable(dictFoldable)(ys)));
          };
        };
      };
      module.exports = {
        toUnfoldable,
        fromFoldable,
        fromList,
        toList,
        singleton,
        length,
        cons,
        "cons'": cons$prime,
        snoc,
        "snoc'": snoc$prime,
        head,
        last,
        tail,
        init,
        uncons,
        unsnoc,
        index,
        elemIndex,
        elemLastIndex,
        findIndex,
        findLastIndex,
        insertAt,
        updateAt,
        modifyAt,
        reverse,
        concat,
        concatMap,
        filter,
        filterM,
        mapMaybe,
        catMaybes,
        appendFoldable,
        mapWithIndex,
        sort,
        sortBy,
        take,
        takeWhile,
        drop,
        dropWhile,
        span,
        group,
        groupAll,
        "group'": group$prime,
        groupBy,
        groupAllBy,
        partition,
        nub,
        nubBy,
        nubEq,
        nubByEq,
        union,
        unionBy,
        intersect,
        intersectBy,
        zipWith,
        zipWithA,
        zip,
        unzip,
        foldM,
        all: Data_Foldable.all,
        any: Data_Foldable.any,
        elem: Data_Foldable.elem,
        find: Data_Foldable.find,
        findMap: Data_Foldable.findMap,
        fold: Data_Foldable.fold,
        foldMap: Data_Foldable.foldMap,
        foldl: Data_Foldable.foldl,
        foldr: Data_Foldable.foldr,
        intercalate: Data_Foldable.intercalate,
        notElem: Data_Foldable.notElem,
        NonEmptyList: Data_List_Types.NonEmptyList,
        fold1: Data_Semigroup_Foldable.fold1,
        foldMap1: Data_Semigroup_Foldable.foldMap1,
        for1_: Data_Semigroup_Foldable.for1_,
        sequence1_: Data_Semigroup_Foldable.sequence1_,
        traverse1_: Data_Semigroup_Foldable.traverse1_,
        sequence1: Data_Semigroup_Traversable.sequence1,
        traverse1: Data_Semigroup_Traversable.traverse1,
        traverse1Default: Data_Semigroup_Traversable.traverse1Default,
        scanl: Data_Traversable.scanl,
        scanr: Data_Traversable.scanr
      };
    }
  });

  // output/Data.String.CodeUnits/foreign.js
  var require_foreign36 = __commonJS({
    "output/Data.String.CodeUnits/foreign.js"(exports) {
      "use strict";
      exports.fromCharArray = function(a) {
        return a.join("");
      };
      exports.toCharArray = function(s) {
        return s.split("");
      };
      exports.singleton = function(c) {
        return c;
      };
      exports._charAt = function(just) {
        return function(nothing) {
          return function(i) {
            return function(s) {
              return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
            };
          };
        };
      };
      exports._toChar = function(just) {
        return function(nothing) {
          return function(s) {
            return s.length === 1 ? just(s) : nothing;
          };
        };
      };
      exports.length = function(s) {
        return s.length;
      };
      exports.countPrefix = function(p) {
        return function(s) {
          var i = 0;
          while (i < s.length && p(s.charAt(i)))
            i++;
          return i;
        };
      };
      exports._indexOf = function(just) {
        return function(nothing) {
          return function(x) {
            return function(s) {
              var i = s.indexOf(x);
              return i === -1 ? nothing : just(i);
            };
          };
        };
      };
      exports._indexOfStartingAt = function(just) {
        return function(nothing) {
          return function(x) {
            return function(startAt) {
              return function(s) {
                if (startAt < 0 || startAt > s.length)
                  return nothing;
                var i = s.indexOf(x, startAt);
                return i === -1 ? nothing : just(i);
              };
            };
          };
        };
      };
      exports._lastIndexOf = function(just) {
        return function(nothing) {
          return function(x) {
            return function(s) {
              var i = s.lastIndexOf(x);
              return i === -1 ? nothing : just(i);
            };
          };
        };
      };
      exports._lastIndexOfStartingAt = function(just) {
        return function(nothing) {
          return function(x) {
            return function(startAt) {
              return function(s) {
                var i = s.lastIndexOf(x, startAt);
                return i === -1 ? nothing : just(i);
              };
            };
          };
        };
      };
      exports.take = function(n) {
        return function(s) {
          return s.substr(0, n);
        };
      };
      exports.drop = function(n) {
        return function(s) {
          return s.substring(n);
        };
      };
      exports._slice = function(b) {
        return function(e) {
          return function(s) {
            return s.slice(b, e);
          };
        };
      };
      exports.splitAt = function(i) {
        return function(s) {
          return { before: s.substring(0, i), after: s.substring(i) };
        };
      };
    }
  });

  // output/Data.String.Unsafe/foreign.js
  var require_foreign37 = __commonJS({
    "output/Data.String.Unsafe/foreign.js"(exports) {
      "use strict";
      exports.charAt = function(i) {
        return function(s) {
          if (i >= 0 && i < s.length)
            return s.charAt(i);
          throw new Error("Data.String.Unsafe.charAt: Invalid index.");
        };
      };
      exports.char = function(s) {
        if (s.length === 1)
          return s.charAt(0);
        throw new Error("Data.String.Unsafe.char: Expected string of length 1.");
      };
    }
  });

  // output/Data.String.Unsafe/index.js
  var require_Data_String = __commonJS({
    "output/Data.String.Unsafe/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign37();
      module.exports = {
        "char": $foreign["char"],
        charAt: $foreign.charAt
      };
    }
  });

  // output/Data.String.CodeUnits/index.js
  var require_Data_String2 = __commonJS({
    "output/Data.String.CodeUnits/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign36();
      var Data_Boolean = require_Data();
      var Data_Maybe = require_Data15();
      var Data_String_Unsafe = require_Data_String();
      var uncons = function(v) {
        if (v === "") {
          return Data_Maybe.Nothing.value;
        }
        ;
        return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v),
          tail: $foreign.drop(1)(v)
        });
      };
      var toChar = $foreign["_toChar"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
      var takeWhile = function(p) {
        return function(s) {
          return $foreign.take($foreign.countPrefix(p)(s))(s);
        };
      };
      var takeRight = function(i) {
        return function(s) {
          return $foreign.drop($foreign.length(s) - i | 0)(s);
        };
      };
      var stripSuffix = function(v) {
        return function(str) {
          var v1 = $foreign.splitAt($foreign.length(str) - $foreign.length(v) | 0)(str);
          var $9 = v1.after === v;
          if ($9) {
            return new Data_Maybe.Just(v1.before);
          }
          ;
          return Data_Maybe.Nothing.value;
        };
      };
      var stripPrefix = function(v) {
        return function(str) {
          var v1 = $foreign.splitAt($foreign.length(v))(str);
          var $15 = v1.before === v;
          if ($15) {
            return new Data_Maybe.Just(v1.after);
          }
          ;
          return Data_Maybe.Nothing.value;
        };
      };
      var slice = function(b) {
        return function(e) {
          return function(s) {
            var l = $foreign.length(s);
            var norm = function(x) {
              if (x < 0) {
                return l + x | 0;
              }
              ;
              if (Data_Boolean.otherwise) {
                return x;
              }
              ;
              throw new Error("Failed pattern match at Data.String.CodeUnits (line 319, column 5 - line 320, column 27): " + [x.constructor.name]);
            };
            var e$prime = norm(e);
            var b$prime = norm(b);
            var $19 = b$prime < 0 || (b$prime >= l || (e$prime < 0 || (e$prime > l || b$prime > e$prime)));
            if ($19) {
              return Data_Maybe.Nothing.value;
            }
            ;
            return new Data_Maybe.Just($foreign["_slice"](b)(e)(s));
          };
        };
      };
      var lastIndexOf$prime = $foreign["_lastIndexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
      var lastIndexOf = $foreign["_lastIndexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
      var indexOf$prime = $foreign["_indexOfStartingAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
      var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
      var dropWhile = function(p) {
        return function(s) {
          return $foreign.drop($foreign.countPrefix(p)(s))(s);
        };
      };
      var dropRight = function(i) {
        return function(s) {
          return $foreign.take($foreign.length(s) - i | 0)(s);
        };
      };
      var contains = function(pat) {
        var $20 = indexOf(pat);
        return function($21) {
          return Data_Maybe.isJust($20($21));
        };
      };
      var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
      module.exports = {
        stripPrefix,
        stripSuffix,
        contains,
        charAt,
        toChar,
        uncons,
        indexOf,
        "indexOf'": indexOf$prime,
        lastIndexOf,
        "lastIndexOf'": lastIndexOf$prime,
        takeRight,
        takeWhile,
        dropRight,
        dropWhile,
        slice,
        singleton: $foreign.singleton,
        fromCharArray: $foreign.fromCharArray,
        toCharArray: $foreign.toCharArray,
        length: $foreign.length,
        countPrefix: $foreign.countPrefix,
        take: $foreign.take,
        drop: $foreign.drop,
        splitAt: $foreign.splitAt
      };
    }
  });

  // output/Foreign/index.js
  var require_Foreign = __commonJS({
    "output/Foreign/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign20();
      var Control_Applicative = require_Control4();
      var Control_Monad_Error_Class = require_Control_Monad_Error();
      var Control_Monad_Except_Trans = require_Control_Monad_Except();
      var Data_Boolean = require_Data();
      var Data_Either = require_Data19();
      var Data_Eq = require_Data8();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Data_Int = require_Data24();
      var Data_List_NonEmpty = require_Data_List3();
      var Data_Maybe = require_Data15();
      var Data_Ord = require_Data12();
      var Data_Ordering = require_Data9();
      var Data_Show = require_Data14();
      var Data_String_CodeUnits = require_Data_String2();
      var Unsafe_Coerce = require_Unsafe();
      var ForeignError = function() {
        function ForeignError2(value0) {
          this.value0 = value0;
        }
        ;
        ForeignError2.create = function(value0) {
          return new ForeignError2(value0);
        };
        return ForeignError2;
      }();
      var TypeMismatch = function() {
        function TypeMismatch2(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
        }
        ;
        TypeMismatch2.create = function(value0) {
          return function(value1) {
            return new TypeMismatch2(value0, value1);
          };
        };
        return TypeMismatch2;
      }();
      var ErrorAtIndex = function() {
        function ErrorAtIndex2(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
        }
        ;
        ErrorAtIndex2.create = function(value0) {
          return function(value1) {
            return new ErrorAtIndex2(value0, value1);
          };
        };
        return ErrorAtIndex2;
      }();
      var ErrorAtProperty = function() {
        function ErrorAtProperty2(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
        }
        ;
        ErrorAtProperty2.create = function(value0) {
          return function(value1) {
            return new ErrorAtProperty2(value0, value1);
          };
        };
        return ErrorAtProperty2;
      }();
      var unsafeToForeign = Unsafe_Coerce.unsafeCoerce;
      var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
      var showForeignError = {
        show: function(v) {
          if (v instanceof ForeignError) {
            return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
          }
          ;
          if (v instanceof ErrorAtIndex) {
            return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
          }
          ;
          if (v instanceof ErrorAtProperty) {
            return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
          }
          ;
          if (v instanceof TypeMismatch) {
            return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
          }
          ;
          throw new Error("Failed pattern match at Foreign (line 64, column 1 - line 68, column 89): " + [v.constructor.name]);
        }
      };
      var renderForeignError = function(v) {
        if (v instanceof ForeignError) {
          return v.value0;
        }
        ;
        if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
        }
        ;
        if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
        }
        ;
        if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
        }
        ;
        throw new Error("Failed pattern match at Foreign (line 73, column 1 - line 73, column 45): " + [v.constructor.name]);
      };
      var readUndefined = function(dictMonad) {
        return function(value) {
          if ($foreign.isUndefined(value)) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(Data_Maybe.Nothing.value);
          }
          ;
          if (Data_Boolean.otherwise) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(new Data_Maybe.Just(value));
          }
          ;
          throw new Error("Failed pattern match at Foreign (line 161, column 1 - line 161, column 70): " + [value.constructor.name]);
        };
      };
      var readNullOrUndefined = function(dictMonad) {
        return function(value) {
          if ($foreign.isNull(value) || $foreign.isUndefined(value)) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(Data_Maybe.Nothing.value);
          }
          ;
          if (Data_Boolean.otherwise) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(new Data_Maybe.Just(value));
          }
          ;
          throw new Error("Failed pattern match at Foreign (line 166, column 1 - line 166, column 76): " + [value.constructor.name]);
        };
      };
      var readNull = function(dictMonad) {
        return function(value) {
          if ($foreign.isNull(value)) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(Data_Maybe.Nothing.value);
          }
          ;
          if (Data_Boolean.otherwise) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(new Data_Maybe.Just(value));
          }
          ;
          throw new Error("Failed pattern match at Foreign (line 156, column 1 - line 156, column 65): " + [value.constructor.name]);
        };
      };
      var fail = function(dictMonad) {
        var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
        return function($119) {
          return $118(Data_List_NonEmpty.singleton($119));
        };
      };
      var readArray = function(dictMonad) {
        return function(value) {
          if ($foreign.isArray(value)) {
            return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
          }
          ;
          if (Data_Boolean.otherwise) {
            return fail(dictMonad)(new TypeMismatch("array", $foreign.tagOf(value)));
          }
          ;
          throw new Error("Failed pattern match at Foreign (line 151, column 1 - line 151, column 66): " + [value.constructor.name]);
        };
      };
      var unsafeReadTagged = function(dictMonad) {
        return function(tag) {
          return function(value) {
            if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
            }
            ;
            if (Data_Boolean.otherwise) {
              return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
            }
            ;
            throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [tag.constructor.name, value.constructor.name]);
          };
        };
      };
      var readBoolean = function(dictMonad) {
        return unsafeReadTagged(dictMonad)("Boolean");
      };
      var readNumber = function(dictMonad) {
        return unsafeReadTagged(dictMonad)("Number");
      };
      var readInt = function(dictMonad) {
        return function(value) {
          var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
          var fromNumber = function() {
            var $120 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
            return function($121) {
              return $120(Data_Int.fromNumber($121));
            };
          }();
          return Control_Monad_Except_Trans.mapExceptT(Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(Data_Either.either(Data_Function["const"](error))(fromNumber)))(readNumber(dictMonad)(value));
        };
      };
      var readString = function(dictMonad) {
        return unsafeReadTagged(dictMonad)("String");
      };
      var readChar = function(dictMonad) {
        return function(value) {
          var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Char", $foreign.tagOf(value))));
          var fromString = function() {
            var $122 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
            return function($123) {
              return $122(Data_String_CodeUnits.toChar($123));
            };
          }();
          return Control_Monad_Except_Trans.mapExceptT(Data_Functor.map(dictMonad.Bind1().Apply0().Functor0())(Data_Either.either(Data_Function["const"](error))(fromString)))(readString(dictMonad)(value));
        };
      };
      var eqForeignError = {
        eq: function(x) {
          return function(y) {
            if (x instanceof ForeignError && y instanceof ForeignError) {
              return x.value0 === y.value0;
            }
            ;
            if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
              return x.value0 === y.value0 && x.value1 === y.value1;
            }
            ;
            if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
              return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
            }
            ;
            if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
              return x.value0 === y.value0 && Data_Eq.eq(eqForeignError)(x.value1)(y.value1);
            }
            ;
            return false;
          };
        }
      };
      var ordForeignError = {
        compare: function(x) {
          return function(y) {
            if (x instanceof ForeignError && y instanceof ForeignError) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
            }
            ;
            if (x instanceof ForeignError) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof ForeignError) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof TypeMismatch && y instanceof TypeMismatch) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
              }
              ;
              if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
              }
              ;
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
            }
            ;
            if (x instanceof TypeMismatch) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof TypeMismatch) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof ErrorAtIndex && y instanceof ErrorAtIndex) {
              var v = Data_Ord.compare(Data_Ord.ordInt)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
              }
              ;
              if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
              }
              ;
              return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
            }
            ;
            if (x instanceof ErrorAtIndex) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof ErrorAtIndex) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof ErrorAtProperty && y instanceof ErrorAtProperty) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
              }
              ;
              if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
              }
              ;
              return Data_Ord.compare(ordForeignError)(x.value1)(y.value1);
            }
            ;
            throw new Error("Failed pattern match at Foreign (line 62, column 1 - line 62, column 52): " + [x.constructor.name, y.constructor.name]);
          };
        },
        Eq0: function() {
          return eqForeignError;
        }
      };
      module.exports = {
        ForeignError,
        TypeMismatch,
        ErrorAtIndex,
        ErrorAtProperty,
        renderForeignError,
        unsafeToForeign,
        unsafeFromForeign,
        unsafeReadTagged,
        readString,
        readChar,
        readBoolean,
        readNumber,
        readInt,
        readArray,
        readNull,
        readUndefined,
        readNullOrUndefined,
        fail,
        eqForeignError,
        ordForeignError,
        showForeignError,
        typeOf: $foreign.typeOf,
        tagOf: $foreign.tagOf,
        isNull: $foreign.isNull,
        isUndefined: $foreign.isUndefined,
        isArray: $foreign.isArray
      };
    }
  });

  // output/Data.Variant.Internal/index.js
  var require_Data_Variant = __commonJS({
    "output/Data.Variant.Internal/index.js"(exports, module) {
      "use strict";
      var Control_Applicative = require_Control4();
      var Control_Plus = require_Control9();
      var Data_Boolean = require_Data();
      var Data_List_Types = require_Data_List();
      var Data_Maybe = require_Data15();
      var Data_Ord = require_Data12();
      var Data_Ordering = require_Data9();
      var Data_Symbol = require_Data5();
      var Partial_Unsafe = require_Partial2();
      var Record_Unsafe = require_Record();
      var Type_Proxy = require_Type();
      var VariantRep = function(x) {
        return x;
      };
      var variantTagsNil = {
        variantTags: function(v) {
          return Data_List_Types.Nil.value;
        }
      };
      var variantTags = function(dict) {
        return dict.variantTags;
      };
      var variantTagsCons = function(dictVariantTags) {
        return function(dictIsSymbol) {
          return {
            variantTags: function(v) {
              return new Data_List_Types.Cons(Data_Symbol.reflectSymbol(dictIsSymbol)(Type_Proxy["Proxy"].value), variantTags(dictVariantTags)(Type_Proxy["Proxy"].value));
            }
          };
        };
      };
      var variantMatchNil = {};
      var variantMatchCons = function(dictVariantMatchCases) {
        return function(dictCons) {
          return function(dictTypeEquals) {
            return {};
          };
        };
      };
      var variantFMatchNil = {};
      var variantFMatchCons = function(dictVariantFMatchCases) {
        return function(dictCons) {
          return function(dictTypeEquals) {
            return {};
          };
        };
      };
      var lookupToEnum = function() {
        var go = function($copy_ix) {
          return function($copy_v) {
            return function($copy_v1) {
              var $tco_var_ix = $copy_ix;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(ix, v, v1) {
                if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                  if (v1.value0.cardinality > ix) {
                    var v2 = v1.value0.toEnum(ix);
                    if (v2 instanceof Data_Maybe.Just) {
                      $tco_done = true;
                      return Data_Maybe.Just.create({
                        type: v.value0,
                        value: v2.value0
                      });
                    }
                    ;
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                  }
                  ;
                  if (Data_Boolean.otherwise) {
                    $tco_var_ix = ix - v1.value0.cardinality | 0;
                    $tco_var_v = v.value1;
                    $copy_v1 = v1.value1;
                    return;
                  }
                  ;
                }
                ;
                $tco_done = true;
                return Data_Maybe.Nothing.value;
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_ix, $tco_var_v, $copy_v1);
              }
              ;
              return $tco_result;
            };
          };
        };
        return go;
      }();
      var lookupTag = function(tag) {
        var go = function($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
            if (v instanceof Data_List_Types.Cons) {
              if (v.value0 === tag) {
                $tco_done = true;
                return true;
              }
              ;
              if (Data_Boolean.otherwise) {
                $copy_v = v.value1;
                return;
              }
              ;
            }
            ;
            if (v instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return false;
            }
            ;
            throw new Error("Failed pattern match at Data.Variant.Internal (line 90, column 8 - line 94, column 18): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
          }
          ;
          return $tco_result;
        };
        return go;
      };
      var lookupCardinality = function() {
        var go = function($copy_acc) {
          return function($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
              if (v instanceof Data_List_Types.Cons) {
                $tco_var_acc = acc + v.value0.cardinality | 0;
                $copy_v = v.value1;
                return;
              }
              ;
              if (v instanceof Data_List_Types.Nil) {
                $tco_done = true;
                return acc;
              }
              ;
              throw new Error("Failed pattern match at Data.Variant.Internal (line 212, column 12 - line 214, column 16): " + [v.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_acc, $copy_v);
            }
            ;
            return $tco_result;
          };
        };
        return go(0);
      }();
      var impossible = function(str) {
        return Partial_Unsafe.unsafeCrashWith("Data.Variant: impossible `" + (str + "`"));
      };
      var lookup = function(name) {
        return function(tag) {
          var go = function($copy_v) {
            return function($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                  if (v.value0 === tag) {
                    $tco_done = true;
                    return v1.value0;
                  }
                  ;
                  if (Data_Boolean.otherwise) {
                    $tco_var_v = v.value1;
                    $copy_v1 = v1.value1;
                    return;
                  }
                  ;
                }
                ;
                $tco_done = true;
                return impossible(name);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
              }
              ;
              return $tco_result;
            };
          };
          return go;
        };
      };
      var lookupEq = function(tags) {
        return function(eqs) {
          return function(v) {
            return function(v1) {
              if (v.type === v1.type) {
                return lookup("eq")(v.type)(tags)(eqs)(v.value)(v1.value);
              }
              ;
              if (Data_Boolean.otherwise) {
                return false;
              }
              ;
              throw new Error("Failed pattern match at Data.Variant.Internal (line 96, column 1 - line 101, column 12): " + [tags.constructor.name, eqs.constructor.name, v.constructor.name, v1.constructor.name]);
            };
          };
        };
      };
      var lookupOrd = function(tags) {
        return function(ords) {
          return function(v) {
            return function(v1) {
              var v3 = Data_Ord.compare(Data_Ord.ordString)(v.type)(v1.type);
              if (v3 instanceof Data_Ordering.EQ) {
                return lookup("compare")(v.type)(tags)(ords)(v.value)(v1.value);
              }
              ;
              return v3;
            };
          };
        };
      };
      var lookupFirst = function(name) {
        return function(f) {
          var go = function(v) {
            return function(v1) {
              if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                return {
                  type: v.value0,
                  value: f(v1.value0)
                };
              }
              ;
              return impossible(name);
            };
          };
          return go;
        };
      };
      var lookupFromEnum = function(v) {
        var go = function($copy_acc) {
          return function($copy_v1) {
            return function($copy_v2) {
              var $tco_var_acc = $copy_acc;
              var $tco_var_v1 = $copy_v1;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v1, v2) {
                if (v1 instanceof Data_List_Types.Cons && v2 instanceof Data_List_Types.Cons) {
                  if (v1.value0 === v.type) {
                    $tco_done = true;
                    return acc + v2.value0.fromEnum(v.value) | 0;
                  }
                  ;
                  if (Data_Boolean.otherwise) {
                    $tco_var_acc = acc + v2.value0.cardinality | 0;
                    $tco_var_v1 = v1.value1;
                    $copy_v2 = v2.value1;
                    return;
                  }
                  ;
                }
                ;
                $tco_done = true;
                return impossible("fromEnum");
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $tco_var_v1, $copy_v2);
              }
              ;
              return $tco_result;
            };
          };
        };
        return go(0);
      };
      var lookupLast = function(name) {
        return function(f) {
          var go = function($copy_v) {
            return function($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                if (v instanceof Data_List_Types.Cons && (v.value1 instanceof Data_List_Types.Nil && (v1 instanceof Data_List_Types.Cons && v1.value1 instanceof Data_List_Types.Nil))) {
                  $tco_done = true;
                  return {
                    type: v.value0,
                    value: f(v1.value0)
                  };
                }
                ;
                if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                  $tco_var_v = v.value1;
                  $copy_v1 = v1.value1;
                  return;
                }
                ;
                $tco_done = true;
                return impossible(name);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
              }
              ;
              return $tco_result;
            };
          };
          return go;
        };
      };
      var lookupPred = function(v) {
        var go2 = function($copy_t1) {
          return function($copy_b1) {
            return function($copy_v1) {
              return function($copy_v2) {
                return function($copy_v3) {
                  return function($copy_v4) {
                    var $tco_var_t1 = $copy_t1;
                    var $tco_var_b1 = $copy_b1;
                    var $tco_var_v1 = $copy_v1;
                    var $tco_var_v2 = $copy_v2;
                    var $tco_var_v3 = $copy_v3;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(t1, b1, v1, v2, v3, v4) {
                      if (v2 instanceof Data_List_Types.Cons && (v3 instanceof Data_List_Types.Cons && v4 instanceof Data_List_Types.Cons)) {
                        if (v2.value0 === v.type) {
                          var v5 = v4.value0.pred(v.value);
                          if (v5 instanceof Data_Maybe.Nothing) {
                            $tco_done = true;
                            return Data_Maybe.Just.create({
                              type: t1,
                              value: b1.top
                            });
                          }
                          ;
                          if (v5 instanceof Data_Maybe.Just) {
                            $tco_done = true;
                            return Data_Maybe.Just.create({
                              type: v.type,
                              value: v5.value0
                            });
                          }
                          ;
                          throw new Error("Failed pattern match at Data.Variant.Internal (line 180, column 11 - line 182, column 69): " + [v5.constructor.name]);
                        }
                        ;
                        if (Data_Boolean.otherwise) {
                          $tco_var_t1 = v2.value0;
                          $tco_var_b1 = v3.value0;
                          $tco_var_v1 = v4.value0;
                          $tco_var_v2 = v2.value1;
                          $tco_var_v3 = v3.value1;
                          $copy_v4 = v4.value1;
                          return;
                        }
                        ;
                      }
                      ;
                      $tco_done = true;
                      return impossible("pred");
                    }
                    ;
                    while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_t1, $tco_var_b1, $tco_var_v1, $tco_var_v2, $tco_var_v3, $copy_v4);
                    }
                    ;
                    return $tco_result;
                  };
                };
              };
            };
          };
        };
        var go1 = function(v1) {
          return function(v2) {
            return function(v3) {
              if (v1 instanceof Data_List_Types.Cons && (v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons)) {
                if (v1.value0 === v.type) {
                  var v4 = v3.value0.pred(v.value);
                  if (v4 instanceof Data_Maybe.Nothing) {
                    return Data_Maybe.Nothing.value;
                  }
                  ;
                  if (v4 instanceof Data_Maybe.Just) {
                    return Data_Maybe.Just.create({
                      type: v.type,
                      value: v4.value0
                    });
                  }
                  ;
                  throw new Error("Failed pattern match at Data.Variant.Internal (line 171, column 11 - line 173, column 69): " + [v4.constructor.name]);
                }
                ;
                if (Data_Boolean.otherwise) {
                  return go2(v1.value0)(v2.value0)(v3.value0)(v1.value1)(v2.value1)(v3.value1);
                }
                ;
              }
              ;
              return impossible("pred");
            };
          };
        };
        return go1;
      };
      var lookupSucc = function(v) {
        var go = function($copy_v1) {
          return function($copy_v2) {
            return function($copy_v3) {
              var $tco_var_v1 = $copy_v1;
              var $tco_var_v2 = $copy_v2;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v1, v2, v3) {
                if (v1 instanceof Data_List_Types.Cons && (v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons)) {
                  if (v1.value0 === v.type) {
                    var v4 = v3.value0.succ(v.value);
                    if (v4 instanceof Data_Maybe.Just) {
                      $tco_done = true;
                      return Data_Maybe.Just.create({
                        type: v1.value0,
                        value: v4.value0
                      });
                    }
                    ;
                    if (v4 instanceof Data_Maybe.Nothing) {
                      if (v1.value1 instanceof Data_List_Types.Cons && v2.value1 instanceof Data_List_Types.Cons) {
                        $tco_done = true;
                        return Data_Maybe.Just.create({
                          type: v1.value1.value0,
                          value: v2.value1.value0.bottom
                        });
                      }
                      ;
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                    }
                    ;
                    throw new Error("Failed pattern match at Data.Variant.Internal (line 198, column 11 - line 202, column 29): " + [v4.constructor.name]);
                  }
                  ;
                  if (Data_Boolean.otherwise) {
                    $tco_var_v1 = v1.value1;
                    $tco_var_v2 = v2.value1;
                    $copy_v3 = v3.value1;
                    return;
                  }
                  ;
                }
                ;
                $tco_done = true;
                return impossible("succ");
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v1, $tco_var_v2, $copy_v3);
              }
              ;
              return $tco_result;
            };
          };
        };
        return go;
      };
      var contractWithInstance = function(dictRowToList) {
        return function(dictUnion) {
          return function(dictVariantTags) {
            return {
              contractWith: function(dictAlternative) {
                return function(v) {
                  return function(v1) {
                    return function(tag) {
                      return function(a) {
                        if (lookupTag(tag)(variantTags(dictVariantTags)(Type_Proxy["Proxy"].value))) {
                          return Control_Applicative.pure(dictAlternative.Applicative0())(a);
                        }
                        ;
                        if (Data_Boolean.otherwise) {
                          return Control_Plus.empty(dictAlternative.Plus1());
                        }
                        ;
                        throw new Error("Failed pattern match at Data.Variant.Internal (line 251, column 1 - line 260, column 24): " + [v.constructor.name, v1.constructor.name, tag.constructor.name, a.constructor.name]);
                      };
                    };
                  };
                };
              }
            };
          };
        };
      };
      var contractWith = function(dict) {
        return dict.contractWith;
      };
      module.exports = {
        VariantRep,
        variantTags,
        contractWith,
        lookup,
        lookupTag,
        lookupEq,
        lookupOrd,
        lookupLast,
        lookupFirst,
        lookupPred,
        lookupSucc,
        lookupCardinality,
        lookupFromEnum,
        lookupToEnum,
        impossible,
        variantMatchCons,
        variantMatchNil,
        variantFMatchCons,
        variantFMatchNil,
        variantTagsNil,
        variantTagsCons,
        contractWithInstance,
        unsafeGet: Record_Unsafe.unsafeGet,
        unsafeHas: Record_Unsafe.unsafeHas
      };
    }
  });

  // output/Data.Functor.Variant/index.js
  var require_Data_Functor6 = __commonJS({
    "output/Data.Functor.Variant/index.js"(exports, module) {
      "use strict";
      var Control_Applicative = require_Control4();
      var Control_Plus = require_Control9();
      var Data_Foldable = require_Data27();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Data_List_Types = require_Data_List();
      var Data_Show = require_Data14();
      var Data_Symbol = require_Data5();
      var Data_Traversable = require_Data31();
      var Data_Variant_Internal = require_Data_Variant();
      var Partial_Unsafe = require_Partial2();
      var Record_Unsafe = require_Record();
      var Type_Proxy = require_Type();
      var Unsafe_Coerce = require_Unsafe();
      var UnvariantF = function(x) {
        return x;
      };
      var variantFShows = function(dict) {
        return dict.variantFShows;
      };
      var unvariantF = function(v) {
        return function(f) {
          return function(dictIsSymbol) {
            return function(dictCons) {
              return function(dictFunctor) {
                return f(dictIsSymbol)()(dictFunctor);
              };
            };
          }({
            reflectSymbol: Data_Function["const"](v.type)
          })({})({
            map: v.map
          })(Type_Proxy["Proxy"].value)(v.value);
        };
      };
      var traverseVFRL = function(dict) {
        return dict.traverseVFRL;
      };
      var showVariantFNil = {
        variantFShows: function(v) {
          return function(v1) {
            return Data_List_Types.Nil.value;
          };
        }
      };
      var showVariantFCons = function(dictVariantFShows) {
        return function(dictTypeEquals) {
          return function(dictShow) {
            return function(dictShow1) {
              return {
                variantFShows: function(v) {
                  return function(p) {
                    return new Data_List_Types.Cons(Data_Show.show(dictShow), variantFShows(dictVariantFShows)(Type_Proxy["Proxy"].value)(p));
                  };
                }
              };
            };
          };
        };
      };
      var showVariantF = function(dictRowToList) {
        return function(dictVariantTags) {
          return function(dictVariantFShows) {
            return function(dictShow) {
              return {
                show: function(v1) {
                  var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Proxy["Proxy"].value);
                  var shows = variantFShows(dictVariantFShows)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                  var body = Data_Variant_Internal.lookup("show")(v1.type)(tags)(shows)(v1.value);
                  return "(inj @" + (Data_Show.show(Data_Show.showString)(v1.type) + (" " + (body + ")")));
                }
              };
            };
          };
        };
      };
      var onMatch = function(dictRowToList) {
        return function(dictVariantFMatchCases) {
          return function(dictUnion) {
            return function(r) {
              return function(k) {
                return function(v) {
                  if (Record_Unsafe.unsafeHas(v.type)(r)) {
                    return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                  }
                  ;
                  return k(v);
                };
              };
            };
          };
        };
      };
      var on = function(dictCons) {
        return function(dictIsSymbol) {
          return function(p) {
            return function(f) {
              return function(g) {
                return function(r) {
                  if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
                    return f(r.value);
                  }
                  ;
                  return g(r);
                };
              };
            };
          };
        };
      };
      var prj = function(dictCons) {
        return function(dictAlternative) {
          return function(dictIsSymbol) {
            return function(p) {
              return on()(dictIsSymbol)(p)(Control_Applicative.pure(dictAlternative.Applicative0()))(Data_Function["const"](Control_Plus.empty(dictAlternative.Plus1())));
            };
          };
        };
      };
      var inj = function(dictCons) {
        return function(dictIsSymbol) {
          return function(dictFunctor) {
            return function(p) {
              return function(value) {
                return {
                  type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                  value,
                  map: Data_Functor.map(dictFunctor)
                };
              };
            };
          };
        };
      };
      var revariantF = function(v) {
        return v(function(dictIsSymbol) {
          return function(dictCons) {
            return function(dictFunctor) {
              return inj()(dictIsSymbol)(dictFunctor);
            };
          };
        });
      };
      var functorVariantF = {
        map: function(f) {
          return function(a) {
            return {
              type: a.type,
              value: a.map(f)(a.value),
              map: a.map
            };
          };
        }
      };
      var foldrVFRL = function(dict) {
        return dict.foldrVFRL;
      };
      var foldlVFRL = function(dict) {
        return dict.foldlVFRL;
      };
      var foldMapVFRL = function(dict) {
        return dict.foldMapVFRL;
      };
      var foldableCons = function(dictIsSymbol) {
        return function(dictFoldable) {
          return function(dictFoldableVFRL) {
            return function(dictCons) {
              return {
                foldrVFRL: function(v) {
                  return function(f) {
                    return function(b) {
                      return on()(dictIsSymbol)(Type_Proxy["Proxy"].value)(Data_Foldable.foldr(dictFoldable)(f)(b))(foldrVFRL(dictFoldableVFRL)(Type_Proxy["Proxy"].value)(f)(b));
                    };
                  };
                },
                foldlVFRL: function(v) {
                  return function(f) {
                    return function(b) {
                      return on()(dictIsSymbol)(Type_Proxy["Proxy"].value)(Data_Foldable.foldl(dictFoldable)(f)(b))(foldlVFRL(dictFoldableVFRL)(Type_Proxy["Proxy"].value)(f)(b));
                    };
                  };
                },
                foldMapVFRL: function(dictMonoid) {
                  return function(v) {
                    return function(f) {
                      return on()(dictIsSymbol)(Type_Proxy["Proxy"].value)(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f))(foldMapVFRL(dictFoldableVFRL)(dictMonoid)(Type_Proxy["Proxy"].value)(f));
                    };
                  };
                }
              };
            };
          };
        };
      };
      var foldableVariantF = function(dictRowToList) {
        return function(dictFoldableVFRL) {
          return {
            foldr: foldrVFRL(dictFoldableVFRL)(Type_Proxy["Proxy"].value),
            foldl: foldlVFRL(dictFoldableVFRL)(Type_Proxy["Proxy"].value),
            foldMap: function(dictMonoid) {
              return foldMapVFRL(dictFoldableVFRL)(dictMonoid)(Type_Proxy["Proxy"].value);
            }
          };
        };
      };
      var traversableVariantF = function(dictRowToList) {
        return function(dictTraversableVFRL) {
          return {
            traverse: function(dictApplicative) {
              return traverseVFRL(dictTraversableVFRL)(dictApplicative)(Type_Proxy["Proxy"].value);
            },
            sequence: function(dictApplicative) {
              return Data_Traversable.sequenceDefault(traversableVariantF()(dictTraversableVFRL))(dictApplicative);
            },
            Functor0: function() {
              return functorVariantF;
            },
            Foldable1: function() {
              return foldableVariantF()(dictTraversableVFRL.FoldableVFRL0());
            }
          };
        };
      };
      var expand = function(dictUnion) {
        return Unsafe_Coerce.unsafeCoerce;
      };
      var traversableCons = function(dictIsSymbol) {
        return function(dictTraversable) {
          return function(dictTraversableVFRL) {
            return function(dictCons) {
              return function(dictUnion) {
                return {
                  traverseVFRL: function(dictApplicative) {
                    return function(v) {
                      return function(f) {
                        return on()(dictIsSymbol)(Type_Proxy["Proxy"].value)(function() {
                          var $92 = Data_Functor.map(dictApplicative.Apply0().Functor0())(inj()(dictIsSymbol)(dictTraversable.Functor0())(Type_Proxy["Proxy"].value));
                          var $93 = Data_Traversable.traverse(dictTraversable)(dictApplicative)(f);
                          return function($94) {
                            return $92($93($94));
                          };
                        }())(function() {
                          var $95 = Data_Functor.map(dictApplicative.Apply0().Functor0())(expand());
                          var $96 = traverseVFRL(dictTraversableVFRL)(dictApplicative)(Type_Proxy["Proxy"].value)(f);
                          return function($97) {
                            return $95($96($97));
                          };
                        }());
                      };
                    };
                  },
                  FoldableVFRL0: foldableCons(dictIsSymbol)(dictTraversable.Foldable1())(dictTraversableVFRL.FoldableVFRL0())
                };
              };
            };
          };
        };
      };
      var $$default = function(a) {
        return function(v) {
          return a;
        };
      };
      var contract = function(dictAlternative) {
        return function(dictContractable) {
          return function(v) {
            return Data_Variant_Internal.contractWith(dictContractable)(dictAlternative)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(v.type)(v);
          };
        };
      };
      var case_ = function(r) {
        return Partial_Unsafe.unsafeCrashWith("Data.Functor.Variant: pattern match failure [" + (r.type + "]"));
      };
      var foldableNil = {
        foldrVFRL: function(v) {
          return function(v1) {
            return function(v2) {
              return case_;
            };
          };
        },
        foldlVFRL: function(v) {
          return function(v1) {
            return function(v2) {
              return case_;
            };
          };
        },
        foldMapVFRL: function(dictMonoid) {
          return function(v) {
            return function(v1) {
              return case_;
            };
          };
        }
      };
      var match = function(dictRowToList) {
        return function(dictVariantFMatchCases) {
          return function(dictUnion) {
            return function(r) {
              return onMatch()()()(r)(case_);
            };
          };
        };
      };
      var traversableNil = {
        traverseVFRL: function(dictApplicative) {
          return function(v) {
            return function(v1) {
              return case_;
            };
          };
        },
        FoldableVFRL0: function() {
          return foldableNil;
        }
      };
      module.exports = {
        inj,
        prj,
        on,
        onMatch,
        case_,
        match,
        "default": $$default,
        expand,
        contract,
        UnvariantF,
        unvariantF,
        revariantF,
        variantFShows,
        traverseVFRL,
        foldrVFRL,
        foldlVFRL,
        foldMapVFRL,
        functorVariantF,
        foldableNil,
        foldableCons,
        traversableNil,
        traversableCons,
        foldableVariantF,
        traversableVariantF,
        showVariantFNil,
        showVariantFCons,
        showVariantF
      };
    }
  });

  // output/Data.Enum/foreign.js
  var require_foreign38 = __commonJS({
    "output/Data.Enum/foreign.js"(exports) {
      "use strict";
      exports.toCharCode = function(c) {
        return c.charCodeAt(0);
      };
      exports.fromCharCode = function(c) {
        return String.fromCharCode(c);
      };
    }
  });

  // output/Control.Alternative/index.js
  var require_Control12 = __commonJS({
    "output/Control.Alternative/index.js"(exports, module) {
      "use strict";
      var Control_Alt = require_Control6();
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Control_Plus = require_Control9();
      var Data_Functor = require_Data4();
      var Data_Unit = require_Data3();
      var guard = function(dictAlternative) {
        return function(v) {
          if (v) {
            return Control_Applicative.pure(dictAlternative.Applicative0())(Data_Unit.unit);
          }
          ;
          if (!v) {
            return Control_Plus.empty(dictAlternative.Plus1());
          }
          ;
          throw new Error("Failed pattern match at Control.Alternative (line 48, column 1 - line 48, column 54): " + [v.constructor.name]);
        };
      };
      var alternativeArray = {
        Applicative0: function() {
          return Control_Applicative.applicativeArray;
        },
        Plus1: function() {
          return Control_Plus.plusArray;
        }
      };
      module.exports = {
        guard,
        alternativeArray,
        alt: Control_Alt.alt,
        liftA1: Control_Applicative.liftA1,
        pure: Control_Applicative.pure,
        unless: Control_Applicative.unless,
        when: Control_Applicative.when,
        apply: Control_Apply.apply,
        empty: Control_Plus.empty,
        map: Data_Functor.map,
        "void": Data_Functor["void"]
      };
    }
  });

  // output/Data.Enum/index.js
  var require_Data37 = __commonJS({
    "output/Data.Enum/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign38();
      var Control_Alternative = require_Control12();
      var Control_Apply = require_Control3();
      var Control_Bind = require_Control5();
      var Data_Boolean = require_Data();
      var Data_Bounded = require_Data13();
      var Data_Either = require_Data19();
      var Data_Eq = require_Data8();
      var Data_Function = require_Data2();
      var Data_Functor = require_Data4();
      var Data_Maybe = require_Data15();
      var Data_Ord = require_Data12();
      var Data_Ordering = require_Data9();
      var Data_Show = require_Data14();
      var Data_Tuple = require_Data22();
      var Data_Unfoldable = require_Data34();
      var Data_Unfoldable1 = require_Data33();
      var Data_Unit = require_Data3();
      var Cardinality = function(x) {
        return x;
      };
      var toEnum = function(dict) {
        return dict.toEnum;
      };
      var succ = function(dict) {
        return dict.succ;
      };
      var upFromIncluding = function(dictEnum) {
        return function(dictUnfoldable1) {
          return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(succ(dictEnum)));
        };
      };
      var showCardinality = {
        show: function(v) {
          return "(Cardinality " + (Data_Show.show(Data_Show.showInt)(v) + ")");
        }
      };
      var pred = function(dict) {
        return dict.pred;
      };
      var ordCardinality = Data_Ord.ordInt;
      var newtypeCardinality = {
        Coercible0: function() {
          return void 0;
        }
      };
      var fromEnum = function(dict) {
        return dict.fromEnum;
      };
      var toEnumWithDefaults = function(dictBoundedEnum) {
        return function(low) {
          return function(high) {
            return function(x) {
              var v = toEnum(dictBoundedEnum)(x);
              if (v instanceof Data_Maybe.Just) {
                return v.value0;
              }
              ;
              if (v instanceof Data_Maybe.Nothing) {
                var $55 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                if ($55) {
                  return low;
                }
                ;
                return high;
              }
              ;
              throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [v.constructor.name]);
            };
          };
        };
      };
      var eqCardinality = Data_Eq.eqInt;
      var enumUnit = {
        succ: Data_Function["const"](Data_Maybe.Nothing.value),
        pred: Data_Function["const"](Data_Maybe.Nothing.value),
        Ord0: function() {
          return Data_Ord.ordUnit;
        }
      };
      var enumTuple = function(dictEnum) {
        return function(dictBoundedEnum) {
          return {
            succ: function(v) {
              return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.bottom(dictBoundedEnum.Bounded0())))(succ(dictEnum)(v.value0)))(function() {
                var $98 = Data_Tuple.Tuple.create(v.value0);
                return function($99) {
                  return Data_Maybe.Just.create($98($99));
                };
              }())(succ(dictBoundedEnum.Enum1())(v.value1));
            },
            pred: function(v) {
              return Data_Maybe.maybe(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Function.flip(Data_Tuple.Tuple.create)(Data_Bounded.top(dictBoundedEnum.Bounded0())))(pred(dictEnum)(v.value0)))(function() {
                var $100 = Data_Tuple.Tuple.create(v.value0);
                return function($101) {
                  return Data_Maybe.Just.create($100($101));
                };
              }())(pred(dictBoundedEnum.Enum1())(v.value1));
            },
            Ord0: function() {
              return Data_Tuple.ordTuple(dictEnum.Ord0())(dictBoundedEnum.Enum1().Ord0());
            }
          };
        };
      };
      var enumOrdering = {
        succ: function(v) {
          if (v instanceof Data_Ordering.LT) {
            return new Data_Maybe.Just(Data_Ordering.EQ.value);
          }
          ;
          if (v instanceof Data_Ordering.EQ) {
            return new Data_Maybe.Just(Data_Ordering.GT.value);
          }
          ;
          if (v instanceof Data_Ordering.GT) {
            return Data_Maybe.Nothing.value;
          }
          ;
          throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [v.constructor.name]);
        },
        pred: function(v) {
          if (v instanceof Data_Ordering.LT) {
            return Data_Maybe.Nothing.value;
          }
          ;
          if (v instanceof Data_Ordering.EQ) {
            return new Data_Maybe.Just(Data_Ordering.LT.value);
          }
          ;
          if (v instanceof Data_Ordering.GT) {
            return new Data_Maybe.Just(Data_Ordering.EQ.value);
          }
          ;
          throw new Error("Failed pattern match at Data.Enum (line 72, column 1 - line 78, column 20): " + [v.constructor.name]);
        },
        Ord0: function() {
          return Data_Ord.ordOrdering;
        }
      };
      var enumMaybe = function(dictBoundedEnum) {
        return {
          succ: function(v) {
            if (v instanceof Data_Maybe.Nothing) {
              return new Data_Maybe.Just(new Data_Maybe.Just(Data_Bounded.bottom(dictBoundedEnum.Bounded0())));
            }
            ;
            if (v instanceof Data_Maybe.Just) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Maybe.Just.create)(succ(dictBoundedEnum.Enum1())(v.value0));
            }
            ;
            throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [v.constructor.name]);
          },
          pred: function(v) {
            if (v instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
            }
            ;
            if (v instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just(pred(dictBoundedEnum.Enum1())(v.value0));
            }
            ;
            throw new Error("Failed pattern match at Data.Enum (line 80, column 1 - line 84, column 32): " + [v.constructor.name]);
          },
          Ord0: function() {
            return Data_Maybe.ordMaybe(dictBoundedEnum.Enum1().Ord0());
          }
        };
      };
      var enumInt = {
        succ: function(n) {
          var $68 = n < Data_Bounded.top(Data_Bounded.boundedInt);
          if ($68) {
            return new Data_Maybe.Just(n + 1 | 0);
          }
          ;
          return Data_Maybe.Nothing.value;
        },
        pred: function(n) {
          var $69 = n > Data_Bounded.bottom(Data_Bounded.boundedInt);
          if ($69) {
            return new Data_Maybe.Just(n - 1 | 0);
          }
          ;
          return Data_Maybe.Nothing.value;
        },
        Ord0: function() {
          return Data_Ord.ordInt;
        }
      };
      var enumFromTo = function(dictEnum) {
        return function(dictUnfoldable1) {
          var go = function(step) {
            return function(op) {
              return function(to) {
                return function(a) {
                  return new Data_Tuple.Tuple(a, Control_Bind.bind(Data_Maybe.bindMaybe)(step(a))(function(a$prime) {
                    return Data_Functor.voidLeft(Data_Maybe.functorMaybe)(Control_Alternative.guard(Data_Maybe.alternativeMaybe)(op(a$prime)(to)))(a$prime);
                  }));
                };
              };
            };
          };
          return function(v) {
            return function(v1) {
              if (Data_Eq.eq(dictEnum.Ord0().Eq0())(v)(v1)) {
                return Data_Unfoldable1.singleton(dictUnfoldable1)(v);
              }
              ;
              if (Data_Ord.lessThan(dictEnum.Ord0())(v)(v1)) {
                return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(succ(dictEnum))(Data_Ord.lessThanOrEq(dictEnum.Ord0()))(v1))(v);
              }
              ;
              if (Data_Boolean.otherwise) {
                return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(go(pred(dictEnum))(Data_Ord.greaterThanOrEq(dictEnum.Ord0()))(v1))(v);
              }
              ;
              throw new Error("Failed pattern match at Data.Enum (line 186, column 14 - line 190, column 51): " + [v.constructor.name, v1.constructor.name]);
            };
          };
        };
      };
      var enumFromThenTo = function(dictUnfoldable) {
        return function(dictFunctor) {
          return function(dictBoundedEnum) {
            var go = function(step) {
              return function(to) {
                return function(e) {
                  if (e <= to) {
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(e, e + step | 0));
                  }
                  ;
                  if (Data_Boolean.otherwise) {
                    return Data_Maybe.Nothing.value;
                  }
                  ;
                  throw new Error("Failed pattern match at Data.Enum (line 217, column 5 - line 219, column 28): " + [step.constructor.name, to.constructor.name, e.constructor.name]);
                };
              };
            };
            return function(a) {
              return function(b) {
                return function(c) {
                  var c$prime = fromEnum(dictBoundedEnum)(c);
                  var b$prime = fromEnum(dictBoundedEnum)(b);
                  var a$prime = fromEnum(dictBoundedEnum)(a);
                  return Data_Functor.map(dictFunctor)(function() {
                    var $102 = Data_Maybe.fromJust();
                    var $103 = toEnum(dictBoundedEnum);
                    return function($104) {
                      return $102($103($104));
                    };
                  }())(Data_Unfoldable.unfoldr(dictUnfoldable)(go(b$prime - a$prime | 0)(c$prime))(a$prime));
                };
              };
            };
          };
        };
      };
      var enumEither = function(dictBoundedEnum) {
        return function(dictBoundedEnum1) {
          return {
            succ: function(v) {
              if (v instanceof Data_Either.Left) {
                return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Right(Data_Bounded.bottom(dictBoundedEnum1.Bounded0()))))(function($105) {
                  return Data_Maybe.Just.create(Data_Either.Left.create($105));
                })(succ(dictBoundedEnum.Enum1())(v.value0));
              }
              ;
              if (v instanceof Data_Either.Right) {
                return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function($106) {
                  return Data_Maybe.Just.create(Data_Either.Right.create($106));
                })(succ(dictBoundedEnum1.Enum1())(v.value0));
              }
              ;
              throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [v.constructor.name]);
            },
            pred: function(v) {
              if (v instanceof Data_Either.Left) {
                return Data_Maybe.maybe(Data_Maybe.Nothing.value)(function($107) {
                  return Data_Maybe.Just.create(Data_Either.Left.create($107));
                })(pred(dictBoundedEnum.Enum1())(v.value0));
              }
              ;
              if (v instanceof Data_Either.Right) {
                return Data_Maybe.maybe(new Data_Maybe.Just(new Data_Either.Left(Data_Bounded.top(dictBoundedEnum.Bounded0()))))(function($108) {
                  return Data_Maybe.Just.create(Data_Either.Right.create($108));
                })(pred(dictBoundedEnum1.Enum1())(v.value0));
              }
              ;
              throw new Error("Failed pattern match at Data.Enum (line 86, column 1 - line 90, column 69): " + [v.constructor.name]);
            },
            Ord0: function() {
              return Data_Either.ordEither(dictBoundedEnum.Enum1().Ord0())(dictBoundedEnum1.Enum1().Ord0());
            }
          };
        };
      };
      var enumBoolean = {
        succ: function(v) {
          if (!v) {
            return new Data_Maybe.Just(true);
          }
          ;
          return Data_Maybe.Nothing.value;
        },
        pred: function(v) {
          if (v) {
            return new Data_Maybe.Just(false);
          }
          ;
          return Data_Maybe.Nothing.value;
        },
        Ord0: function() {
          return Data_Ord.ordBoolean;
        }
      };
      var downFromIncluding = function(dictEnum) {
        return function(dictUnfoldable1) {
          return Data_Unfoldable1.unfoldr1(dictUnfoldable1)(Control_Apply.apply(Control_Apply.applyFn)(Data_Tuple.Tuple.create)(pred(dictEnum)));
        };
      };
      var diag = function(a) {
        return new Data_Tuple.Tuple(a, a);
      };
      var downFrom = function(dictEnum) {
        return function(dictUnfoldable) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function() {
            var $109 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
            var $110 = pred(dictEnum);
            return function($111) {
              return $109($110($111));
            };
          }());
        };
      };
      var upFrom = function(dictEnum) {
        return function(dictUnfoldable) {
          return Data_Unfoldable.unfoldr(dictUnfoldable)(function() {
            var $112 = Data_Functor.map(Data_Maybe.functorMaybe)(diag);
            var $113 = succ(dictEnum);
            return function($114) {
              return $112($113($114));
            };
          }());
        };
      };
      var defaultToEnum = function(dictBounded) {
        return function(dictEnum) {
          return function(i$prime) {
            var go = function($copy_i) {
              return function($copy_x) {
                var $tco_var_i = $copy_i;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(i, x) {
                  var $83 = i === 0;
                  if ($83) {
                    $tco_done = true;
                    return new Data_Maybe.Just(x);
                  }
                  ;
                  var v = succ(dictEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                    $tco_var_i = i - 1 | 0;
                    $copy_x = v.value0;
                    return;
                  }
                  ;
                  if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return Data_Maybe.Nothing.value;
                  }
                  ;
                  throw new Error("Failed pattern match at Data.Enum (line 296, column 12 - line 298, column 33): " + [v.constructor.name]);
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_i, $copy_x);
                }
                ;
                return $tco_result;
              };
            };
            var $86 = i$prime < 0;
            if ($86) {
              return Data_Maybe.Nothing.value;
            }
            ;
            return go(i$prime)(Data_Bounded.bottom(dictBounded));
          };
        };
      };
      var defaultSucc = function(toEnum$prime) {
        return function(fromEnum$prime) {
          return function(a) {
            return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
        };
      };
      var defaultPred = function(toEnum$prime) {
        return function(fromEnum$prime) {
          return function(a) {
            return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
        };
      };
      var defaultFromEnum = function(dictEnum) {
        var go = function($copy_i) {
          return function($copy_x) {
            var $tco_var_i = $copy_i;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(i, x) {
              var v = pred(dictEnum)(x);
              if (v instanceof Data_Maybe.Just) {
                $tco_var_i = i + 1 | 0;
                $copy_x = v.value0;
                return;
              }
              ;
              if (v instanceof Data_Maybe.Nothing) {
                $tco_done = true;
                return i;
              }
              ;
              throw new Error("Failed pattern match at Data.Enum (line 309, column 5 - line 311, column 19): " + [v.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_i, $copy_x);
            }
            ;
            return $tco_result;
          };
        };
        return go(0);
      };
      var defaultCardinality = function(dictBounded) {
        return function(dictEnum) {
          var go = function($copy_i) {
            return function($copy_x) {
              var $tco_var_i = $copy_i;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i, x) {
                var v = succ(dictEnum)(x);
                if (v instanceof Data_Maybe.Just) {
                  $tco_var_i = i + 1 | 0;
                  $copy_x = v.value0;
                  return;
                }
                ;
                if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return i;
                }
                ;
                throw new Error("Failed pattern match at Data.Enum (line 276, column 5 - line 278, column 19): " + [v.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_i, $copy_x);
              }
              ;
              return $tco_result;
            };
          };
          return Cardinality(go(1)(Data_Bounded.bottom(dictBounded)));
        };
      };
      var charToEnum = function(v) {
        if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      var enumChar = {
        succ: defaultSucc(charToEnum)($foreign.toCharCode),
        pred: defaultPred(charToEnum)($foreign.toCharCode),
        Ord0: function() {
          return Data_Ord.ordChar;
        }
      };
      var cardinality = function(dict) {
        return dict.cardinality;
      };
      var boundedEnumUnit = {
        cardinality: 1,
        toEnum: function(v) {
          if (v === 0) {
            return new Data_Maybe.Just(Data_Unit.unit);
          }
          ;
          return Data_Maybe.Nothing.value;
        },
        fromEnum: Data_Function["const"](0),
        Bounded0: function() {
          return Data_Bounded.boundedUnit;
        },
        Enum1: function() {
          return enumUnit;
        }
      };
      var boundedEnumOrdering = {
        cardinality: 3,
        toEnum: function(v) {
          if (v === 0) {
            return new Data_Maybe.Just(Data_Ordering.LT.value);
          }
          ;
          if (v === 1) {
            return new Data_Maybe.Just(Data_Ordering.EQ.value);
          }
          ;
          if (v === 2) {
            return new Data_Maybe.Just(Data_Ordering.GT.value);
          }
          ;
          return Data_Maybe.Nothing.value;
        },
        fromEnum: function(v) {
          if (v instanceof Data_Ordering.LT) {
            return 0;
          }
          ;
          if (v instanceof Data_Ordering.EQ) {
            return 1;
          }
          ;
          if (v instanceof Data_Ordering.GT) {
            return 2;
          }
          ;
          throw new Error("Failed pattern match at Data.Enum (line 137, column 1 - line 145, column 18): " + [v.constructor.name]);
        },
        Bounded0: function() {
          return Data_Bounded.boundedOrdering;
        },
        Enum1: function() {
          return enumOrdering;
        }
      };
      var boundedEnumChar = {
        cardinality: $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0,
        toEnum: charToEnum,
        fromEnum: $foreign.toCharCode,
        Bounded0: function() {
          return Data_Bounded.boundedChar;
        },
        Enum1: function() {
          return enumChar;
        }
      };
      var boundedEnumBoolean = {
        cardinality: 2,
        toEnum: function(v) {
          if (v === 0) {
            return new Data_Maybe.Just(false);
          }
          ;
          if (v === 1) {
            return new Data_Maybe.Just(true);
          }
          ;
          return Data_Maybe.Nothing.value;
        },
        fromEnum: function(v) {
          if (!v) {
            return 0;
          }
          ;
          if (v) {
            return 1;
          }
          ;
          throw new Error("Failed pattern match at Data.Enum (line 118, column 1 - line 124, column 20): " + [v.constructor.name]);
        },
        Bounded0: function() {
          return Data_Bounded.boundedBoolean;
        },
        Enum1: function() {
          return enumBoolean;
        }
      };
      module.exports = {
        succ,
        pred,
        cardinality,
        toEnum,
        fromEnum,
        toEnumWithDefaults,
        Cardinality,
        enumFromTo,
        enumFromThenTo,
        upFrom,
        upFromIncluding,
        downFrom,
        downFromIncluding,
        defaultSucc,
        defaultPred,
        defaultCardinality,
        defaultToEnum,
        defaultFromEnum,
        enumBoolean,
        enumInt,
        enumChar,
        enumUnit,
        enumOrdering,
        enumMaybe,
        enumEither,
        enumTuple,
        boundedEnumBoolean,
        boundedEnumChar,
        boundedEnumUnit,
        boundedEnumOrdering,
        newtypeCardinality,
        eqCardinality,
        ordCardinality,
        showCardinality
      };
    }
  });

  // output/Data.Variant/index.js
  var require_Data38 = __commonJS({
    "output/Data.Variant/index.js"(exports, module) {
      "use strict";
      var Control_Applicative = require_Control4();
      var Control_Plus = require_Control9();
      var Data_Bounded = require_Data13();
      var Data_Enum = require_Data37();
      var Data_Eq = require_Data8();
      var Data_Function = require_Data2();
      var Data_List_Types = require_Data_List();
      var Data_Ord = require_Data12();
      var Data_Show = require_Data14();
      var Data_Symbol = require_Data5();
      var Data_Variant_Internal = require_Data_Variant();
      var Partial_Unsafe = require_Partial2();
      var Record_Unsafe = require_Record();
      var Type_Proxy = require_Type();
      var Unsafe_Coerce = require_Unsafe();
      var Unvariant = function(x) {
        return x;
      };
      var variantShows = function(dict) {
        return dict.variantShows;
      };
      var variantOrds = function(dict) {
        return dict.variantOrds;
      };
      var variantEqs = function(dict) {
        return dict.variantEqs;
      };
      var variantBoundedEnums = function(dict) {
        return dict.variantBoundedEnums;
      };
      var variantBounded = function(dict) {
        return dict.variantBounded;
      };
      var unvariant = function(v) {
        return function(f) {
          return function(dictIsSymbol) {
            return function(dictCons) {
              return f(dictIsSymbol)();
            };
          }({
            reflectSymbol: Data_Function["const"](v.type)
          })({})(Type_Proxy["Proxy"].value)(v.value);
        };
      };
      var showVariantNil = {
        variantShows: function(v) {
          return Data_List_Types.Nil.value;
        }
      };
      var showVariantCons = function(dictVariantShows) {
        return function(dictShow) {
          return {
            variantShows: function(v) {
              return new Data_List_Types.Cons(Data_Show.show(dictShow), variantShows(dictVariantShows)(Type_Proxy["Proxy"].value));
            }
          };
        };
      };
      var showVariant = function(dictRowToList) {
        return function(dictVariantTags) {
          return function(dictVariantShows) {
            return {
              show: function(v1) {
                var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Proxy["Proxy"].value);
                var shows = variantShows(dictVariantShows)(Type_Proxy["Proxy"].value);
                var body = Data_Variant_Internal.lookup("show")(v1.type)(tags)(shows)(v1.value);
                return "(inj @" + (Data_Show.show(Data_Show.showString)(v1.type) + (" " + (body + ")")));
              }
            };
          };
        };
      };
      var ordVariantNil = {
        variantOrds: function(v) {
          return Data_List_Types.Nil.value;
        }
      };
      var ordVariantCons = function(dictVariantOrds) {
        return function(dictOrd) {
          return {
            variantOrds: function(v) {
              return new Data_List_Types.Cons(Data_Ord.compare(dictOrd), variantOrds(dictVariantOrds)(Type_Proxy["Proxy"].value));
            }
          };
        };
      };
      var onMatch = function(dictRowToList) {
        return function(dictVariantMatchCases) {
          return function(dictUnion) {
            return function(r) {
              return function(k) {
                return function(v) {
                  if (Record_Unsafe.unsafeHas(v.type)(r)) {
                    return Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                  }
                  ;
                  return k(v);
                };
              };
            };
          };
        };
      };
      var on = function(dictCons) {
        return function(dictIsSymbol) {
          return function(p) {
            return function(f) {
              return function(g) {
                return function(r) {
                  if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
                    return f(r.value);
                  }
                  ;
                  return g(r);
                };
              };
            };
          };
        };
      };
      var prj = function(dictCons) {
        return function(dictIsSymbol) {
          return function(dictAlternative) {
            return function(p) {
              return on()(dictIsSymbol)(p)(Control_Applicative.pure(dictAlternative.Applicative0()))(Data_Function["const"](Control_Plus.empty(dictAlternative.Plus1())));
            };
          };
        };
      };
      var inj = function(dictCons) {
        return function(dictIsSymbol) {
          return function(p) {
            return function(value) {
              return {
                type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                value
              };
            };
          };
        };
      };
      var revariant = function(v) {
        return v(function(dictIsSymbol) {
          return function(dictCons) {
            return inj()(dictIsSymbol);
          };
        });
      };
      var expand = function(dictUnion) {
        return Unsafe_Coerce.unsafeCoerce;
      };
      var eqVariantNil = {
        variantEqs: function(v) {
          return Data_List_Types.Nil.value;
        }
      };
      var eqVariantCons = function(dictVariantEqs) {
        return function(dictEq) {
          return {
            variantEqs: function(v) {
              return new Data_List_Types.Cons(Data_Eq.eq(dictEq), variantEqs(dictVariantEqs)(Type_Proxy["Proxy"].value));
            }
          };
        };
      };
      var eqVariant = function(dictRowToList) {
        return function(dictVariantTags) {
          return function(dictVariantEqs) {
            return {
              eq: function(v1) {
                return function(v2) {
                  var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Proxy["Proxy"].value);
                  var eqs = variantEqs(dictVariantEqs)(Type_Proxy["Proxy"].value);
                  return Data_Variant_Internal.lookupEq(tags)(eqs)(v1)(v2);
                };
              }
            };
          };
        };
      };
      var ordVariant = function(dictRowToList) {
        return function(dictVariantTags) {
          return function(dictVariantEqs) {
            return function(dictVariantOrds) {
              return {
                compare: function(v1) {
                  return function(v2) {
                    var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Proxy["Proxy"].value);
                    var ords = variantOrds(dictVariantOrds)(Type_Proxy["Proxy"].value);
                    return Data_Variant_Internal.lookupOrd(tags)(ords)(v1)(v2);
                  };
                },
                Eq0: function() {
                  return eqVariant()(dictVariantTags)(dictVariantEqs);
                }
              };
            };
          };
        };
      };
      var enumVariant = function(dictRowToList) {
        return function(dictVariantTags) {
          return function(dictVariantEqs) {
            return function(dictVariantOrds) {
              return function(dictVariantBoundedEnums) {
                return {
                  pred: function(a) {
                    var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Proxy["Proxy"].value);
                    var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Proxy["Proxy"].value);
                    var bounds = variantBounded(dictVariantBoundedEnums.VariantBounded0())(Type_Proxy["Proxy"].value);
                    return Data_Variant_Internal.lookupPred(a)(tags)(bounds)(dicts);
                  },
                  succ: function(a) {
                    var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Proxy["Proxy"].value);
                    var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Proxy["Proxy"].value);
                    var bounds = variantBounded(dictVariantBoundedEnums.VariantBounded0())(Type_Proxy["Proxy"].value);
                    return Data_Variant_Internal.lookupSucc(a)(tags)(bounds)(dicts);
                  },
                  Ord0: function() {
                    return ordVariant()(dictVariantTags)(dictVariantEqs)(dictVariantOrds);
                  }
                };
              };
            };
          };
        };
      };
      var $$default = function(a) {
        return function(v) {
          return a;
        };
      };
      var contract = function(dictAlternative) {
        return function(dictContractable) {
          return function(v) {
            return Data_Variant_Internal.contractWith(dictContractable)(dictAlternative)(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(v.type)(v);
          };
        };
      };
      var case_ = function(r) {
        return Partial_Unsafe.unsafeCrashWith("Data.Variant: pattern match failure [" + (r.type + "]"));
      };
      var match = function(dictRowToList) {
        return function(dictVariantMatchCases) {
          return function(dictUnion) {
            return function(r) {
              return onMatch()()()(r)(case_);
            };
          };
        };
      };
      var boundedVariantNil = {
        variantBounded: function(v) {
          return Data_List_Types.Nil.value;
        }
      };
      var enumVariantNil = {
        variantBoundedEnums: function(v) {
          return Data_List_Types.Nil.value;
        },
        VariantBounded0: function() {
          return boundedVariantNil;
        }
      };
      var boundedVariantCons = function(dictVariantBounded) {
        return function(dictBounded) {
          return {
            variantBounded: function(v) {
              var dict = {
                top: Data_Bounded.top(dictBounded),
                bottom: Data_Bounded.bottom(dictBounded)
              };
              return new Data_List_Types.Cons(dict, variantBounded(dictVariantBounded)(Type_Proxy["Proxy"].value));
            }
          };
        };
      };
      var enumVariantCons = function(dictVariantBoundedEnums) {
        return function(dictBoundedEnum) {
          return {
            variantBoundedEnums: function(v) {
              var dict = {
                pred: Data_Enum.pred(dictBoundedEnum.Enum1()),
                succ: Data_Enum.succ(dictBoundedEnum.Enum1()),
                fromEnum: Data_Enum.fromEnum(dictBoundedEnum),
                toEnum: Data_Enum.toEnum(dictBoundedEnum),
                cardinality: Data_Enum.cardinality(dictBoundedEnum)
              };
              return new Data_List_Types.Cons(dict, variantBoundedEnums(dictVariantBoundedEnums)(Type_Proxy["Proxy"].value));
            },
            VariantBounded0: function() {
              return boundedVariantCons(dictVariantBoundedEnums.VariantBounded0())(dictBoundedEnum.Bounded0());
            }
          };
        };
      };
      var boundedVariant = function(dictRowToList) {
        return function(dictVariantTags) {
          return function(dictVariantEqs) {
            return function(dictVariantOrds) {
              return function(dictVariantBounded) {
                return {
                  top: function() {
                    var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Proxy["Proxy"].value);
                    var dicts = variantBounded(dictVariantBounded)(Type_Proxy["Proxy"].value);
                    return Data_Variant_Internal.VariantRep(Data_Variant_Internal.lookupLast("top")(function(v) {
                      return v.top;
                    })(tags)(dicts));
                  }(),
                  bottom: function() {
                    var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Proxy["Proxy"].value);
                    var dicts = variantBounded(dictVariantBounded)(Type_Proxy["Proxy"].value);
                    return Data_Variant_Internal.VariantRep(Data_Variant_Internal.lookupFirst("bottom")(function(v) {
                      return v.bottom;
                    })(tags)(dicts));
                  }(),
                  Ord0: function() {
                    return ordVariant()(dictVariantTags)(dictVariantEqs)(dictVariantOrds);
                  }
                };
              };
            };
          };
        };
      };
      var boundedEnumVariant = function(dictRowToList) {
        return function(dictVariantTags) {
          return function(dictVariantEqs) {
            return function(dictVariantOrds) {
              return function(dictVariantBoundedEnums) {
                return {
                  cardinality: Data_Enum.Cardinality(Data_Variant_Internal.lookupCardinality(variantBoundedEnums(dictVariantBoundedEnums)(Type_Proxy["Proxy"].value))),
                  fromEnum: function(a) {
                    var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Proxy["Proxy"].value);
                    var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Proxy["Proxy"].value);
                    return Data_Variant_Internal.lookupFromEnum(a)(tags)(dicts);
                  },
                  toEnum: function(n) {
                    var tags = Data_Variant_Internal.variantTags(dictVariantTags)(Type_Proxy["Proxy"].value);
                    var dicts = variantBoundedEnums(dictVariantBoundedEnums)(Type_Proxy["Proxy"].value);
                    return Data_Variant_Internal.lookupToEnum(n)(tags)(dicts);
                  },
                  Bounded0: function() {
                    return boundedVariant()(dictVariantTags)(dictVariantEqs)(dictVariantOrds)(dictVariantBoundedEnums.VariantBounded0());
                  },
                  Enum1: function() {
                    return enumVariant()(dictVariantTags)(dictVariantEqs)(dictVariantOrds)(dictVariantBoundedEnums);
                  }
                };
              };
            };
          };
        };
      };
      module.exports = {
        inj,
        prj,
        on,
        onMatch,
        case_,
        match,
        "default": $$default,
        expand,
        contract,
        Unvariant,
        unvariant,
        revariant,
        variantEqs,
        variantOrds,
        variantShows,
        variantBounded,
        variantBoundedEnums,
        eqVariantNil,
        eqVariantCons,
        eqVariant,
        boundedVariantNil,
        boundedVariantCons,
        boundedVariant,
        enumVariantNil,
        enumVariantCons,
        enumVariant,
        boundedEnumVariant,
        ordVariantNil,
        ordVariantCons,
        ordVariant,
        showVariantNil,
        showVariantCons,
        showVariant
      };
    }
  });

  // output/Record.Builder/foreign.js
  var require_foreign39 = __commonJS({
    "output/Record.Builder/foreign.js"(exports) {
      "use strict";
      exports.copyRecord = function(rec) {
        var copy = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy[key] = rec[key];
          }
        }
        return copy;
      };
      exports.unsafeInsert = function(l) {
        return function(a) {
          return function(rec) {
            rec[l] = a;
            return rec;
          };
        };
      };
      exports.unsafeModify = function(l) {
        return function(f) {
          return function(rec) {
            rec[l] = f(rec[l]);
            return rec;
          };
        };
      };
      exports.unsafeDelete = function(l) {
        return function(rec) {
          delete rec[l];
          return rec;
        };
      };
      exports.unsafeRename = function(l1) {
        return function(l2) {
          return function(rec) {
            rec[l2] = rec[l1];
            delete rec[l1];
            return rec;
          };
        };
      };
    }
  });

  // output/Record.Unsafe.Union/foreign.js
  var require_foreign40 = __commonJS({
    "output/Record.Unsafe.Union/foreign.js"(exports) {
      "use strict";
      exports.unsafeUnionFn = function(r1, r2) {
        var copy = {};
        for (var k1 in r2) {
          if ({}.hasOwnProperty.call(r2, k1)) {
            copy[k1] = r2[k1];
          }
        }
        for (var k2 in r1) {
          if ({}.hasOwnProperty.call(r1, k2)) {
            copy[k2] = r1[k2];
          }
        }
        return copy;
      };
    }
  });

  // output/Data.Function.Uncurried/foreign.js
  var require_foreign41 = __commonJS({
    "output/Data.Function.Uncurried/foreign.js"(exports) {
      "use strict";
      exports.mkFn0 = function(fn) {
        return function() {
          return fn();
        };
      };
      exports.mkFn2 = function(fn) {
        return function(a, b) {
          return fn(a)(b);
        };
      };
      exports.mkFn3 = function(fn) {
        return function(a, b, c) {
          return fn(a)(b)(c);
        };
      };
      exports.mkFn4 = function(fn) {
        return function(a, b, c, d) {
          return fn(a)(b)(c)(d);
        };
      };
      exports.mkFn5 = function(fn) {
        return function(a, b, c, d, e) {
          return fn(a)(b)(c)(d)(e);
        };
      };
      exports.mkFn6 = function(fn) {
        return function(a, b, c, d, e, f) {
          return fn(a)(b)(c)(d)(e)(f);
        };
      };
      exports.mkFn7 = function(fn) {
        return function(a, b, c, d, e, f, g) {
          return fn(a)(b)(c)(d)(e)(f)(g);
        };
      };
      exports.mkFn8 = function(fn) {
        return function(a, b, c, d, e, f, g, h) {
          return fn(a)(b)(c)(d)(e)(f)(g)(h);
        };
      };
      exports.mkFn9 = function(fn) {
        return function(a, b, c, d, e, f, g, h, i) {
          return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);
        };
      };
      exports.mkFn10 = function(fn) {
        return function(a, b, c, d, e, f, g, h, i, j) {
          return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);
        };
      };
      exports.runFn0 = function(fn) {
        return fn();
      };
      exports.runFn2 = function(fn) {
        return function(a) {
          return function(b) {
            return fn(a, b);
          };
        };
      };
      exports.runFn3 = function(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return fn(a, b, c);
            };
          };
        };
      };
      exports.runFn4 = function(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return fn(a, b, c, d);
              };
            };
          };
        };
      };
      exports.runFn5 = function(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return fn(a, b, c, d, e);
                };
              };
            };
          };
        };
      };
      exports.runFn6 = function(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function(f) {
                    return fn(a, b, c, d, e, f);
                  };
                };
              };
            };
          };
        };
      };
      exports.runFn7 = function(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function(f) {
                    return function(g) {
                      return fn(a, b, c, d, e, f, g);
                    };
                  };
                };
              };
            };
          };
        };
      };
      exports.runFn8 = function(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function(f) {
                    return function(g) {
                      return function(h) {
                        return fn(a, b, c, d, e, f, g, h);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      exports.runFn9 = function(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function(f) {
                    return function(g) {
                      return function(h) {
                        return function(i) {
                          return fn(a, b, c, d, e, f, g, h, i);
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      exports.runFn10 = function(fn) {
        return function(a) {
          return function(b) {
            return function(c) {
              return function(d) {
                return function(e) {
                  return function(f) {
                    return function(g) {
                      return function(h) {
                        return function(i) {
                          return function(j) {
                            return fn(a, b, c, d, e, f, g, h, i, j);
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
    }
  });

  // output/Data.Function.Uncurried/index.js
  var require_Data_Function = __commonJS({
    "output/Data.Function.Uncurried/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign41();
      var runFn1 = function(f) {
        return f;
      };
      var mkFn1 = function(f) {
        return f;
      };
      module.exports = {
        mkFn1,
        runFn1,
        mkFn0: $foreign.mkFn0,
        mkFn2: $foreign.mkFn2,
        mkFn3: $foreign.mkFn3,
        mkFn4: $foreign.mkFn4,
        mkFn5: $foreign.mkFn5,
        mkFn6: $foreign.mkFn6,
        mkFn7: $foreign.mkFn7,
        mkFn8: $foreign.mkFn8,
        mkFn9: $foreign.mkFn9,
        mkFn10: $foreign.mkFn10,
        runFn0: $foreign.runFn0,
        runFn2: $foreign.runFn2,
        runFn3: $foreign.runFn3,
        runFn4: $foreign.runFn4,
        runFn5: $foreign.runFn5,
        runFn6: $foreign.runFn6,
        runFn7: $foreign.runFn7,
        runFn8: $foreign.runFn8,
        runFn9: $foreign.runFn9,
        runFn10: $foreign.runFn10
      };
    }
  });

  // output/Record.Unsafe.Union/index.js
  var require_Record_Unsafe = __commonJS({
    "output/Record.Unsafe.Union/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign40();
      var Data_Function_Uncurried = require_Data_Function();
      var unsafeUnion = Data_Function_Uncurried.runFn2($foreign.unsafeUnionFn);
      module.exports = {
        unsafeUnion,
        unsafeUnionFn: $foreign.unsafeUnionFn
      };
    }
  });

  // output/Record.Builder/index.js
  var require_Record2 = __commonJS({
    "output/Record.Builder/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign39();
      var Control_Category = require_Control2();
      var Control_Semigroupoid = require_Control();
      var Data_Function = require_Data2();
      var Data_Symbol = require_Data5();
      var Record_Unsafe_Union = require_Record_Unsafe();
      var Unsafe_Coerce = require_Unsafe();
      var union = function(dictUnion) {
        return function(r1) {
          return function(r2) {
            return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
          };
        };
      };
      var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;
      var rename = function(dictIsSymbol) {
        return function(dictIsSymbol1) {
          return function(dictCons) {
            return function(dictLacks) {
              return function(dictCons1) {
                return function(dictLacks1) {
                  return function(l1) {
                    return function(l2) {
                      return function(r1) {
                        return $foreign.unsafeRename(Data_Symbol.reflectSymbol(dictIsSymbol)(l1))(Data_Symbol.reflectSymbol(dictIsSymbol1)(l2))(r1);
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var nub = function(dictNub) {
        return Unsafe_Coerce.unsafeCoerce;
      };
      var modify = function(dictCons) {
        return function(dictCons1) {
          return function(dictIsSymbol) {
            return function(l) {
              return function(f) {
                return function(r1) {
                  return $foreign.unsafeModify(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(f)(r1);
                };
              };
            };
          };
        };
      };
      var merge = function(dictUnion) {
        return function(dictNub) {
          return function(r1) {
            return function(r2) {
              return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
            };
          };
        };
      };
      var insert = function(dictCons) {
        return function(dictLacks) {
          return function(dictIsSymbol) {
            return function(l) {
              return function(a) {
                return function(r1) {
                  return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                };
              };
            };
          };
        };
      };
      var disjointUnion = function(dictUnion) {
        return function(dictNub) {
          return function(r1) {
            return function(r2) {
              return Record_Unsafe_Union.unsafeUnionFn(r1, r2);
            };
          };
        };
      };
      var $$delete = function(dictIsSymbol) {
        return function(dictLacks) {
          return function(dictCons) {
            return function(l) {
              return function(r2) {
                return $foreign.unsafeDelete(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r2);
              };
            };
          };
        };
      };
      var categoryBuilder = Control_Category.categoryFn;
      var build = function(v) {
        return function(r1) {
          return v($foreign.copyRecord(r1));
        };
      };
      var buildFromScratch = Data_Function.flip(build)({});
      var flip = function(f) {
        return function(b) {
          return function(a) {
            return build(f(a))(b);
          };
        };
      };
      module.exports = {
        build,
        buildFromScratch,
        flip,
        insert,
        modify,
        "delete": $$delete,
        rename,
        merge,
        union,
        disjointUnion,
        nub,
        semigroupoidBuilder,
        categoryBuilder
      };
    }
  });

  // output/Heterogeneous.Mapping/index.js
  var require_Heterogeneous = __commonJS({
    "output/Heterogeneous.Mapping/index.js"(exports, module) {
      "use strict";
      var Control_Category = require_Control2();
      var Control_Semigroupoid = require_Control();
      var Data_Either = require_Data19();
      var Data_Functor = require_Data4();
      var Data_Functor_Variant = require_Data_Functor6();
      var Data_FunctorWithIndex = require_Data29();
      var Data_Tuple = require_Data22();
      var Data_Variant = require_Data38();
      var Record_Builder = require_Record2();
      var Type_Proxy = require_Type();
      var ConstMapping = function(x) {
        return x;
      };
      var mappingWithIndex = function(dict) {
        return dict.mappingWithIndex;
      };
      var mappingFunction = {
        mapping: function(k) {
          return k;
        }
      };
      var mapping = function(dict) {
        return dict.mapping;
      };
      var mapVariantWithIndexNil = {
        mapVariantWithIndex: function(v) {
          return function(v1) {
            return Data_Variant.case_;
          };
        }
      };
      var mapVariantWithIndex = function(dict) {
        return dict.mapVariantWithIndex;
      };
      var mapVariantWithIndexCons = function(dictIsSymbol) {
        return function(dictCons) {
          return function(dictCons1) {
            return function(dictMappingWithIndex) {
              return function(dictMapVariantWithIndex) {
                return {
                  mapVariantWithIndex: function(v) {
                    return function(fn) {
                      return Data_Variant.on()(dictIsSymbol)(Type_Proxy["Proxy"].value)(function() {
                        var $72 = Data_Variant.inj()(dictIsSymbol)(Type_Proxy["Proxy"].value);
                        var $73 = mappingWithIndex(dictMappingWithIndex)(fn)(Type_Proxy["Proxy"].value);
                        return function($74) {
                          return $72($73($74));
                        };
                      }())(mapVariantWithIndex(dictMapVariantWithIndex)(Type_Proxy["Proxy"].value)(fn));
                    };
                  }
                };
              };
            };
          };
        };
      };
      var mapVariantFWithIndexNil = {
        mapVariantFWithIndex: function(v) {
          return function(v1) {
            return Data_Functor_Variant.case_;
          };
        }
      };
      var mapVariantFWithIndex = function(dict) {
        return dict.mapVariantFWithIndex;
      };
      var mapVariantFWithIndexCons = function(dictIsSymbol) {
        return function(dictCons) {
          return function(dictCons1) {
            return function(dictMappingWithIndex) {
              return function(dictMapVariantFWithIndex) {
                return function(dictFunctor) {
                  return {
                    mapVariantFWithIndex: function(v) {
                      return function(fn) {
                        return Data_Functor_Variant.on()(dictIsSymbol)(Type_Proxy["Proxy"].value)(function() {
                          var $75 = Data_Functor_Variant.inj()(dictIsSymbol)(dictFunctor)(Type_Proxy["Proxy"].value);
                          var $76 = mappingWithIndex(dictMappingWithIndex)(fn)(Type_Proxy["Proxy"].value);
                          return function($77) {
                            return $75($76($77));
                          };
                        }())(mapVariantFWithIndex(dictMapVariantFWithIndex)(Type_Proxy["Proxy"].value)(fn));
                      };
                    }
                  };
                };
              };
            };
          };
        };
      };
      var mapRecordWithIndexNil = {
        mapRecordWithIndexBuilder: function(v) {
          return function(v1) {
            return Control_Category.identity(Record_Builder.categoryBuilder);
          };
        }
      };
      var mapRecordWithIndexBuilder = function(dict) {
        return dict.mapRecordWithIndexBuilder;
      };
      var mapRecordWithIndexCons = function(dictIsSymbol) {
        return function(dictMappingWithIndex) {
          return function(dictMapRecordWithIndex) {
            return function(dictCons) {
              return function(dictCons1) {
                return {
                  mapRecordWithIndexBuilder: function(v) {
                    return function(f) {
                      return Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.modify()()(dictIsSymbol)(Type_Proxy["Proxy"].value)(mappingWithIndex(dictMappingWithIndex)(f)(Type_Proxy["Proxy"].value)))(mapRecordWithIndexBuilder(dictMapRecordWithIndex)(Type_Proxy["Proxy"].value)(f));
                    };
                  }
                };
              };
            };
          };
        };
      };
      var hmapWithIndexVariantF = function(dictRowToList) {
        return function(dictMapVariantFWithIndex) {
          return {
            hmapWithIndex: mapVariantFWithIndex(dictMapVariantFWithIndex)(Type_Proxy["Proxy"].value)
          };
        };
      };
      var hmapWithIndexVariant = function(dictRowToList) {
        return function(dictMapVariantWithIndex) {
          return {
            hmapWithIndex: mapVariantWithIndex(dictMapVariantWithIndex)(Type_Proxy["Proxy"].value)
          };
        };
      };
      var hmapWithIndexRecord = function(dictRowToList) {
        return function(dictMapRecordWithIndex) {
          return {
            hmapWithIndex: function() {
              var $78 = mapRecordWithIndexBuilder(dictMapRecordWithIndex)(Type_Proxy["Proxy"].value);
              return function($79) {
                return Record_Builder.build($78($79));
              };
            }()
          };
        };
      };
      var hmapWithIndexApp = function(dictFunctorWithIndex) {
        return function(dictMappingWithIndex) {
          return {
            hmapWithIndex: function(f) {
              return function(v) {
                return Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex)(mappingWithIndex(dictMappingWithIndex)(f))(v);
              };
            }
          };
        };
      };
      var hmapWithIndex = function(dict) {
        return dict.hmapWithIndex;
      };
      var hmapVariantF = function(dictRowToList) {
        return function(dictMapVariantFWithIndex) {
          return {
            hmap: function() {
              var $80 = mapVariantFWithIndex(dictMapVariantFWithIndex)(Type_Proxy["Proxy"].value);
              return function($81) {
                return $80(ConstMapping($81));
              };
            }()
          };
        };
      };
      var hmapVariant = function(dictRowToList) {
        return function(dictMapVariantWithIndex) {
          return {
            hmap: function() {
              var $82 = mapVariantWithIndex(dictMapVariantWithIndex)(Type_Proxy["Proxy"].value);
              return function($83) {
                return $82(ConstMapping($83));
              };
            }()
          };
        };
      };
      var hmapTuple = function(dictMapping) {
        return function(dictMapping1) {
          return {
            hmap: function(fn) {
              return function(v) {
                return new Data_Tuple.Tuple(mapping(dictMapping)(fn)(v.value0), mapping(dictMapping1)(fn)(v.value1));
              };
            }
          };
        };
      };
      var hmapRecord = function(dictRowToList) {
        return function(dictMapRecordWithIndex) {
          return {
            hmap: function() {
              var $84 = mapRecordWithIndexBuilder(dictMapRecordWithIndex)(Type_Proxy["Proxy"].value);
              return function($85) {
                return Record_Builder.build($84(ConstMapping($85)));
              };
            }()
          };
        };
      };
      var hmapEither = function(dictMapping) {
        return function(dictMapping1) {
          return {
            hmap: function(fn) {
              return function(v) {
                if (v instanceof Data_Either.Left) {
                  return new Data_Either.Left(mapping(dictMapping)(fn)(v.value0));
                }
                ;
                if (v instanceof Data_Either.Right) {
                  return new Data_Either.Right(mapping(dictMapping1)(fn)(v.value0));
                }
                ;
                throw new Error("Failed pattern match at Heterogeneous.Mapping (line 119, column 13 - line 121, column 36): " + [v.constructor.name]);
              };
            }
          };
        };
      };
      var hmapApp = function(dictFunctor) {
        return function(dictMapping) {
          return {
            hmap: function(f) {
              return function(v) {
                return Data_Functor.map(dictFunctor)(mapping(dictMapping)(f))(v);
              };
            }
          };
        };
      };
      var hmap = function(dict) {
        return dict.hmap;
      };
      var constMapping = function(dictMapping) {
        return {
          mappingWithIndex: function(v) {
            return function(v1) {
              return mapping(dictMapping)(v);
            };
          }
        };
      };
      module.exports = {
        hmap,
        hmapWithIndex,
        mapRecordWithIndexBuilder,
        mapVariantFWithIndex,
        mapVariantWithIndex,
        mapping,
        mappingWithIndex,
        ConstMapping,
        mappingFunction,
        constMapping,
        hmapApp,
        hmapWithIndexApp,
        hmapRecord,
        hmapWithIndexRecord,
        mapRecordWithIndexCons,
        mapRecordWithIndexNil,
        hmapTuple,
        hmapEither,
        hmapVariant,
        hmapWithIndexVariant,
        mapVariantWithIndexCons,
        mapVariantWithIndexNil,
        hmapVariantF,
        hmapWithIndexVariantF,
        mapVariantFWithIndexCons,
        mapVariantFWithIndexNil
      };
    }
  });

  // output/React.Basic.DOM.Internal/foreign.js
  var require_foreign42 = __commonJS({
    "output/React.Basic.DOM.Internal/foreign.js"(exports) {
      "use strict";
      var React = require_react();
      exports.mergeStyles = (styles) => Object.assign.apply(null, [{}].concat(styles));
      exports.unsafeCreateDOMComponent_ = (createElement) => (el) => {
        const flattenDataProp = (props, ref) => {
          var data = null;
          if (props._data != null) {
            data = { _data: void 0 };
            Object.entries(props._data).forEach(function(entry) {
              data["data-" + entry[0]] = entry[1];
            });
          }
          var aria = null;
          if (props._aria != null) {
            aria = { _aria: void 0 };
            Object.entries(props._aria).forEach(function(entry) {
              aria["aria-" + entry[0]] = entry[1];
            });
          }
          return Object.assign({ ref }, props, data, aria);
        };
        return () => {
          const c = React.forwardRef((props, ref) => createElement(el)(flattenDataProp(props, ref)));
          c.displayName = el;
          return c;
        };
      };
    }
  });

  // output/React.Basic/foreign.js
  var require_foreign43 = __commonJS({
    "output/React.Basic/foreign.js"(exports) {
      "use strict";
      var React = require_react();
      var createElement = React.createElement;
      var Fragment = React.Fragment;
      exports.empty = null;
      exports.keyed = (key) => (child) => createElement(Fragment, { key }, child);
      exports.element = (component) => (props) => Array.isArray(props.children) ? createElement.apply(null, [component, props].concat(props.children)) : createElement(component, props);
      exports.elementKeyed = (component) => (props) => createElement(component, props);
      exports.fragment = (children) => createElement.apply(null, [Fragment, null].concat(children));
      exports.createContext = (defaultValue) => () => React.createContext(defaultValue);
      exports.contextProvider = (context) => context.Provider;
      exports.contextConsumer = (context) => context.Consumer;
    }
  });

  // output/React.Basic/index.js
  var require_React = __commonJS({
    "output/React.Basic/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign43();
      var semigroupJSX = {
        append: function(a) {
          return function(b) {
            return $foreign.fragment([a, b]);
          };
        }
      };
      var provider = function(context) {
        return function(value) {
          return function(children) {
            return $foreign.element($foreign.contextProvider(context))({
              value,
              children
            });
          };
        };
      };
      var monoidJSX = {
        mempty: $foreign.empty,
        Semigroup0: function() {
          return semigroupJSX;
        }
      };
      var consumer = function(context) {
        return function(children) {
          return $foreign.element($foreign.contextConsumer(context))({
            children
          });
        };
      };
      module.exports = {
        provider,
        consumer,
        semigroupJSX,
        monoidJSX,
        empty: $foreign.empty,
        keyed: $foreign.keyed,
        fragment: $foreign.fragment,
        element: $foreign.element,
        elementKeyed: $foreign.elementKeyed,
        createContext: $foreign.createContext,
        contextProvider: $foreign.contextProvider,
        contextConsumer: $foreign.contextConsumer
      };
    }
  });

  // output/React.Basic.DOM.Internal/index.js
  var require_React_Basic_DOM = __commonJS({
    "output/React.Basic.DOM.Internal/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign42();
      var React_Basic = require_React();
      var Unsafe_Coerce = require_Unsafe();
      var unsafeCreateDOMComponent = $foreign.unsafeCreateDOMComponent_(React_Basic.element);
      var semigroupCSS = {
        append: function(a) {
          return function(b) {
            return $foreign.mergeStyles([b, a]);
          };
        }
      };
      var css = Unsafe_Coerce.unsafeCoerce;
      var monoidCSS = {
        mempty: css({}),
        Semigroup0: function() {
          return semigroupCSS;
        }
      };
      module.exports = {
        css,
        unsafeCreateDOMComponent,
        semigroupCSS,
        monoidCSS,
        mergeStyles: $foreign.mergeStyles,
        unsafeCreateDOMComponent_: $foreign.unsafeCreateDOMComponent_
      };
    }
  });

  // output/Untagged.Castable/index.js
  var require_Untagged = __commonJS({
    "output/Untagged.Castable/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var castableRecordRLNil = {};
      var castableRecordRLConsOptional = function(dictCastableRecordRL) {
        return function(dictCastable) {
          return {};
        };
      };
      var castableRecordRLConsDirect = function(dictCastableRecordRL) {
        return {};
      };
      var castableRecordRLConsCastable = function(dictCastableRecordRL) {
        return function(dictCastable) {
          return {};
        };
      };
      var castableRecord = function(dictRowToList) {
        return function(dictRowToList1) {
          return function(dictCastableRecordRL) {
            return {};
          };
        };
      };
      var castableIntNumber = {};
      var castableForeign = {};
      var castableCharString = {};
      var cast = function(dictCastable) {
        return Unsafe_Coerce.unsafeCoerce;
      };
      module.exports = {
        cast,
        castableIntNumber,
        castableCharString,
        castableRecord,
        castableForeign,
        castableRecordRLNil,
        castableRecordRLConsDirect,
        castableRecordRLConsCastable,
        castableRecordRLConsOptional
      };
    }
  });

  // output/Framer.Motion.Types/index.js
  var require_Framer_Motion2 = __commonJS({
    "output/Framer.Motion.Types/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign18();
      var Data_Symbol = require_Data5();
      var Effect_Uncurried = require_Effect4();
      var Foreign = require_Foreign();
      var Heterogeneous_Mapping = require_Heterogeneous();
      var React_Basic_DOM_Internal = require_React_Basic_DOM();
      var Untagged_Castable = require_Untagged();
      var VariantLabel = function(x) {
        return x;
      };
      var Target = function() {
        function Target2() {
        }
        ;
        Target2.value = new Target2();
        return Target2;
      }();
      var MakeVariantLabel = function() {
        function MakeVariantLabel2() {
        }
        ;
        MakeVariantLabel2.value = new MakeVariantLabel2();
        return MakeVariantLabel2;
      }();
      var AnimateSharedLayoutType = function(x) {
        return x;
      };
      var whileTap = function(dictCastable) {
        return Untagged_Castable.cast();
      };
      var whileHover = function(dictCastable) {
        return Untagged_Castable.cast();
      };
      var variantsFromObject = function() {
        var $26 = Untagged_Castable.cast();
        return function($27) {
          return $26($27);
        };
      }();
      var variants = function() {
        var $28 = Untagged_Castable.cast();
        return function($29) {
          return $28(React_Basic_DOM_Internal.css($29));
        };
      }();
      var transition = function() {
        var $30 = Untagged_Castable.cast();
        return function($31) {
          return $30(React_Basic_DOM_Internal.css($31));
        };
      }();
      var toEffectFn = function(dict) {
        return dict.toEffectFn;
      };
      var $$switch = "switch";
      var prop = function(dictCastable) {
        return Untagged_Castable.cast();
      };
      var onTapCancel = function(fn2) {
        return Untagged_Castable.cast()(Effect_Uncurried.mkEffectFn2(fn2));
      };
      var onTap = function(fn2) {
        return Untagged_Castable.cast()(Effect_Uncurried.mkEffectFn2(fn2));
      };
      var onPan = function(fn2) {
        return Untagged_Castable.cast()(Effect_Uncurried.mkEffectFn2(fn2));
      };
      var onLayoutAnimationComplete = Untagged_Castable.cast();
      var onDrag = function(fn2) {
        return Untagged_Castable.cast()(Effect_Uncurried.mkEffectFn2(fn2));
      };
      var onAnimationStart = Untagged_Castable.cast();
      var makeVariantLabels$prime = function(dictIsSymbol) {
        return {
          mappingWithIndex: function(v) {
            return function(prop$prime) {
              return function(v1) {
                return Data_Symbol.reflectSymbol(dictIsSymbol)(prop$prime);
              };
            };
          }
        };
      };
      var makeVariantLabels = function(dictHMapWithIndex) {
        return Heterogeneous_Mapping.hmapWithIndex(dictHMapWithIndex)(MakeVariantLabel.value);
      };
      var layoutId = function(dictCastable) {
        return Untagged_Castable.cast();
      };
      var layout = function(dictCastable) {
        return Untagged_Castable.cast();
      };
      var initial = function(dictCastable) {
        return Untagged_Castable.cast();
      };
      var exit = function(dictCastable) {
        return Untagged_Castable.cast();
      };
      var dragPropagation = function(dictCastable) {
        return Untagged_Castable.cast();
      };
      var dragMomentum = function(dictCastable) {
        return Untagged_Castable.cast();
      };
      var dragElasticBoundingBox = function(dictCastable) {
        return function(x) {
          return Untagged_Castable.cast()(Untagged_Castable.cast()(x));
        };
      };
      var dragElastic = function(dictCastable) {
        return Untagged_Castable.cast();
      };
      var dragConstraintsBoundingBox = function(dictCastable) {
        return function(x) {
          return Untagged_Castable.cast()(Untagged_Castable.cast()(x));
        };
      };
      var dragConstraints = function(dictCastable) {
        return Untagged_Castable.cast();
      };
      var drag = function(dictCastable) {
        return Untagged_Castable.cast();
      };
      var customProp = Foreign.unsafeToForeign;
      var crossfade = "crossfade";
      var callbackableEffectFn2 = {
        toEffectFn: Effect_Uncurried.mkEffectFn2
      };
      var onDragEnd = function() {
        var $32 = Untagged_Castable.cast();
        var $33 = toEffectFn(callbackableEffectFn2);
        return function($34) {
          return $32($33($34));
        };
      }();
      var onDragStart = function() {
        var $35 = Untagged_Castable.cast();
        var $36 = toEffectFn(callbackableEffectFn2);
        return function($37) {
          return $35($36($37));
        };
      }();
      var onHoverEnd = function() {
        var $38 = Untagged_Castable.cast();
        var $39 = toEffectFn(callbackableEffectFn2);
        return function($40) {
          return $38($39($40));
        };
      }();
      var onHoverStart = function() {
        var $41 = Untagged_Castable.cast();
        var $42 = toEffectFn(callbackableEffectFn2);
        return function($43) {
          return $41($42($43));
        };
      }();
      var onPanEnd = function() {
        var $44 = Untagged_Castable.cast();
        var $45 = toEffectFn(callbackableEffectFn2);
        return function($46) {
          return $44($45($46));
        };
      }();
      var onPanStart = function() {
        var $47 = Untagged_Castable.cast();
        var $48 = toEffectFn(callbackableEffectFn2);
        return function($49) {
          return $47($48($49));
        };
      }();
      var onTapEnd = function() {
        var $50 = Untagged_Castable.cast();
        var $51 = toEffectFn(callbackableEffectFn2);
        return function($52) {
          return $50($51($52));
        };
      }();
      var onTapStart = function() {
        var $53 = Untagged_Castable.cast();
        var $54 = toEffectFn(callbackableEffectFn2);
        return function($55) {
          return $53($54($55));
        };
      }();
      var onViewportBoxUpdate = function() {
        var $56 = Untagged_Castable.cast();
        var $57 = toEffectFn(callbackableEffectFn2);
        return function($58) {
          return $56($57($58));
        };
      }();
      var callbackableEffectFn1 = {
        toEffectFn: Effect_Uncurried.mkEffectFn1
      };
      var onAnimationComplete = function() {
        var $59 = Untagged_Castable.cast();
        var $60 = toEffectFn(callbackableEffectFn1);
        return function($61) {
          return $59($60($61));
        };
      }();
      var callback = function(dictCastable) {
        return function(dictEffectFnMaker) {
          var $62 = Untagged_Castable.cast();
          var $63 = toEffectFn(dictEffectFnMaker);
          return function($64) {
            return $62($63($64));
          };
        };
      };
      var boundingBox2D = function(dictCastable) {
        return Untagged_Castable.cast();
      };
      var animate = function(dictCastable) {
        return Untagged_Castable.cast();
      };
      module.exports = {
        toEffectFn,
        VariantLabel,
        Target,
        prop,
        dragMomentum,
        dragElastic,
        dragElasticBoundingBox,
        boundingBox2D,
        onTapStart,
        onTapEnd,
        onTap,
        onTapCancel,
        onAnimationComplete,
        onAnimationStart,
        onHoverStart,
        onHoverEnd,
        whileHover,
        onLayoutAnimationComplete,
        onViewportBoxUpdate,
        whileTap,
        callback,
        onDragStart,
        onDragEnd,
        onDrag,
        onPanStart,
        onPanEnd,
        onPan,
        customProp,
        layoutId,
        animate,
        initial,
        transition,
        drag,
        dragConstraints,
        dragConstraintsBoundingBox,
        dragPropagation,
        exit,
        variants,
        variantsFromObject,
        layout,
        MakeVariantLabel,
        makeVariantLabels,
        AnimateSharedLayoutType,
        "switch": $$switch,
        crossfade,
        callbackableEffectFn2,
        callbackableEffectFn1,
        "makeVariantLabels'": makeVariantLabels$prime,
        infinity: $foreign.infinity
      };
    }
  });

  // output/MotionValue/foreign.js
  var require_foreign44 = __commonJS({
    "output/MotionValue/foreign.js"(exports) {
      var framerMotion = require_framer_motion_cjs();
      exports.useMotionValueImpl = framerMotion.useMotionValue;
      exports.get = (mv) => () => {
        return mv.get();
      };
      exports.setImpl = (v) => (render) => (mv) => () => {
        mv.set(v, render);
      };
      exports.isAnimating = (mv) => () => {
        return mv.isAnimating();
      };
      exports.stop = (mv) => () => {
        return mv.stop();
      };
      exports.onChangeImpl = (callback) => (mv) => {
        return () => mv.onChange(callback);
      };
      exports.animateImpl = framerMotion.animate;
      exports.stopAnimation = (playbackControls) => playbackControls.stop;
    }
  });

  // output/Data.Functor.Indexed/index.js
  var require_Data_Functor7 = __commonJS({
    "output/Data.Functor.Indexed/index.js"(exports, module) {
      "use strict";
      var Data_Function = require_Data2();
      var Data_Unit = require_Data3();
      var imap = function(dict) {
        return dict.imap;
      };
      var ivoid = function(dictIxFunctor) {
        return imap(dictIxFunctor)(Data_Function["const"](Data_Unit.unit));
      };
      var ivoidLeft = function(dictIxFunctor) {
        return function(f) {
          return function(x) {
            return imap(dictIxFunctor)(Data_Function["const"](x))(f);
          };
        };
      };
      var ivoidRight = function(dictIxFunctor) {
        return function(x) {
          return imap(dictIxFunctor)(Data_Function["const"](x));
        };
      };
      module.exports = {
        imap,
        ivoid,
        ivoidRight,
        ivoidLeft
      };
    }
  });

  // output/Control.Apply.Indexed/index.js
  var require_Control_Apply = __commonJS({
    "output/Control.Apply.Indexed/index.js"(exports, module) {
      "use strict";
      var Control_Category = require_Control2();
      var Data_Function = require_Data2();
      var Data_Functor_Indexed = require_Data_Functor7();
      var iapply = function(dict) {
        return dict.iapply;
      };
      var iapplyFirst = function(dictIxApply) {
        return function(a) {
          return function(b) {
            return iapply(dictIxApply)(Data_Functor_Indexed.imap(dictIxApply.IxFunctor0())(Data_Function["const"])(a))(b);
          };
        };
      };
      var iapplySecond = function(dictIxApply) {
        return function(a) {
          return function(b) {
            return iapply(dictIxApply)(Data_Functor_Indexed.imap(dictIxApply.IxFunctor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
        };
      };
      module.exports = {
        iapply,
        iapplyFirst,
        iapplySecond,
        imap: Data_Functor_Indexed.imap,
        ivoid: Data_Functor_Indexed.ivoid,
        ivoidLeft: Data_Functor_Indexed.ivoidLeft,
        ivoidRight: Data_Functor_Indexed.ivoidRight
      };
    }
  });

  // output/Control.Bind.Indexed/index.js
  var require_Control_Bind = __commonJS({
    "output/Control.Bind.Indexed/index.js"(exports, module) {
      "use strict";
      var Control_Apply_Indexed = require_Control_Apply();
      var Control_Category = require_Control2();
      var Data_Function = require_Data2();
      var idiscard = function(dict) {
        return dict.idiscard;
      };
      var ibind = function(dict) {
        return dict.ibind;
      };
      var ibindFlipped = function(dictIxBind) {
        return Data_Function.flip(ibind(dictIxBind));
      };
      var ixDiscardUnit = {
        idiscard: function(dictIxBind) {
          return ibind(dictIxBind);
        }
      };
      var composeiKleisliFlipped = function(dictIxBind) {
        return function(f) {
          return function(g) {
            return function(a) {
              return ibindFlipped(dictIxBind)(f)(g(a));
            };
          };
        };
      };
      var composeiKleisli = function(dictIxBind) {
        return function(f) {
          return function(g) {
            return function(a) {
              return ibind(dictIxBind)(f(a))(g);
            };
          };
        };
      };
      module.exports = {
        ibind,
        ibindFlipped,
        composeiKleisli,
        composeiKleisliFlipped,
        idiscard,
        ixDiscardUnit,
        iapply: Control_Apply_Indexed.iapply,
        iapplyFirst: Control_Apply_Indexed.iapplyFirst,
        iapplySecond: Control_Apply_Indexed.iapplySecond,
        imap: Control_Apply_Indexed.imap,
        ivoid: Control_Apply_Indexed.ivoid,
        ivoidLeft: Control_Apply_Indexed.ivoidLeft,
        ivoidRight: Control_Apply_Indexed.ivoidRight
      };
    }
  });

  // output/React.Basic.Hooks.Internal/index.js
  var require_React_Basic_Hooks = __commonJS({
    "output/React.Basic.Hooks.Internal/index.js"(exports, module) {
      "use strict";
      var Control_Applicative = require_Control4();
      var Control_Apply = require_Control3();
      var Control_Bind_Indexed = require_Control_Bind();
      var Data_Functor = require_Data4();
      var Data_Monoid = require_Data18();
      var Data_Semigroup = require_Data7();
      var Effect = require_Effect();
      var Render = function(x) {
        return x;
      };
      var unsafeRenderEffect = Render;
      var unsafeHook = Render;
      var semigroupRender = function(dictTypeEquals) {
        return function(dictSemigroup) {
          return {
            append: function(v) {
              return function(v1) {
                return Data_Semigroup.append(Effect.semigroupEffect(dictSemigroup))(v)(v1);
              };
            }
          };
        };
      };
      var monoidRender = function(dictTypeEquals) {
        return function(dictMonoid) {
          return {
            mempty: Data_Monoid.mempty(Effect.monoidEffect(dictMonoid)),
            Semigroup0: function() {
              return semigroupRender(dictTypeEquals)(dictMonoid.Semigroup0());
            }
          };
        };
      };
      var ixFunctorRender = {
        imap: function(f) {
          return function(v) {
            return Data_Functor.map(Effect.functorEffect)(f)(v);
          };
        }
      };
      var ixApplyRender = {
        iapply: function(v) {
          return function(v1) {
            return Control_Apply.apply(Effect.applyEffect)(v)(v1);
          };
        },
        IxFunctor0: function() {
          return ixFunctorRender;
        }
      };
      var ixBindRender = {
        ibind: function(v) {
          return function(f) {
            return function __do() {
              var a = v();
              var v1 = f(a);
              return v1();
            };
          };
        },
        IxApply0: function() {
          return ixApplyRender;
        }
      };
      var ixApplicativeRender = {
        ipure: function(a) {
          return Control_Applicative.pure(Effect.applicativeEffect)(a);
        },
        IxApply0: function() {
          return ixApplyRender;
        }
      };
      var ixMonadRender = {
        IxApplicative0: function() {
          return ixApplicativeRender;
        },
        IxBind1: function() {
          return ixBindRender;
        }
      };
      var functorRender = {
        map: function(f) {
          return function(v) {
            return Data_Functor.map(Effect.functorEffect)(f)(v);
          };
        }
      };
      var discard = function(dictIxBind) {
        return Control_Bind_Indexed.ibind(dictIxBind);
      };
      var coerceHook = function(dictNewtype) {
        return function(v) {
          return v;
        };
      };
      var bind = function(dictIxBind) {
        return Control_Bind_Indexed.ibind(dictIxBind);
      };
      var applyRender = function(dictTypeEquals) {
        return {
          apply: function(v) {
            return function(v1) {
              return Control_Apply.apply(Effect.applyEffect)(v)(v1);
            };
          },
          Functor0: function() {
            return functorRender;
          }
        };
      };
      var bindRender = function(dictTypeEquals) {
        return {
          bind: function(v) {
            return function(f) {
              return function __do() {
                var a = v();
                var v1 = f(a);
                return v1();
              };
            };
          },
          Apply0: function() {
            return applyRender(dictTypeEquals);
          }
        };
      };
      var applicativeRender = function(dictTypeEquals) {
        return {
          pure: function(a) {
            return Control_Applicative.pure(Effect.applicativeEffect)(a);
          },
          Apply0: function() {
            return applyRender(dictTypeEquals);
          }
        };
      };
      var monadRender = function(dictTypeEquals) {
        return {
          Applicative0: function() {
            return applicativeRender(dictTypeEquals);
          },
          Bind1: function() {
            return bindRender(dictTypeEquals);
          }
        };
      };
      module.exports = {
        coerceHook,
        unsafeHook,
        unsafeRenderEffect,
        bind,
        discard,
        ixFunctorRender,
        ixApplyRender,
        ixApplicativeRender,
        ixBindRender,
        ixMonadRender,
        functorRender,
        applyRender,
        applicativeRender,
        bindRender,
        monadRender,
        semigroupRender,
        monoidRender
      };
    }
  });

  // output/MotionValue/index.js
  var require_MotionValue = __commonJS({
    "output/MotionValue/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign44();
      var Effect_Uncurried = require_Effect4();
      var React_Basic_Hooks_Internal = require_React_Basic_Hooks();
      var useMotionValue = function() {
        var $0 = Effect_Uncurried.runEffectFn1($foreign.useMotionValueImpl);
        return function($1) {
          return React_Basic_Hooks_Internal.unsafeHook($0($1));
        };
      }();
      var setButDoNotRender = function(v) {
        return $foreign.setImpl(v)(false);
      };
      var set = function(v) {
        return $foreign.setImpl(v)(true);
      };
      var onChange = function($2) {
        return $foreign.onChangeImpl(Effect_Uncurried.mkEffectFn1($2));
      };
      var animate = function(target) {
        return function(opts) {
          return function(value) {
            return function() {
              return $foreign.animateImpl(value, target, opts);
            };
          };
        };
      };
      module.exports = {
        setButDoNotRender,
        set,
        onChange,
        useMotionValue,
        animate,
        useMotionValueImpl: $foreign.useMotionValueImpl,
        get: $foreign.get,
        setImpl: $foreign.setImpl,
        isAnimating: $foreign.isAnimating,
        stop: $foreign.stop,
        onChangeImpl: $foreign.onChangeImpl,
        animateImpl: $foreign.animateImpl,
        stopAnimation: $foreign.stopAnimation
      };
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e) {
                  setTimeout(_flushCallback, 0);
                  throw e;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame2 = window.requestAnimationFrame;
              var cancelAnimationFrame = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame2 !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            while (index < length) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: /* @__PURE__ */ new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = /* @__PURE__ */ new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = /* @__PURE__ */ new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          if (!React) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var isArray2 = Array.isArray(props[propName]);
                if (props.multiple && !isArray2) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray2) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn, a, b, c, d) {
            return fn(a, b, c, d);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, bookkeeping) {
            if (isInsideEventHandler) {
              return fn(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn, a, b) {
            if (isBatchingEventUpdates) {
              return fn(a, b);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn, a, b);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn, a, b, c, d);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener || typeof listener === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
              }
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot = 256;
          var Passive = 512;
          var PassiveUnmountPendingDev = 8192;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ForceUpdateForLegacySuspense = 16384;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a.alternate === b)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node;
              } else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node = currentParent;
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
                return node;
              } else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === currentParent) {
                return null;
              }
              while (!node.sibling) {
                if (!node.return || node.return === currentParent) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node !== null) {
              if (node === parentFiber || node === parentFiberAlternate) {
                return true;
              }
              node = node.return;
            }
            return false;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn) {
            attemptUserBlockingHydration = fn;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var eventPriorities = /* @__PURE__ */ new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            "focusout",
            "blur",
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i += 2) {
              var topEvent = eventTypes[i];
              var event = eventTypes[i + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i++) {
              eventPriorities.set(eventTypes[i], priority);
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          var Scheduler_now = Scheduler.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var SyncBatchedLane = 2;
          var InputDiscreteHydrationLane = 4;
          var InputDiscreteLanes = 24;
          var InputContinuousHydrationLane = 32;
          var InputContinuousLanes = 192;
          var DefaultHydrationLane = 256;
          var DefaultLanes = 3584;
          var TransitionHydrationLane = 4096;
          var TransitionLanes = 4186112;
          var RetryLanes = 62914560;
          var SomeRetryLane = 33554432;
          var SelectiveHydrationLane = 67108864;
          var NonIdleLanes = 134217727;
          var IdleHydrationLane = 134217728;
          var IdleLanes = 805306368;
          var OffscreenLane = 1073741824;
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root2.expiredLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function getLowestPriorityLane(lanes) {
            var index2 = 31 - clz32(lanes);
            return index2 < 0 ? NoLanes : 1 << index2;
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root2.suspendedLanes &= higherPriorityLanes;
            root2.pingedLanes &= higherPriorityLanes;
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markDiscreteUpdatesExpired(root2) {
            root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          function markRootMutableRead(root2, updateLane) {
            root2.mutableReadLanes |= updateLane & root2.pendingLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = 0;
            root2.pingedLanes = 0;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log(lanes) / LN2 | 0) | 0;
          }
          var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body = container.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id = "r:" + (clientId++).toString(36);
            return {
              toString: function() {
                warnOnAccessInDEV();
                return id;
              },
              valueOf: function() {
                warnOnAccessInDEV();
                return id;
              }
            };
          }
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component = node.type;
                    if (isContextProvider(Component)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn);
          }
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options2);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i < _queue.length; i++) {
                      var callback = _queue[i];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error2) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error2;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          var ReactVersion = "17.0.2";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node = node.return;
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update.tag = ForceUpdate;
                      enqueueUpdate(fiber, update);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var isArray = Array.isArray;
          var emptyRefsObject = new React.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject = typeof newChild === "object" && newChild !== null;
              if (isObject) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (!(c !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          function getIsHydrating() {
            return isHydrating;
          }
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          function setWorkInProgressVersion(mutableSource, version) {
            {
              mutableSource._workInProgressVersionPrimary = version;
            }
            workInProgressSources.push(mutableSource);
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.eagerReducer === reducer) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source);
              {
                if (typeof snapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          function useMutableSource(hook, source, getSnapshot, subscribe) {
            var root2 = getWorkInProgressRoot();
            if (!(root2 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
              refs,
              source,
              subscribe
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                }
                markRootEntangled(root2, root2.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function() {
              var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                } catch (error2) {
                  latestSetSnapshot(function() {
                    throw error2;
                  });
                }
              };
              var unsubscribe = subscribe(source._source, handleChange);
              {
                if (typeof unsubscribe !== "function") {
                  error("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe
            };
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook();
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function updateEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            return mountEffectImpl(Update, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            mountRef(start);
            return [start, isPending];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name] = true;
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              };
              var id = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          function updateOpaqueIdentifier() {
            var id = updateState()[0];
            return id;
          }
          function rerenderOpaqueIdentifier() {
            var id = rerenderState()[0];
            return id;
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.eagerReducer = lastRenderedReducer;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if (typeof jest !== "undefined") {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
              }
            }
            var currentChild = current2.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var root2 = workInProgress2.stateNode;
            if (root2.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i];
                    var version = mutableSourceEagerHydrationData[i + 1];
                    setWorkInProgressVersion(mutableSource, version);
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node, renderLanes2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node, renderLanes2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isArray2 = Array.isArray(childSlot);
              var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
              if (isArray2 || isIterable) {
                var type = isArray2 ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last = returnFiber.lastEffect;
              if (last !== null) {
                last.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component = workInProgress2.type;
                    if (isContextProvider(Component)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue = /* @__PURE__ */ new Set();
                    updateQueue.add(wakeable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            {
              instance.componentWillUnmount();
            }
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error2 = clearCaughtError();
                captureCommitPhaseError(current2, error2);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var create = effect.create;
                  effect.destroy = create();
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
              } while (effect !== firstEffect);
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } else if (node.tag === HostText) {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                      if (destroy !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy);
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
            var node = root2;
            while (true) {
              commitUnmount(finishedRoot, node);
              if (node.child !== null && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === root2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === root2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node.stateNode : node.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node.stateNode);
                } else {
                  removeChild(currentParent, node.stateNode);
                }
              } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                  currentParent = node.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node);
                if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
              }
              if (node === current2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === current2) {
                  return;
                }
                node = node.return;
                if (node.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            var alternate = current2.alternate;
            detachFiberMutation(current2);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RetryAfterError = 64;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root2 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root2, lane, eventTime);
            if (root2 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root2, lane);
                performSyncWorkOnRoot(root2);
              } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = /* @__PURE__ */ new Set([root2]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root2);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, lane);
            }
            mostRecentlyUpdatedRoot = root2;
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root2.callbackNode = null;
                root2.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root2.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root2, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root2, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root2.hydrate) {
                  root2.hydrate = false;
                  clearContainer(root2.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root2);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root2, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              var finishedWork = root2.current.alternate;
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                commitRoot(root2);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootCompleted: {
                commitRoot(root2);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root2, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root2, lanes);
                exitStatus = renderRootSync(root2, lanes);
              }
            } else {
              lanes = getNextLanes(root2, NoLanes);
              exitStatus = renderRootSync(root2, lanes);
            }
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root2.hydrate) {
                root2.hydrate = false;
                clearContainer(root2.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root2) {
                markDiscreteUpdatesExpired(root2);
                ensureRootIsScheduled(root2, now());
              });
            }
            flushSyncCallbackQueue();
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn, a, b, c, d) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          function unbatchedUpdates(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn, a) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn(a);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn) {
                  return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            workInProgress = createWorkInProgress(root2.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function pushInteractions(root2) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root2.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function resetChildLanes(completedWork) {
            if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          function commitRoot(root2) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root2, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (!(finishedWork !== root2.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root2.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
                rootsWithPendingDiscreteUpdates.delete(root2);
              }
            }
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root2);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root2.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i = 0; i < expirationTimes.length; i++) {
                    scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root2, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root2, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root2, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root2, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root2, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate;
                commitLifeCycles(root2, current2, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function invokePassiveEffectCreate(effect) {
            var create = effect.create;
            effect.destroy = create();
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i = 0; i < unmountEffects.length; i += 2) {
              var _effect = unmountEffects[i];
              var fiber = unmountEffects[i + 1];
              var destroy = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(fiber, error2);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect = root2.current.firstEffect;
            while (effect !== null) {
              var nextNextEffect = effect.nextEffect;
              effect.nextEffect = null;
              if (effect.flags & Deletion) {
                detachFiberAfterEffects(effect);
              }
              effect = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root2, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, SyncLane);
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error2, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update);
                  var eventTime = requestEventTime();
                  var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                    schedulePendingInteractions(root2, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error2, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, pingedLanes);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, retryLane);
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              if (isFlushingPassiveEffects)
                ;
              else {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root2, lane) {
            return lane * 1e3 + root2.interactionThreadID;
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          function scheduleInteractions(root2, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root2.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root2, lane) {
            scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root2, lanes) {
            var interactions = /* @__PURE__ */ new Set();
            root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root2.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error2) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error2;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root2, committedLanes) {
            var remainingLanesAfterCommit = root2.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedLanes);
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
              });
            } finally {
              var pendingInteractionMap = root2.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error2;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugID = current2._debugID;
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= DebugTracingMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                  case REACT_SCOPE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                      }
                    }
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate2;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = /* @__PURE__ */ new Set();
              this.pendingInteractionMap = /* @__PURE__ */ new Map();
            }
            {
              switch (tag) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
            var uninitializedFiber = createHostRootFiber(tag);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate2);
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
              if (typeof jest !== "undefined") {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function runWithPriority$2(priority, fn) {
            try {
              setCurrentUpdateLanePriority(priority);
              return fn();
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === path.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          function ReactDOMRoot(container, options2) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
          }
          function ReactDOMBlockingRoot(container, tag, options2) {
            this._internalRoot = createRootImpl(container, tag, options2);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            var container = root2.containerInfo;
            updateContainer(null, root2, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options2) {
            var hydrate2 = options2 != null && options2.hydrate === true;
            var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
            var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
            var root2 = createContainer(container, tag, hydrate2);
            markContainerAsRoot(root2.current, container);
            var containerNodeType = container.nodeType;
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return root2;
          }
          function createLegacyRoot(container, options2) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root2 = container._reactRootContainer;
            var fiberRoot;
            if (!root2) {
              root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          var Internals = {
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // output/React.Basic.DOM/foreign.js
  var require_foreign45 = __commonJS({
    "output/React.Basic.DOM/foreign.js"(exports) {
      "use strict";
      var ReactDOM = require_react_dom();
      exports.renderThen = (jsx) => (node) => (callback) => () => ReactDOM.render(jsx, node, callback);
      exports.hydrateThen = (jsx) => (node) => (callback) => () => ReactDOM.hydrate(jsx, node, callback);
      exports.unmount = (node) => () => ReactDOM.unmountComponentAtNode(node);
      exports.createPortal = (jsx) => (node) => ReactDOM.createPortal(jsx, node);
    }
  });

  // output/Effect.Unsafe/foreign.js
  var require_foreign46 = __commonJS({
    "output/Effect.Unsafe/foreign.js"(exports) {
      "use strict";
      exports.unsafePerformEffect = function(f) {
        return f();
      };
    }
  });

  // output/Effect.Unsafe/index.js
  var require_Effect7 = __commonJS({
    "output/Effect.Unsafe/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign46();
      module.exports = {
        unsafePerformEffect: $foreign.unsafePerformEffect
      };
    }
  });

  // output/React.Basic.DOM.Generated/index.js
  var require_React_Basic_DOM2 = __commonJS({
    "output/React.Basic.DOM.Generated/index.js"(exports, module) {
      "use strict";
      var Effect_Unsafe = require_Effect7();
      var React_Basic = require_React();
      var React_Basic_DOM_Internal = require_React_Basic_DOM();
      var _wbr$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("wbr"));
      var wbr$prime = function(dictUnion) {
        return _wbr$prime;
      };
      var wbr = function(dictUnion) {
        return React_Basic.element(wbr$prime());
      };
      var _video$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("video"));
      var video$prime = function(dictUnion) {
        return _video$prime;
      };
      var video = function(dictUnion) {
        return React_Basic.element(video$prime());
      };
      var video_ = function(children) {
        return video()({
          children
        });
      };
      var _var$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("var"));
      var var$prime = function(dictUnion) {
        return _var$prime;
      };
      var $$var = function(dictUnion) {
        return React_Basic.element(var$prime());
      };
      var var_ = function(children) {
        return $$var()({
          children
        });
      };
      var _ul$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("ul"));
      var ul$prime = function(dictUnion) {
        return _ul$prime;
      };
      var ul = function(dictUnion) {
        return React_Basic.element(ul$prime());
      };
      var ul_ = function(children) {
        return ul()({
          children
        });
      };
      var _u$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("u"));
      var u$prime = function(dictUnion) {
        return _u$prime;
      };
      var u = function(dictUnion) {
        return React_Basic.element(u$prime());
      };
      var u_ = function(children) {
        return u()({
          children
        });
      };
      var _track$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("track"));
      var track$prime = function(dictUnion) {
        return _track$prime;
      };
      var track = function(dictUnion) {
        return React_Basic.element(track$prime());
      };
      var _tr$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("tr"));
      var tr$prime = function(dictUnion) {
        return _tr$prime;
      };
      var tr = function(dictUnion) {
        return React_Basic.element(tr$prime());
      };
      var tr_ = function(children) {
        return tr()({
          children
        });
      };
      var _title$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("title"));
      var title$prime = function(dictUnion) {
        return _title$prime;
      };
      var title = function(dictUnion) {
        return React_Basic.element(title$prime());
      };
      var title_ = function(children) {
        return title()({
          children
        });
      };
      var _time$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("time"));
      var time$prime = function(dictUnion) {
        return _time$prime;
      };
      var time = function(dictUnion) {
        return React_Basic.element(time$prime());
      };
      var time_ = function(children) {
        return time()({
          children
        });
      };
      var _thead$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("thead"));
      var thead$prime = function(dictUnion) {
        return _thead$prime;
      };
      var thead = function(dictUnion) {
        return React_Basic.element(thead$prime());
      };
      var thead_ = function(children) {
        return thead()({
          children
        });
      };
      var _th$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("th"));
      var th$prime = function(dictUnion) {
        return _th$prime;
      };
      var th = function(dictUnion) {
        return React_Basic.element(th$prime());
      };
      var th_ = function(children) {
        return th()({
          children
        });
      };
      var _tfoot$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("tfoot"));
      var tfoot$prime = function(dictUnion) {
        return _tfoot$prime;
      };
      var tfoot = function(dictUnion) {
        return React_Basic.element(tfoot$prime());
      };
      var tfoot_ = function(children) {
        return tfoot()({
          children
        });
      };
      var _textarea$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("textarea"));
      var textarea$prime = function(dictUnion) {
        return _textarea$prime;
      };
      var textarea = function(dictUnion) {
        return React_Basic.element(textarea$prime());
      };
      var textarea_ = function(children) {
        return textarea()({
          children
        });
      };
      var _template$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("template"));
      var template$prime = function(dictUnion) {
        return _template$prime;
      };
      var template = function(dictUnion) {
        return React_Basic.element(template$prime());
      };
      var template_ = function(children) {
        return template()({
          children
        });
      };
      var _td$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("td"));
      var td$prime = function(dictUnion) {
        return _td$prime;
      };
      var td = function(dictUnion) {
        return React_Basic.element(td$prime());
      };
      var td_ = function(children) {
        return td()({
          children
        });
      };
      var _tbody$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("tbody"));
      var tbody$prime = function(dictUnion) {
        return _tbody$prime;
      };
      var tbody = function(dictUnion) {
        return React_Basic.element(tbody$prime());
      };
      var tbody_ = function(children) {
        return tbody()({
          children
        });
      };
      var _table$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("table"));
      var table$prime = function(dictUnion) {
        return _table$prime;
      };
      var table = function(dictUnion) {
        return React_Basic.element(table$prime());
      };
      var table_ = function(children) {
        return table()({
          children
        });
      };
      var _sup$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("sup"));
      var sup$prime = function(dictUnion) {
        return _sup$prime;
      };
      var sup = function(dictUnion) {
        return React_Basic.element(sup$prime());
      };
      var sup_ = function(children) {
        return sup()({
          children
        });
      };
      var _summary$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("summary"));
      var summary$prime = function(dictUnion) {
        return _summary$prime;
      };
      var summary = function(dictUnion) {
        return React_Basic.element(summary$prime());
      };
      var summary_ = function(children) {
        return summary()({
          children
        });
      };
      var _sub$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("sub"));
      var sub$prime = function(dictUnion) {
        return _sub$prime;
      };
      var sub = function(dictUnion) {
        return React_Basic.element(sub$prime());
      };
      var sub_ = function(children) {
        return sub()({
          children
        });
      };
      var _style$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("style"));
      var style$prime = function(dictUnion) {
        return _style$prime;
      };
      var style = function(dictUnion) {
        return React_Basic.element(style$prime());
      };
      var style_ = function(children) {
        return style()({
          children
        });
      };
      var _strong$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("strong"));
      var strong$prime = function(dictUnion) {
        return _strong$prime;
      };
      var strong = function(dictUnion) {
        return React_Basic.element(strong$prime());
      };
      var strong_ = function(children) {
        return strong()({
          children
        });
      };
      var _span$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("span"));
      var span$prime = function(dictUnion) {
        return _span$prime;
      };
      var span = function(dictUnion) {
        return React_Basic.element(span$prime());
      };
      var span_ = function(children) {
        return span()({
          children
        });
      };
      var _source$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("source"));
      var source$prime = function(dictUnion) {
        return _source$prime;
      };
      var source = function(dictUnion) {
        return React_Basic.element(source$prime());
      };
      var _small$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("small"));
      var small$prime = function(dictUnion) {
        return _small$prime;
      };
      var small = function(dictUnion) {
        return React_Basic.element(small$prime());
      };
      var small_ = function(children) {
        return small()({
          children
        });
      };
      var _slot$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("slot"));
      var slot$prime = function(dictUnion) {
        return _slot$prime;
      };
      var slot = function(dictUnion) {
        return React_Basic.element(slot$prime());
      };
      var slot_ = function(children) {
        return slot()({
          children
        });
      };
      var _select$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("select"));
      var select$prime = function(dictUnion) {
        return _select$prime;
      };
      var select = function(dictUnion) {
        return React_Basic.element(select$prime());
      };
      var select_ = function(children) {
        return select()({
          children
        });
      };
      var _section$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("section"));
      var section$prime = function(dictUnion) {
        return _section$prime;
      };
      var section = function(dictUnion) {
        return React_Basic.element(section$prime());
      };
      var section_ = function(children) {
        return section()({
          children
        });
      };
      var _script$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("script"));
      var script$prime = function(dictUnion) {
        return _script$prime;
      };
      var script = function(dictUnion) {
        return React_Basic.element(script$prime());
      };
      var script_ = function(children) {
        return script()({
          children
        });
      };
      var _samp$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("samp"));
      var samp$prime = function(dictUnion) {
        return _samp$prime;
      };
      var samp = function(dictUnion) {
        return React_Basic.element(samp$prime());
      };
      var samp_ = function(children) {
        return samp()({
          children
        });
      };
      var _s$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("s"));
      var s$prime = function(dictUnion) {
        return _s$prime;
      };
      var s = function(dictUnion) {
        return React_Basic.element(s$prime());
      };
      var s_ = function(children) {
        return s()({
          children
        });
      };
      var _ruby$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("ruby"));
      var ruby$prime = function(dictUnion) {
        return _ruby$prime;
      };
      var ruby = function(dictUnion) {
        return React_Basic.element(ruby$prime());
      };
      var ruby_ = function(children) {
        return ruby()({
          children
        });
      };
      var _rtc$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("rtc"));
      var rtc$prime = function(dictUnion) {
        return _rtc$prime;
      };
      var rtc = function(dictUnion) {
        return React_Basic.element(rtc$prime());
      };
      var rtc_ = function(children) {
        return rtc()({
          children
        });
      };
      var _rt$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("rt"));
      var rt$prime = function(dictUnion) {
        return _rt$prime;
      };
      var rt = function(dictUnion) {
        return React_Basic.element(rt$prime());
      };
      var rt_ = function(children) {
        return rt()({
          children
        });
      };
      var _rp$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("rp"));
      var rp$prime = function(dictUnion) {
        return _rp$prime;
      };
      var rp = function(dictUnion) {
        return React_Basic.element(rp$prime());
      };
      var rp_ = function(children) {
        return rp()({
          children
        });
      };
      var _rb$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("rb"));
      var rb$prime = function(dictUnion) {
        return _rb$prime;
      };
      var rb = function(dictUnion) {
        return React_Basic.element(rb$prime());
      };
      var rb_ = function(children) {
        return rb()({
          children
        });
      };
      var _q$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("q"));
      var q$prime = function(dictUnion) {
        return _q$prime;
      };
      var q = function(dictUnion) {
        return React_Basic.element(q$prime());
      };
      var q_ = function(children) {
        return q()({
          children
        });
      };
      var _progress$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("progress"));
      var progress$prime = function(dictUnion) {
        return _progress$prime;
      };
      var progress = function(dictUnion) {
        return React_Basic.element(progress$prime());
      };
      var progress_ = function(children) {
        return progress()({
          children
        });
      };
      var _pre$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("pre"));
      var pre$prime = function(dictUnion) {
        return _pre$prime;
      };
      var pre = function(dictUnion) {
        return React_Basic.element(pre$prime());
      };
      var pre_ = function(children) {
        return pre()({
          children
        });
      };
      var _picture$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("picture"));
      var picture$prime = function(dictUnion) {
        return _picture$prime;
      };
      var picture = function(dictUnion) {
        return React_Basic.element(picture$prime());
      };
      var picture_ = function(children) {
        return picture()({
          children
        });
      };
      var _param$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("param"));
      var param$prime = function(dictUnion) {
        return _param$prime;
      };
      var param = function(dictUnion) {
        return React_Basic.element(param$prime());
      };
      var _p$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("p"));
      var p$prime = function(dictUnion) {
        return _p$prime;
      };
      var p = function(dictUnion) {
        return React_Basic.element(p$prime());
      };
      var p_ = function(children) {
        return p()({
          children
        });
      };
      var _output$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("output"));
      var output$prime = function(dictUnion) {
        return _output$prime;
      };
      var output = function(dictUnion) {
        return React_Basic.element(output$prime());
      };
      var output_ = function(children) {
        return output()({
          children
        });
      };
      var _option$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("option"));
      var option$prime = function(dictUnion) {
        return _option$prime;
      };
      var option = function(dictUnion) {
        return React_Basic.element(option$prime());
      };
      var option_ = function(children) {
        return option()({
          children
        });
      };
      var _optgroup$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("optgroup"));
      var optgroup$prime = function(dictUnion) {
        return _optgroup$prime;
      };
      var optgroup = function(dictUnion) {
        return React_Basic.element(optgroup$prime());
      };
      var optgroup_ = function(children) {
        return optgroup()({
          children
        });
      };
      var _ol$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("ol"));
      var ol$prime = function(dictUnion) {
        return _ol$prime;
      };
      var ol = function(dictUnion) {
        return React_Basic.element(ol$prime());
      };
      var ol_ = function(children) {
        return ol()({
          children
        });
      };
      var _object$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("object"));
      var object$prime = function(dictUnion) {
        return _object$prime;
      };
      var object = function(dictUnion) {
        return React_Basic.element(object$prime());
      };
      var object_ = function(children) {
        return object()({
          children
        });
      };
      var _noscript$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("noscript"));
      var noscript$prime = function(dictUnion) {
        return _noscript$prime;
      };
      var noscript = function(dictUnion) {
        return React_Basic.element(noscript$prime());
      };
      var noscript_ = function(children) {
        return noscript()({
          children
        });
      };
      var _nav$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("nav"));
      var nav$prime = function(dictUnion) {
        return _nav$prime;
      };
      var nav = function(dictUnion) {
        return React_Basic.element(nav$prime());
      };
      var nav_ = function(children) {
        return nav()({
          children
        });
      };
      var _meter$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("meter"));
      var meter$prime = function(dictUnion) {
        return _meter$prime;
      };
      var meter = function(dictUnion) {
        return React_Basic.element(meter$prime());
      };
      var meter_ = function(children) {
        return meter()({
          children
        });
      };
      var _meta$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("meta"));
      var meta$prime = function(dictUnion) {
        return _meta$prime;
      };
      var meta = function(dictUnion) {
        return React_Basic.element(meta$prime());
      };
      var _menuitem$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("menuitem"));
      var menuitem$prime = function(dictUnion) {
        return _menuitem$prime;
      };
      var menuitem = function(dictUnion) {
        return React_Basic.element(menuitem$prime());
      };
      var menuitem_ = function(children) {
        return menuitem()({
          children
        });
      };
      var _menu$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("menu"));
      var menu$prime = function(dictUnion) {
        return _menu$prime;
      };
      var menu = function(dictUnion) {
        return React_Basic.element(menu$prime());
      };
      var menu_ = function(children) {
        return menu()({
          children
        });
      };
      var _math$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("math"));
      var math$prime = function(dictUnion) {
        return _math$prime;
      };
      var math = function(dictUnion) {
        return React_Basic.element(math$prime());
      };
      var math_ = function(children) {
        return math()({
          children
        });
      };
      var _mark$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("mark"));
      var mark$prime = function(dictUnion) {
        return _mark$prime;
      };
      var mark = function(dictUnion) {
        return React_Basic.element(mark$prime());
      };
      var mark_ = function(children) {
        return mark()({
          children
        });
      };
      var _map$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("map"));
      var map$prime = function(dictUnion) {
        return _map$prime;
      };
      var map = function(dictUnion) {
        return React_Basic.element(map$prime());
      };
      var map_ = function(children) {
        return map()({
          children
        });
      };
      var _main$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("main"));
      var main$prime = function(dictUnion) {
        return _main$prime;
      };
      var main2 = function(dictUnion) {
        return React_Basic.element(main$prime());
      };
      var main_ = function(children) {
        return main2()({
          children
        });
      };
      var _link$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("link"));
      var link$prime = function(dictUnion) {
        return _link$prime;
      };
      var link = function(dictUnion) {
        return React_Basic.element(link$prime());
      };
      var _li$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("li"));
      var li$prime = function(dictUnion) {
        return _li$prime;
      };
      var li = function(dictUnion) {
        return React_Basic.element(li$prime());
      };
      var li_ = function(children) {
        return li()({
          children
        });
      };
      var _legend$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("legend"));
      var legend$prime = function(dictUnion) {
        return _legend$prime;
      };
      var legend = function(dictUnion) {
        return React_Basic.element(legend$prime());
      };
      var legend_ = function(children) {
        return legend()({
          children
        });
      };
      var _label$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("label"));
      var label$prime = function(dictUnion) {
        return _label$prime;
      };
      var label = function(dictUnion) {
        return React_Basic.element(label$prime());
      };
      var label_ = function(children) {
        return label()({
          children
        });
      };
      var _keygen$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("keygen"));
      var keygen$prime = function(dictUnion) {
        return _keygen$prime;
      };
      var keygen = function(dictUnion) {
        return React_Basic.element(keygen$prime());
      };
      var keygen_ = function(children) {
        return keygen()({
          children
        });
      };
      var _kbd$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("kbd"));
      var kbd$prime = function(dictUnion) {
        return _kbd$prime;
      };
      var kbd = function(dictUnion) {
        return React_Basic.element(kbd$prime());
      };
      var kbd_ = function(children) {
        return kbd()({
          children
        });
      };
      var _ins$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("ins"));
      var ins$prime = function(dictUnion) {
        return _ins$prime;
      };
      var ins = function(dictUnion) {
        return React_Basic.element(ins$prime());
      };
      var ins_ = function(children) {
        return ins()({
          children
        });
      };
      var _input$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("input"));
      var input$prime = function(dictUnion) {
        return _input$prime;
      };
      var input = function(dictUnion) {
        return React_Basic.element(input$prime());
      };
      var _img$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("img"));
      var img$prime = function(dictUnion) {
        return _img$prime;
      };
      var img = function(dictUnion) {
        return React_Basic.element(img$prime());
      };
      var _iframe$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("iframe"));
      var iframe$prime = function(dictUnion) {
        return _iframe$prime;
      };
      var iframe = function(dictUnion) {
        return React_Basic.element(iframe$prime());
      };
      var iframe_ = function(children) {
        return iframe()({
          children
        });
      };
      var _i$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("i"));
      var i$prime = function(dictUnion) {
        return _i$prime;
      };
      var i = function(dictUnion) {
        return React_Basic.element(i$prime());
      };
      var i_ = function(children) {
        return i()({
          children
        });
      };
      var _html$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("html"));
      var html$prime = function(dictUnion) {
        return _html$prime;
      };
      var html = function(dictUnion) {
        return React_Basic.element(html$prime());
      };
      var html_ = function(children) {
        return html()({
          children
        });
      };
      var _hr$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("hr"));
      var hr$prime = function(dictUnion) {
        return _hr$prime;
      };
      var hr = function(dictUnion) {
        return React_Basic.element(hr$prime());
      };
      var _hgroup$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("hgroup"));
      var hgroup$prime = function(dictUnion) {
        return _hgroup$prime;
      };
      var hgroup = function(dictUnion) {
        return React_Basic.element(hgroup$prime());
      };
      var hgroup_ = function(children) {
        return hgroup()({
          children
        });
      };
      var _header$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("header"));
      var header$prime = function(dictUnion) {
        return _header$prime;
      };
      var header = function(dictUnion) {
        return React_Basic.element(header$prime());
      };
      var header_ = function(children) {
        return header()({
          children
        });
      };
      var _head$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("head"));
      var head$prime = function(dictUnion) {
        return _head$prime;
      };
      var head = function(dictUnion) {
        return React_Basic.element(head$prime());
      };
      var head_ = function(children) {
        return head()({
          children
        });
      };
      var _h6$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("h6"));
      var h6$prime = function(dictUnion) {
        return _h6$prime;
      };
      var h6 = function(dictUnion) {
        return React_Basic.element(h6$prime());
      };
      var h6_ = function(children) {
        return h6()({
          children
        });
      };
      var _h5$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("h5"));
      var h5$prime = function(dictUnion) {
        return _h5$prime;
      };
      var h5 = function(dictUnion) {
        return React_Basic.element(h5$prime());
      };
      var h5_ = function(children) {
        return h5()({
          children
        });
      };
      var _h4$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("h4"));
      var h4$prime = function(dictUnion) {
        return _h4$prime;
      };
      var h4 = function(dictUnion) {
        return React_Basic.element(h4$prime());
      };
      var h4_ = function(children) {
        return h4()({
          children
        });
      };
      var _h3$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("h3"));
      var h3$prime = function(dictUnion) {
        return _h3$prime;
      };
      var h3 = function(dictUnion) {
        return React_Basic.element(h3$prime());
      };
      var h3_ = function(children) {
        return h3()({
          children
        });
      };
      var _h2$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("h2"));
      var h2$prime = function(dictUnion) {
        return _h2$prime;
      };
      var h2 = function(dictUnion) {
        return React_Basic.element(h2$prime());
      };
      var h2_ = function(children) {
        return h2()({
          children
        });
      };
      var _h1$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("h1"));
      var h1$prime = function(dictUnion) {
        return _h1$prime;
      };
      var h1 = function(dictUnion) {
        return React_Basic.element(h1$prime());
      };
      var h1_ = function(children) {
        return h1()({
          children
        });
      };
      var _form$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("form"));
      var form$prime = function(dictUnion) {
        return _form$prime;
      };
      var form = function(dictUnion) {
        return React_Basic.element(form$prime());
      };
      var form_ = function(children) {
        return form()({
          children
        });
      };
      var _footer$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("footer"));
      var footer$prime = function(dictUnion) {
        return _footer$prime;
      };
      var footer = function(dictUnion) {
        return React_Basic.element(footer$prime());
      };
      var footer_ = function(children) {
        return footer()({
          children
        });
      };
      var _figure$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("figure"));
      var figure$prime = function(dictUnion) {
        return _figure$prime;
      };
      var figure = function(dictUnion) {
        return React_Basic.element(figure$prime());
      };
      var figure_ = function(children) {
        return figure()({
          children
        });
      };
      var _figcaption$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("figcaption"));
      var figcaption$prime = function(dictUnion) {
        return _figcaption$prime;
      };
      var figcaption = function(dictUnion) {
        return React_Basic.element(figcaption$prime());
      };
      var figcaption_ = function(children) {
        return figcaption()({
          children
        });
      };
      var _fieldset$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("fieldset"));
      var fieldset$prime = function(dictUnion) {
        return _fieldset$prime;
      };
      var fieldset = function(dictUnion) {
        return React_Basic.element(fieldset$prime());
      };
      var fieldset_ = function(children) {
        return fieldset()({
          children
        });
      };
      var _embed$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("embed"));
      var embed$prime = function(dictUnion) {
        return _embed$prime;
      };
      var embed = function(dictUnion) {
        return React_Basic.element(embed$prime());
      };
      var _em$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("em"));
      var em$prime = function(dictUnion) {
        return _em$prime;
      };
      var em = function(dictUnion) {
        return React_Basic.element(em$prime());
      };
      var em_ = function(children) {
        return em()({
          children
        });
      };
      var _dt$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("dt"));
      var dt$prime = function(dictUnion) {
        return _dt$prime;
      };
      var dt = function(dictUnion) {
        return React_Basic.element(dt$prime());
      };
      var dt_ = function(children) {
        return dt()({
          children
        });
      };
      var _dl$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("dl"));
      var dl$prime = function(dictUnion) {
        return _dl$prime;
      };
      var dl = function(dictUnion) {
        return React_Basic.element(dl$prime());
      };
      var dl_ = function(children) {
        return dl()({
          children
        });
      };
      var _div$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("div"));
      var div$prime = function(dictUnion) {
        return _div$prime;
      };
      var div = function(dictUnion) {
        return React_Basic.element(div$prime());
      };
      var div_ = function(children) {
        return div()({
          children
        });
      };
      var _dialog$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("dialog"));
      var dialog$prime = function(dictUnion) {
        return _dialog$prime;
      };
      var dialog = function(dictUnion) {
        return React_Basic.element(dialog$prime());
      };
      var dialog_ = function(children) {
        return dialog()({
          children
        });
      };
      var _dfn$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("dfn"));
      var dfn$prime = function(dictUnion) {
        return _dfn$prime;
      };
      var dfn = function(dictUnion) {
        return React_Basic.element(dfn$prime());
      };
      var dfn_ = function(children) {
        return dfn()({
          children
        });
      };
      var _details$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("details"));
      var details$prime = function(dictUnion) {
        return _details$prime;
      };
      var details = function(dictUnion) {
        return React_Basic.element(details$prime());
      };
      var details_ = function(children) {
        return details()({
          children
        });
      };
      var _del$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("del"));
      var del$prime = function(dictUnion) {
        return _del$prime;
      };
      var del = function(dictUnion) {
        return React_Basic.element(del$prime());
      };
      var del_ = function(children) {
        return del()({
          children
        });
      };
      var _dd$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("dd"));
      var dd$prime = function(dictUnion) {
        return _dd$prime;
      };
      var dd = function(dictUnion) {
        return React_Basic.element(dd$prime());
      };
      var dd_ = function(children) {
        return dd()({
          children
        });
      };
      var _datalist$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("datalist"));
      var datalist$prime = function(dictUnion) {
        return _datalist$prime;
      };
      var datalist = function(dictUnion) {
        return React_Basic.element(datalist$prime());
      };
      var datalist_ = function(children) {
        return datalist()({
          children
        });
      };
      var _data$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("data"));
      var data$prime$prime = function(dictUnion) {
        return _data$prime;
      };
      var data$prime = function(dictUnion) {
        return React_Basic.element(data$prime$prime());
      };
      var data_ = function(children) {
        return data$prime()({
          children
        });
      };
      var _colgroup$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("colgroup"));
      var colgroup$prime = function(dictUnion) {
        return _colgroup$prime;
      };
      var colgroup = function(dictUnion) {
        return React_Basic.element(colgroup$prime());
      };
      var colgroup_ = function(children) {
        return colgroup()({
          children
        });
      };
      var _col$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("col"));
      var col$prime = function(dictUnion) {
        return _col$prime;
      };
      var col = function(dictUnion) {
        return React_Basic.element(col$prime());
      };
      var _code$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("code"));
      var code$prime = function(dictUnion) {
        return _code$prime;
      };
      var code = function(dictUnion) {
        return React_Basic.element(code$prime());
      };
      var code_ = function(children) {
        return code()({
          children
        });
      };
      var _cite$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("cite"));
      var cite$prime = function(dictUnion) {
        return _cite$prime;
      };
      var cite = function(dictUnion) {
        return React_Basic.element(cite$prime());
      };
      var cite_ = function(children) {
        return cite()({
          children
        });
      };
      var _caption$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("caption"));
      var caption$prime = function(dictUnion) {
        return _caption$prime;
      };
      var caption = function(dictUnion) {
        return React_Basic.element(caption$prime());
      };
      var caption_ = function(children) {
        return caption()({
          children
        });
      };
      var _canvas$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("canvas"));
      var canvas$prime = function(dictUnion) {
        return _canvas$prime;
      };
      var canvas = function(dictUnion) {
        return React_Basic.element(canvas$prime());
      };
      var canvas_ = function(children) {
        return canvas()({
          children
        });
      };
      var _button$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("button"));
      var button$prime = function(dictUnion) {
        return _button$prime;
      };
      var button = function(dictUnion) {
        return React_Basic.element(button$prime());
      };
      var button_ = function(children) {
        return button()({
          children
        });
      };
      var _br$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("br"));
      var br$prime = function(dictUnion) {
        return _br$prime;
      };
      var br = function(dictUnion) {
        return React_Basic.element(br$prime());
      };
      var _body$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("body"));
      var body$prime = function(dictUnion) {
        return _body$prime;
      };
      var body = function(dictUnion) {
        return React_Basic.element(body$prime());
      };
      var body_ = function(children) {
        return body()({
          children
        });
      };
      var _blockquote$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("blockquote"));
      var blockquote$prime = function(dictUnion) {
        return _blockquote$prime;
      };
      var blockquote = function(dictUnion) {
        return React_Basic.element(blockquote$prime());
      };
      var blockquote_ = function(children) {
        return blockquote()({
          children
        });
      };
      var _bdo$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("bdo"));
      var bdo$prime = function(dictUnion) {
        return _bdo$prime;
      };
      var bdo = function(dictUnion) {
        return React_Basic.element(bdo$prime());
      };
      var bdo_ = function(children) {
        return bdo()({
          children
        });
      };
      var _bdi$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("bdi"));
      var bdi$prime = function(dictUnion) {
        return _bdi$prime;
      };
      var bdi = function(dictUnion) {
        return React_Basic.element(bdi$prime());
      };
      var bdi_ = function(children) {
        return bdi()({
          children
        });
      };
      var _base$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("base"));
      var base$prime = function(dictUnion) {
        return _base$prime;
      };
      var base = function(dictUnion) {
        return React_Basic.element(base$prime());
      };
      var _b$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("b"));
      var b$prime = function(dictUnion) {
        return _b$prime;
      };
      var b = function(dictUnion) {
        return React_Basic.element(b$prime());
      };
      var b_ = function(children) {
        return b()({
          children
        });
      };
      var _audio$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("audio"));
      var audio$prime = function(dictUnion) {
        return _audio$prime;
      };
      var audio = function(dictUnion) {
        return React_Basic.element(audio$prime());
      };
      var audio_ = function(children) {
        return audio()({
          children
        });
      };
      var _aside$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("aside"));
      var aside$prime = function(dictUnion) {
        return _aside$prime;
      };
      var aside = function(dictUnion) {
        return React_Basic.element(aside$prime());
      };
      var aside_ = function(children) {
        return aside()({
          children
        });
      };
      var _article$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("article"));
      var article$prime = function(dictUnion) {
        return _article$prime;
      };
      var article = function(dictUnion) {
        return React_Basic.element(article$prime());
      };
      var article_ = function(children) {
        return article()({
          children
        });
      };
      var _area$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("area"));
      var area$prime = function(dictUnion) {
        return _area$prime;
      };
      var area = function(dictUnion) {
        return React_Basic.element(area$prime());
      };
      var _address$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("address"));
      var address$prime = function(dictUnion) {
        return _address$prime;
      };
      var address = function(dictUnion) {
        return React_Basic.element(address$prime());
      };
      var address_ = function(children) {
        return address()({
          children
        });
      };
      var _abbr$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("abbr"));
      var abbr$prime = function(dictUnion) {
        return _abbr$prime;
      };
      var abbr = function(dictUnion) {
        return React_Basic.element(abbr$prime());
      };
      var abbr_ = function(children) {
        return abbr()({
          children
        });
      };
      var _a$prime = Effect_Unsafe.unsafePerformEffect(React_Basic_DOM_Internal.unsafeCreateDOMComponent("a"));
      var a$prime = function(dictUnion) {
        return _a$prime;
      };
      var a = function(dictUnion) {
        return React_Basic.element(a$prime());
      };
      var a_ = function(children) {
        return a()({
          children
        });
      };
      module.exports = {
        a,
        a_,
        "a'": a$prime,
        "_a'": _a$prime,
        abbr,
        abbr_,
        "abbr'": abbr$prime,
        "_abbr'": _abbr$prime,
        address,
        address_,
        "address'": address$prime,
        "_address'": _address$prime,
        area,
        "area'": area$prime,
        "_area'": _area$prime,
        article,
        article_,
        "article'": article$prime,
        "_article'": _article$prime,
        aside,
        aside_,
        "aside'": aside$prime,
        "_aside'": _aside$prime,
        audio,
        audio_,
        "audio'": audio$prime,
        "_audio'": _audio$prime,
        b,
        b_,
        "b'": b$prime,
        "_b'": _b$prime,
        base,
        "base'": base$prime,
        "_base'": _base$prime,
        bdi,
        bdi_,
        "bdi'": bdi$prime,
        "_bdi'": _bdi$prime,
        bdo,
        bdo_,
        "bdo'": bdo$prime,
        "_bdo'": _bdo$prime,
        blockquote,
        blockquote_,
        "blockquote'": blockquote$prime,
        "_blockquote'": _blockquote$prime,
        body,
        body_,
        "body'": body$prime,
        "_body'": _body$prime,
        br,
        "br'": br$prime,
        "_br'": _br$prime,
        button,
        button_,
        "button'": button$prime,
        "_button'": _button$prime,
        canvas,
        canvas_,
        "canvas'": canvas$prime,
        "_canvas'": _canvas$prime,
        caption,
        caption_,
        "caption'": caption$prime,
        "_caption'": _caption$prime,
        cite,
        cite_,
        "cite'": cite$prime,
        "_cite'": _cite$prime,
        code,
        code_,
        "code'": code$prime,
        "_code'": _code$prime,
        col,
        "col'": col$prime,
        "_col'": _col$prime,
        colgroup,
        colgroup_,
        "colgroup'": colgroup$prime,
        "_colgroup'": _colgroup$prime,
        "data'": data$prime,
        data_,
        "data''": data$prime$prime,
        "_data'": _data$prime,
        datalist,
        datalist_,
        "datalist'": datalist$prime,
        "_datalist'": _datalist$prime,
        dd,
        dd_,
        "dd'": dd$prime,
        "_dd'": _dd$prime,
        del,
        del_,
        "del'": del$prime,
        "_del'": _del$prime,
        details,
        details_,
        "details'": details$prime,
        "_details'": _details$prime,
        dfn,
        dfn_,
        "dfn'": dfn$prime,
        "_dfn'": _dfn$prime,
        dialog,
        dialog_,
        "dialog'": dialog$prime,
        "_dialog'": _dialog$prime,
        div,
        div_,
        "div'": div$prime,
        "_div'": _div$prime,
        dl,
        dl_,
        "dl'": dl$prime,
        "_dl'": _dl$prime,
        dt,
        dt_,
        "dt'": dt$prime,
        "_dt'": _dt$prime,
        em,
        em_,
        "em'": em$prime,
        "_em'": _em$prime,
        embed,
        "embed'": embed$prime,
        "_embed'": _embed$prime,
        fieldset,
        fieldset_,
        "fieldset'": fieldset$prime,
        "_fieldset'": _fieldset$prime,
        figcaption,
        figcaption_,
        "figcaption'": figcaption$prime,
        "_figcaption'": _figcaption$prime,
        figure,
        figure_,
        "figure'": figure$prime,
        "_figure'": _figure$prime,
        footer,
        footer_,
        "footer'": footer$prime,
        "_footer'": _footer$prime,
        form,
        form_,
        "form'": form$prime,
        "_form'": _form$prime,
        h1,
        h1_,
        "h1'": h1$prime,
        "_h1'": _h1$prime,
        h2,
        h2_,
        "h2'": h2$prime,
        "_h2'": _h2$prime,
        h3,
        h3_,
        "h3'": h3$prime,
        "_h3'": _h3$prime,
        h4,
        h4_,
        "h4'": h4$prime,
        "_h4'": _h4$prime,
        h5,
        h5_,
        "h5'": h5$prime,
        "_h5'": _h5$prime,
        h6,
        h6_,
        "h6'": h6$prime,
        "_h6'": _h6$prime,
        head,
        head_,
        "head'": head$prime,
        "_head'": _head$prime,
        header,
        header_,
        "header'": header$prime,
        "_header'": _header$prime,
        hgroup,
        hgroup_,
        "hgroup'": hgroup$prime,
        "_hgroup'": _hgroup$prime,
        hr,
        "hr'": hr$prime,
        "_hr'": _hr$prime,
        html,
        html_,
        "html'": html$prime,
        "_html'": _html$prime,
        i,
        i_,
        "i'": i$prime,
        "_i'": _i$prime,
        iframe,
        iframe_,
        "iframe'": iframe$prime,
        "_iframe'": _iframe$prime,
        img,
        "img'": img$prime,
        "_img'": _img$prime,
        input,
        "input'": input$prime,
        "_input'": _input$prime,
        ins,
        ins_,
        "ins'": ins$prime,
        "_ins'": _ins$prime,
        kbd,
        kbd_,
        "kbd'": kbd$prime,
        "_kbd'": _kbd$prime,
        keygen,
        keygen_,
        "keygen'": keygen$prime,
        "_keygen'": _keygen$prime,
        label,
        label_,
        "label'": label$prime,
        "_label'": _label$prime,
        legend,
        legend_,
        "legend'": legend$prime,
        "_legend'": _legend$prime,
        li,
        li_,
        "li'": li$prime,
        "_li'": _li$prime,
        link,
        "link'": link$prime,
        "_link'": _link$prime,
        main: main2,
        main_,
        "main'": main$prime,
        "_main'": _main$prime,
        map,
        map_,
        "map'": map$prime,
        "_map'": _map$prime,
        mark,
        mark_,
        "mark'": mark$prime,
        "_mark'": _mark$prime,
        math,
        math_,
        "math'": math$prime,
        "_math'": _math$prime,
        menu,
        menu_,
        "menu'": menu$prime,
        "_menu'": _menu$prime,
        menuitem,
        menuitem_,
        "menuitem'": menuitem$prime,
        "_menuitem'": _menuitem$prime,
        meta,
        "meta'": meta$prime,
        "_meta'": _meta$prime,
        meter,
        meter_,
        "meter'": meter$prime,
        "_meter'": _meter$prime,
        nav,
        nav_,
        "nav'": nav$prime,
        "_nav'": _nav$prime,
        noscript,
        noscript_,
        "noscript'": noscript$prime,
        "_noscript'": _noscript$prime,
        object,
        object_,
        "object'": object$prime,
        "_object'": _object$prime,
        ol,
        ol_,
        "ol'": ol$prime,
        "_ol'": _ol$prime,
        optgroup,
        optgroup_,
        "optgroup'": optgroup$prime,
        "_optgroup'": _optgroup$prime,
        option,
        option_,
        "option'": option$prime,
        "_option'": _option$prime,
        output,
        output_,
        "output'": output$prime,
        "_output'": _output$prime,
        p,
        p_,
        "p'": p$prime,
        "_p'": _p$prime,
        param,
        "param'": param$prime,
        "_param'": _param$prime,
        picture,
        picture_,
        "picture'": picture$prime,
        "_picture'": _picture$prime,
        pre,
        pre_,
        "pre'": pre$prime,
        "_pre'": _pre$prime,
        progress,
        progress_,
        "progress'": progress$prime,
        "_progress'": _progress$prime,
        q,
        q_,
        "q'": q$prime,
        "_q'": _q$prime,
        rb,
        rb_,
        "rb'": rb$prime,
        "_rb'": _rb$prime,
        rp,
        rp_,
        "rp'": rp$prime,
        "_rp'": _rp$prime,
        rt,
        rt_,
        "rt'": rt$prime,
        "_rt'": _rt$prime,
        rtc,
        rtc_,
        "rtc'": rtc$prime,
        "_rtc'": _rtc$prime,
        ruby,
        ruby_,
        "ruby'": ruby$prime,
        "_ruby'": _ruby$prime,
        s,
        s_,
        "s'": s$prime,
        "_s'": _s$prime,
        samp,
        samp_,
        "samp'": samp$prime,
        "_samp'": _samp$prime,
        script,
        script_,
        "script'": script$prime,
        "_script'": _script$prime,
        section,
        section_,
        "section'": section$prime,
        "_section'": _section$prime,
        select,
        select_,
        "select'": select$prime,
        "_select'": _select$prime,
        slot,
        slot_,
        "slot'": slot$prime,
        "_slot'": _slot$prime,
        small,
        small_,
        "small'": small$prime,
        "_small'": _small$prime,
        source,
        "source'": source$prime,
        "_source'": _source$prime,
        span,
        span_,
        "span'": span$prime,
        "_span'": _span$prime,
        strong,
        strong_,
        "strong'": strong$prime,
        "_strong'": _strong$prime,
        style,
        style_,
        "style'": style$prime,
        "_style'": _style$prime,
        sub,
        sub_,
        "sub'": sub$prime,
        "_sub'": _sub$prime,
        summary,
        summary_,
        "summary'": summary$prime,
        "_summary'": _summary$prime,
        sup,
        sup_,
        "sup'": sup$prime,
        "_sup'": _sup$prime,
        table,
        table_,
        "table'": table$prime,
        "_table'": _table$prime,
        tbody,
        tbody_,
        "tbody'": tbody$prime,
        "_tbody'": _tbody$prime,
        td,
        td_,
        "td'": td$prime,
        "_td'": _td$prime,
        template,
        template_,
        "template'": template$prime,
        "_template'": _template$prime,
        textarea,
        textarea_,
        "textarea'": textarea$prime,
        "_textarea'": _textarea$prime,
        tfoot,
        tfoot_,
        "tfoot'": tfoot$prime,
        "_tfoot'": _tfoot$prime,
        th,
        th_,
        "th'": th$prime,
        "_th'": _th$prime,
        thead,
        thead_,
        "thead'": thead$prime,
        "_thead'": _thead$prime,
        time,
        time_,
        "time'": time$prime,
        "_time'": _time$prime,
        title,
        title_,
        "title'": title$prime,
        "_title'": _title$prime,
        tr,
        tr_,
        "tr'": tr$prime,
        "_tr'": _tr$prime,
        track,
        "track'": track$prime,
        "_track'": _track$prime,
        u,
        u_,
        "u'": u$prime,
        "_u'": _u$prime,
        ul,
        ul_,
        "ul'": ul$prime,
        "_ul'": _ul$prime,
        "var": $$var,
        var_,
        "var'": var$prime,
        "_var'": _var$prime,
        video,
        video_,
        "video'": video$prime,
        "_video'": _video$prime,
        wbr,
        "wbr'": wbr$prime,
        "_wbr'": _wbr$prime
      };
    }
  });

  // output/React.Basic.DOM/index.js
  var require_React_Basic = __commonJS({
    "output/React.Basic.DOM/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign45();
      var Control_Applicative = require_Control4();
      var Data_Unit = require_Data3();
      var Effect = require_Effect();
      var React_Basic_DOM_Generated = require_React_Basic_DOM2();
      var React_Basic_DOM_Internal = require_React_Basic_DOM();
      var Unsafe_Coerce = require_Unsafe();
      var text = Unsafe_Coerce.unsafeCoerce;
      var render$prime = $foreign.renderThen;
      var render = function(jsx) {
        return function(node) {
          return render$prime(jsx)(node)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
        };
      };
      var hydrate$prime = $foreign.hydrateThen;
      var hydrate = function(jsx) {
        return function(node) {
          return hydrate$prime(jsx)(node)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
        };
      };
      module.exports = {
        render,
        "render'": render$prime,
        hydrate,
        "hydrate'": hydrate$prime,
        text,
        unmount: $foreign.unmount,
        createPortal: $foreign.createPortal,
        a: React_Basic_DOM_Generated.a,
        "a'": React_Basic_DOM_Generated["a'"],
        a_: React_Basic_DOM_Generated.a_,
        abbr: React_Basic_DOM_Generated.abbr,
        "abbr'": React_Basic_DOM_Generated["abbr'"],
        abbr_: React_Basic_DOM_Generated.abbr_,
        address: React_Basic_DOM_Generated.address,
        "address'": React_Basic_DOM_Generated["address'"],
        address_: React_Basic_DOM_Generated.address_,
        area: React_Basic_DOM_Generated.area,
        "area'": React_Basic_DOM_Generated["area'"],
        article: React_Basic_DOM_Generated.article,
        "article'": React_Basic_DOM_Generated["article'"],
        article_: React_Basic_DOM_Generated.article_,
        aside: React_Basic_DOM_Generated.aside,
        "aside'": React_Basic_DOM_Generated["aside'"],
        aside_: React_Basic_DOM_Generated.aside_,
        audio: React_Basic_DOM_Generated.audio,
        "audio'": React_Basic_DOM_Generated["audio'"],
        audio_: React_Basic_DOM_Generated.audio_,
        b: React_Basic_DOM_Generated.b,
        "b'": React_Basic_DOM_Generated["b'"],
        b_: React_Basic_DOM_Generated.b_,
        base: React_Basic_DOM_Generated.base,
        "base'": React_Basic_DOM_Generated["base'"],
        bdi: React_Basic_DOM_Generated.bdi,
        "bdi'": React_Basic_DOM_Generated["bdi'"],
        bdi_: React_Basic_DOM_Generated.bdi_,
        bdo: React_Basic_DOM_Generated.bdo,
        "bdo'": React_Basic_DOM_Generated["bdo'"],
        bdo_: React_Basic_DOM_Generated.bdo_,
        blockquote: React_Basic_DOM_Generated.blockquote,
        "blockquote'": React_Basic_DOM_Generated["blockquote'"],
        blockquote_: React_Basic_DOM_Generated.blockquote_,
        body: React_Basic_DOM_Generated.body,
        "body'": React_Basic_DOM_Generated["body'"],
        body_: React_Basic_DOM_Generated.body_,
        br: React_Basic_DOM_Generated.br,
        "br'": React_Basic_DOM_Generated["br'"],
        button: React_Basic_DOM_Generated.button,
        "button'": React_Basic_DOM_Generated["button'"],
        button_: React_Basic_DOM_Generated.button_,
        canvas: React_Basic_DOM_Generated.canvas,
        "canvas'": React_Basic_DOM_Generated["canvas'"],
        canvas_: React_Basic_DOM_Generated.canvas_,
        caption: React_Basic_DOM_Generated.caption,
        "caption'": React_Basic_DOM_Generated["caption'"],
        caption_: React_Basic_DOM_Generated.caption_,
        cite: React_Basic_DOM_Generated.cite,
        "cite'": React_Basic_DOM_Generated["cite'"],
        cite_: React_Basic_DOM_Generated.cite_,
        code: React_Basic_DOM_Generated.code,
        "code'": React_Basic_DOM_Generated["code'"],
        code_: React_Basic_DOM_Generated.code_,
        col: React_Basic_DOM_Generated.col,
        "col'": React_Basic_DOM_Generated["col'"],
        colgroup: React_Basic_DOM_Generated.colgroup,
        "colgroup'": React_Basic_DOM_Generated["colgroup'"],
        colgroup_: React_Basic_DOM_Generated.colgroup_,
        "data'": React_Basic_DOM_Generated["data'"],
        "data''": React_Basic_DOM_Generated["data''"],
        data_: React_Basic_DOM_Generated.data_,
        datalist: React_Basic_DOM_Generated.datalist,
        "datalist'": React_Basic_DOM_Generated["datalist'"],
        datalist_: React_Basic_DOM_Generated.datalist_,
        dd: React_Basic_DOM_Generated.dd,
        "dd'": React_Basic_DOM_Generated["dd'"],
        dd_: React_Basic_DOM_Generated.dd_,
        del: React_Basic_DOM_Generated.del,
        "del'": React_Basic_DOM_Generated["del'"],
        del_: React_Basic_DOM_Generated.del_,
        details: React_Basic_DOM_Generated.details,
        "details'": React_Basic_DOM_Generated["details'"],
        details_: React_Basic_DOM_Generated.details_,
        dfn: React_Basic_DOM_Generated.dfn,
        "dfn'": React_Basic_DOM_Generated["dfn'"],
        dfn_: React_Basic_DOM_Generated.dfn_,
        dialog: React_Basic_DOM_Generated.dialog,
        "dialog'": React_Basic_DOM_Generated["dialog'"],
        dialog_: React_Basic_DOM_Generated.dialog_,
        div: React_Basic_DOM_Generated.div,
        "div'": React_Basic_DOM_Generated["div'"],
        div_: React_Basic_DOM_Generated.div_,
        dl: React_Basic_DOM_Generated.dl,
        "dl'": React_Basic_DOM_Generated["dl'"],
        dl_: React_Basic_DOM_Generated.dl_,
        dt: React_Basic_DOM_Generated.dt,
        "dt'": React_Basic_DOM_Generated["dt'"],
        dt_: React_Basic_DOM_Generated.dt_,
        em: React_Basic_DOM_Generated.em,
        "em'": React_Basic_DOM_Generated["em'"],
        em_: React_Basic_DOM_Generated.em_,
        embed: React_Basic_DOM_Generated.embed,
        "embed'": React_Basic_DOM_Generated["embed'"],
        fieldset: React_Basic_DOM_Generated.fieldset,
        "fieldset'": React_Basic_DOM_Generated["fieldset'"],
        fieldset_: React_Basic_DOM_Generated.fieldset_,
        figcaption: React_Basic_DOM_Generated.figcaption,
        "figcaption'": React_Basic_DOM_Generated["figcaption'"],
        figcaption_: React_Basic_DOM_Generated.figcaption_,
        figure: React_Basic_DOM_Generated.figure,
        "figure'": React_Basic_DOM_Generated["figure'"],
        figure_: React_Basic_DOM_Generated.figure_,
        footer: React_Basic_DOM_Generated.footer,
        "footer'": React_Basic_DOM_Generated["footer'"],
        footer_: React_Basic_DOM_Generated.footer_,
        form: React_Basic_DOM_Generated.form,
        "form'": React_Basic_DOM_Generated["form'"],
        form_: React_Basic_DOM_Generated.form_,
        h1: React_Basic_DOM_Generated.h1,
        "h1'": React_Basic_DOM_Generated["h1'"],
        h1_: React_Basic_DOM_Generated.h1_,
        h2: React_Basic_DOM_Generated.h2,
        "h2'": React_Basic_DOM_Generated["h2'"],
        h2_: React_Basic_DOM_Generated.h2_,
        h3: React_Basic_DOM_Generated.h3,
        "h3'": React_Basic_DOM_Generated["h3'"],
        h3_: React_Basic_DOM_Generated.h3_,
        h4: React_Basic_DOM_Generated.h4,
        "h4'": React_Basic_DOM_Generated["h4'"],
        h4_: React_Basic_DOM_Generated.h4_,
        h5: React_Basic_DOM_Generated.h5,
        "h5'": React_Basic_DOM_Generated["h5'"],
        h5_: React_Basic_DOM_Generated.h5_,
        h6: React_Basic_DOM_Generated.h6,
        "h6'": React_Basic_DOM_Generated["h6'"],
        h6_: React_Basic_DOM_Generated.h6_,
        head: React_Basic_DOM_Generated.head,
        "head'": React_Basic_DOM_Generated["head'"],
        head_: React_Basic_DOM_Generated.head_,
        header: React_Basic_DOM_Generated.header,
        "header'": React_Basic_DOM_Generated["header'"],
        header_: React_Basic_DOM_Generated.header_,
        hgroup: React_Basic_DOM_Generated.hgroup,
        "hgroup'": React_Basic_DOM_Generated["hgroup'"],
        hgroup_: React_Basic_DOM_Generated.hgroup_,
        hr: React_Basic_DOM_Generated.hr,
        "hr'": React_Basic_DOM_Generated["hr'"],
        html: React_Basic_DOM_Generated.html,
        "html'": React_Basic_DOM_Generated["html'"],
        html_: React_Basic_DOM_Generated.html_,
        i: React_Basic_DOM_Generated.i,
        "i'": React_Basic_DOM_Generated["i'"],
        i_: React_Basic_DOM_Generated.i_,
        iframe: React_Basic_DOM_Generated.iframe,
        "iframe'": React_Basic_DOM_Generated["iframe'"],
        iframe_: React_Basic_DOM_Generated.iframe_,
        img: React_Basic_DOM_Generated.img,
        "img'": React_Basic_DOM_Generated["img'"],
        input: React_Basic_DOM_Generated.input,
        "input'": React_Basic_DOM_Generated["input'"],
        ins: React_Basic_DOM_Generated.ins,
        "ins'": React_Basic_DOM_Generated["ins'"],
        ins_: React_Basic_DOM_Generated.ins_,
        kbd: React_Basic_DOM_Generated.kbd,
        "kbd'": React_Basic_DOM_Generated["kbd'"],
        kbd_: React_Basic_DOM_Generated.kbd_,
        keygen: React_Basic_DOM_Generated.keygen,
        "keygen'": React_Basic_DOM_Generated["keygen'"],
        keygen_: React_Basic_DOM_Generated.keygen_,
        label: React_Basic_DOM_Generated.label,
        "label'": React_Basic_DOM_Generated["label'"],
        label_: React_Basic_DOM_Generated.label_,
        legend: React_Basic_DOM_Generated.legend,
        "legend'": React_Basic_DOM_Generated["legend'"],
        legend_: React_Basic_DOM_Generated.legend_,
        li: React_Basic_DOM_Generated.li,
        "li'": React_Basic_DOM_Generated["li'"],
        li_: React_Basic_DOM_Generated.li_,
        link: React_Basic_DOM_Generated.link,
        "link'": React_Basic_DOM_Generated["link'"],
        main: React_Basic_DOM_Generated.main,
        "main'": React_Basic_DOM_Generated["main'"],
        main_: React_Basic_DOM_Generated.main_,
        map: React_Basic_DOM_Generated.map,
        "map'": React_Basic_DOM_Generated["map'"],
        map_: React_Basic_DOM_Generated.map_,
        mark: React_Basic_DOM_Generated.mark,
        "mark'": React_Basic_DOM_Generated["mark'"],
        mark_: React_Basic_DOM_Generated.mark_,
        math: React_Basic_DOM_Generated.math,
        "math'": React_Basic_DOM_Generated["math'"],
        math_: React_Basic_DOM_Generated.math_,
        menu: React_Basic_DOM_Generated.menu,
        "menu'": React_Basic_DOM_Generated["menu'"],
        menu_: React_Basic_DOM_Generated.menu_,
        menuitem: React_Basic_DOM_Generated.menuitem,
        "menuitem'": React_Basic_DOM_Generated["menuitem'"],
        menuitem_: React_Basic_DOM_Generated.menuitem_,
        meta: React_Basic_DOM_Generated.meta,
        "meta'": React_Basic_DOM_Generated["meta'"],
        meter: React_Basic_DOM_Generated.meter,
        "meter'": React_Basic_DOM_Generated["meter'"],
        meter_: React_Basic_DOM_Generated.meter_,
        nav: React_Basic_DOM_Generated.nav,
        "nav'": React_Basic_DOM_Generated["nav'"],
        nav_: React_Basic_DOM_Generated.nav_,
        noscript: React_Basic_DOM_Generated.noscript,
        "noscript'": React_Basic_DOM_Generated["noscript'"],
        noscript_: React_Basic_DOM_Generated.noscript_,
        object: React_Basic_DOM_Generated.object,
        "object'": React_Basic_DOM_Generated["object'"],
        object_: React_Basic_DOM_Generated.object_,
        ol: React_Basic_DOM_Generated.ol,
        "ol'": React_Basic_DOM_Generated["ol'"],
        ol_: React_Basic_DOM_Generated.ol_,
        optgroup: React_Basic_DOM_Generated.optgroup,
        "optgroup'": React_Basic_DOM_Generated["optgroup'"],
        optgroup_: React_Basic_DOM_Generated.optgroup_,
        option: React_Basic_DOM_Generated.option,
        "option'": React_Basic_DOM_Generated["option'"],
        option_: React_Basic_DOM_Generated.option_,
        output: React_Basic_DOM_Generated.output,
        "output'": React_Basic_DOM_Generated["output'"],
        output_: React_Basic_DOM_Generated.output_,
        p: React_Basic_DOM_Generated.p,
        "p'": React_Basic_DOM_Generated["p'"],
        p_: React_Basic_DOM_Generated.p_,
        param: React_Basic_DOM_Generated.param,
        "param'": React_Basic_DOM_Generated["param'"],
        picture: React_Basic_DOM_Generated.picture,
        "picture'": React_Basic_DOM_Generated["picture'"],
        picture_: React_Basic_DOM_Generated.picture_,
        pre: React_Basic_DOM_Generated.pre,
        "pre'": React_Basic_DOM_Generated["pre'"],
        pre_: React_Basic_DOM_Generated.pre_,
        progress: React_Basic_DOM_Generated.progress,
        "progress'": React_Basic_DOM_Generated["progress'"],
        progress_: React_Basic_DOM_Generated.progress_,
        q: React_Basic_DOM_Generated.q,
        "q'": React_Basic_DOM_Generated["q'"],
        q_: React_Basic_DOM_Generated.q_,
        rb: React_Basic_DOM_Generated.rb,
        "rb'": React_Basic_DOM_Generated["rb'"],
        rb_: React_Basic_DOM_Generated.rb_,
        rp: React_Basic_DOM_Generated.rp,
        "rp'": React_Basic_DOM_Generated["rp'"],
        rp_: React_Basic_DOM_Generated.rp_,
        rt: React_Basic_DOM_Generated.rt,
        "rt'": React_Basic_DOM_Generated["rt'"],
        rt_: React_Basic_DOM_Generated.rt_,
        rtc: React_Basic_DOM_Generated.rtc,
        "rtc'": React_Basic_DOM_Generated["rtc'"],
        rtc_: React_Basic_DOM_Generated.rtc_,
        ruby: React_Basic_DOM_Generated.ruby,
        "ruby'": React_Basic_DOM_Generated["ruby'"],
        ruby_: React_Basic_DOM_Generated.ruby_,
        s: React_Basic_DOM_Generated.s,
        "s'": React_Basic_DOM_Generated["s'"],
        s_: React_Basic_DOM_Generated.s_,
        samp: React_Basic_DOM_Generated.samp,
        "samp'": React_Basic_DOM_Generated["samp'"],
        samp_: React_Basic_DOM_Generated.samp_,
        script: React_Basic_DOM_Generated.script,
        "script'": React_Basic_DOM_Generated["script'"],
        script_: React_Basic_DOM_Generated.script_,
        section: React_Basic_DOM_Generated.section,
        "section'": React_Basic_DOM_Generated["section'"],
        section_: React_Basic_DOM_Generated.section_,
        select: React_Basic_DOM_Generated.select,
        "select'": React_Basic_DOM_Generated["select'"],
        select_: React_Basic_DOM_Generated.select_,
        slot: React_Basic_DOM_Generated.slot,
        "slot'": React_Basic_DOM_Generated["slot'"],
        slot_: React_Basic_DOM_Generated.slot_,
        small: React_Basic_DOM_Generated.small,
        "small'": React_Basic_DOM_Generated["small'"],
        small_: React_Basic_DOM_Generated.small_,
        source: React_Basic_DOM_Generated.source,
        "source'": React_Basic_DOM_Generated["source'"],
        span: React_Basic_DOM_Generated.span,
        "span'": React_Basic_DOM_Generated["span'"],
        span_: React_Basic_DOM_Generated.span_,
        strong: React_Basic_DOM_Generated.strong,
        "strong'": React_Basic_DOM_Generated["strong'"],
        strong_: React_Basic_DOM_Generated.strong_,
        style: React_Basic_DOM_Generated.style,
        "style'": React_Basic_DOM_Generated["style'"],
        style_: React_Basic_DOM_Generated.style_,
        sub: React_Basic_DOM_Generated.sub,
        "sub'": React_Basic_DOM_Generated["sub'"],
        sub_: React_Basic_DOM_Generated.sub_,
        summary: React_Basic_DOM_Generated.summary,
        "summary'": React_Basic_DOM_Generated["summary'"],
        summary_: React_Basic_DOM_Generated.summary_,
        sup: React_Basic_DOM_Generated.sup,
        "sup'": React_Basic_DOM_Generated["sup'"],
        sup_: React_Basic_DOM_Generated.sup_,
        table: React_Basic_DOM_Generated.table,
        "table'": React_Basic_DOM_Generated["table'"],
        table_: React_Basic_DOM_Generated.table_,
        tbody: React_Basic_DOM_Generated.tbody,
        "tbody'": React_Basic_DOM_Generated["tbody'"],
        tbody_: React_Basic_DOM_Generated.tbody_,
        td: React_Basic_DOM_Generated.td,
        "td'": React_Basic_DOM_Generated["td'"],
        td_: React_Basic_DOM_Generated.td_,
        template: React_Basic_DOM_Generated.template,
        "template'": React_Basic_DOM_Generated["template'"],
        template_: React_Basic_DOM_Generated.template_,
        textarea: React_Basic_DOM_Generated.textarea,
        "textarea'": React_Basic_DOM_Generated["textarea'"],
        textarea_: React_Basic_DOM_Generated.textarea_,
        tfoot: React_Basic_DOM_Generated.tfoot,
        "tfoot'": React_Basic_DOM_Generated["tfoot'"],
        tfoot_: React_Basic_DOM_Generated.tfoot_,
        th: React_Basic_DOM_Generated.th,
        "th'": React_Basic_DOM_Generated["th'"],
        th_: React_Basic_DOM_Generated.th_,
        thead: React_Basic_DOM_Generated.thead,
        "thead'": React_Basic_DOM_Generated["thead'"],
        thead_: React_Basic_DOM_Generated.thead_,
        time: React_Basic_DOM_Generated.time,
        "time'": React_Basic_DOM_Generated["time'"],
        time_: React_Basic_DOM_Generated.time_,
        title: React_Basic_DOM_Generated.title,
        "title'": React_Basic_DOM_Generated["title'"],
        title_: React_Basic_DOM_Generated.title_,
        tr: React_Basic_DOM_Generated.tr,
        "tr'": React_Basic_DOM_Generated["tr'"],
        tr_: React_Basic_DOM_Generated.tr_,
        track: React_Basic_DOM_Generated.track,
        "track'": React_Basic_DOM_Generated["track'"],
        u: React_Basic_DOM_Generated.u,
        "u'": React_Basic_DOM_Generated["u'"],
        u_: React_Basic_DOM_Generated.u_,
        ul: React_Basic_DOM_Generated.ul,
        "ul'": React_Basic_DOM_Generated["ul'"],
        ul_: React_Basic_DOM_Generated.ul_,
        "var": React_Basic_DOM_Generated["var"],
        "var'": React_Basic_DOM_Generated["var'"],
        var_: React_Basic_DOM_Generated.var_,
        video: React_Basic_DOM_Generated.video,
        "video'": React_Basic_DOM_Generated["video'"],
        video_: React_Basic_DOM_Generated.video_,
        wbr: React_Basic_DOM_Generated.wbr,
        "wbr'": React_Basic_DOM_Generated["wbr'"],
        css: React_Basic_DOM_Internal.css,
        mergeStyles: React_Basic_DOM_Internal.mergeStyles,
        unsafeCreateDOMComponent: React_Basic_DOM_Internal.unsafeCreateDOMComponent
      };
    }
  });

  // output/React.Basic.Hooks/foreign.js
  var require_foreign47 = __commonJS({
    "output/React.Basic.Hooks/foreign.js"(exports) {
      "use strict";
      var React = require_react();
      var useEqCache = (eq, a) => {
        const memoRef = React.useRef(a);
        if (memoRef.current !== a && !eq(memoRef.current, a)) {
          memoRef.current = a;
        }
        return memoRef.current;
      };
      exports.reactChildrenToArray = (children) => React.Children.toArray(children);
      exports.memo_ = React.memo;
      exports.useState_ = (tuple, initialState) => {
        const r = React.useState(initialState);
        const state = r[0];
        const setState = r[1];
        if (!setState.hasOwnProperty("$$reactBasicHooks$$cachedSetState")) {
          setState.$$reactBasicHooks$$cachedSetState = (update) => () => setState(update);
        }
        return tuple(state, setState.$$reactBasicHooks$$cachedSetState);
      };
      exports.useEffect_ = (eq, deps, effect) => {
        const memoizedKey = useEqCache(eq, deps);
        React.useEffect(effect, [memoizedKey]);
      };
      exports.useEffectAlways_ = (effect) => React.useEffect(effect);
      exports.useLayoutEffect_ = (eq, deps, effect) => {
        const memoizedKey = useEqCache(eq, deps);
        React.useLayoutEffect(effect, [memoizedKey]);
      };
      exports.useLayoutEffectAlways_ = (effect) => React.useLayoutEffect(effect);
      exports.useReducer_ = (tuple, reducer, initialState) => {
        const r = React.useReducer(reducer, initialState);
        const state = r[0];
        const dispatch = r[1];
        if (!dispatch.hasOwnProperty("$$reactBasicHooks$$cachedDispatch")) {
          dispatch.$$reactBasicHooks$$cachedDispatch = (action) => () => dispatch(action);
        }
        return tuple(state, dispatch.$$reactBasicHooks$$cachedDispatch);
      };
      exports.useRef_ = React.useRef;
      exports.readRef_ = (ref) => ref.current;
      exports.writeRef_ = (ref, a) => {
        ref.current = a;
      };
      exports.useContext_ = React.useContext;
      exports.useEqCache_ = useEqCache;
      exports.useMemo_ = (eq, deps, computeA) => {
        const memoizedKey = useEqCache(eq, deps);
        return React.useMemo(computeA, [memoizedKey]);
      };
      exports.useDebugValue_ = React.useDebugValue;
      exports.unsafeSetDisplayName = (displayName, component) => {
        component.displayName = displayName;
        component.toString = () => displayName;
        return component;
      };
      exports.displayName = (component) => typeof component === "string" ? component : component.displayName || "[unknown]";
    }
  });

  // output/Data.Nullable/foreign.js
  var require_foreign48 = __commonJS({
    "output/Data.Nullable/foreign.js"(exports) {
      "use strict";
      exports["null"] = null;
      exports.nullable = function(a, r, f) {
        return a == null ? r : f(a);
      };
      exports.notNull = function(x) {
        return x;
      };
    }
  });

  // output/Data.Nullable/index.js
  var require_Data39 = __commonJS({
    "output/Data.Nullable/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign48();
      var Data_Eq = require_Data8();
      var Data_Function = require_Data2();
      var Data_Maybe = require_Data15();
      var Data_Ord = require_Data12();
      var Data_Show = require_Data14();
      var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
      var toMaybe = function(n) {
        return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
      };
      var showNullable = function(dictShow) {
        return {
          show: function() {
            var $5 = Data_Maybe.maybe("null")(Data_Show.show(dictShow));
            return function($6) {
              return $5(toMaybe($6));
            };
          }()
        };
      };
      var eqNullable = function(dictEq) {
        return {
          eq: Data_Function.on(Data_Eq.eq(Data_Maybe.eqMaybe(dictEq)))(toMaybe)
        };
      };
      var ordNullable = function(dictOrd) {
        return {
          compare: Data_Function.on(Data_Ord.compare(Data_Maybe.ordMaybe(dictOrd)))(toMaybe),
          Eq0: function() {
            return eqNullable(dictOrd.Eq0());
          }
        };
      };
      var eq1Nullable = {
        eq1: function(dictEq) {
          return Data_Eq.eq(eqNullable(dictEq));
        }
      };
      var ord1Nullable = {
        compare1: function(dictOrd) {
          return Data_Ord.compare(ordNullable(dictOrd));
        },
        Eq10: function() {
          return eq1Nullable;
        }
      };
      module.exports = {
        toMaybe,
        toNullable,
        showNullable,
        eqNullable,
        eq1Nullable,
        ordNullable,
        ord1Nullable,
        "null": $foreign["null"],
        notNull: $foreign.notNull
      };
    }
  });

  // output/Data.Tuple.Nested/index.js
  var require_Data_Tuple = __commonJS({
    "output/Data.Tuple.Nested/index.js"(exports, module) {
      "use strict";
      var Data_Tuple = require_Data22();
      var Data_Unit = require_Data3();
      var uncurry9 = function(f$prime) {
        return function(v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0);
        };
      };
      var uncurry8 = function(f$prime) {
        return function(v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0);
        };
      };
      var uncurry7 = function(f$prime) {
        return function(v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0);
        };
      };
      var uncurry6 = function(f$prime) {
        return function(v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0);
        };
      };
      var uncurry5 = function(f) {
        return function(v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0);
        };
      };
      var uncurry4 = function(f) {
        return function(v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0);
        };
      };
      var uncurry3 = function(f) {
        return function(v) {
          return f(v.value0)(v.value1.value0)(v.value1.value1.value0);
        };
      };
      var uncurry2 = function(f) {
        return function(v) {
          return f(v.value0)(v.value1.value0);
        };
      };
      var uncurry10 = function(f$prime) {
        return function(v) {
          return f$prime(v.value0)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value0)(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0);
        };
      };
      var uncurry1 = function(f) {
        return function(v) {
          return f(v.value0);
        };
      };
      var tuple9 = function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, Data_Unit.unit)))))))));
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var tuple8 = function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, Data_Unit.unit))))))));
                    };
                  };
                };
              };
            };
          };
        };
      };
      var tuple7 = function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, Data_Unit.unit)))))));
                  };
                };
              };
            };
          };
        };
      };
      var tuple6 = function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, Data_Unit.unit))))));
                };
              };
            };
          };
        };
      };
      var tuple5 = function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, Data_Unit.unit)))));
              };
            };
          };
        };
      };
      var tuple4 = function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, Data_Unit.unit))));
            };
          };
        };
      };
      var tuple3 = function(a) {
        return function(b) {
          return function(c) {
            return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, Data_Unit.unit)));
          };
        };
      };
      var tuple2 = function(a) {
        return function(b) {
          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, Data_Unit.unit));
        };
      };
      var tuple10 = function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return function(e) {
                return function(f) {
                  return function(g) {
                    return function(h) {
                      return function(i) {
                        return function(j) {
                          return new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, Data_Unit.unit))))))))));
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var tuple1 = function(a) {
        return new Data_Tuple.Tuple(a, Data_Unit.unit);
      };
      var over9 = function(o) {
        return function(v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1)))))))));
        };
      };
      var over8 = function(o) {
        return function(v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1))))))));
        };
      };
      var over7 = function(o) {
        return function(v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1)))))));
        };
      };
      var over6 = function(o) {
        return function(v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1))))));
        };
      };
      var over5 = function(o) {
        return function(v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1)))));
        };
      };
      var over4 = function(o) {
        return function(v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value0), v.value1.value1.value1.value1))));
        };
      };
      var over3 = function(o) {
        return function(v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value0), v.value1.value1.value1)));
        };
      };
      var over2 = function(o) {
        return function(v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(o(v.value1.value0), v.value1.value1));
        };
      };
      var over10 = function(o) {
        return function(v) {
          return new Data_Tuple.Tuple(v.value0, new Data_Tuple.Tuple(v.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(v.value1.value1.value1.value1.value1.value1.value1.value1.value0, new Data_Tuple.Tuple(o(v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0), v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value1))))))))));
        };
      };
      var over1 = function(o) {
        return function(v) {
          return new Data_Tuple.Tuple(o(v.value0), v.value1);
        };
      };
      var get9 = function(v) {
        return v.value1.value1.value1.value1.value1.value1.value1.value1.value0;
      };
      var get8 = function(v) {
        return v.value1.value1.value1.value1.value1.value1.value1.value0;
      };
      var get7 = function(v) {
        return v.value1.value1.value1.value1.value1.value1.value0;
      };
      var get6 = function(v) {
        return v.value1.value1.value1.value1.value1.value0;
      };
      var get5 = function(v) {
        return v.value1.value1.value1.value1.value0;
      };
      var get4 = function(v) {
        return v.value1.value1.value1.value0;
      };
      var get3 = function(v) {
        return v.value1.value1.value0;
      };
      var get2 = function(v) {
        return v.value1.value0;
      };
      var get10 = function(v) {
        return v.value1.value1.value1.value1.value1.value1.value1.value1.value1.value0;
      };
      var get1 = function(v) {
        return v.value0;
      };
      var curry9 = function(z) {
        return function(f$prime) {
          return function(a) {
            return function(b) {
              return function(c) {
                return function(d) {
                  return function(e) {
                    return function(f) {
                      return function(g) {
                        return function(h) {
                          return function(i) {
                            return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, z))))))))));
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var curry8 = function(z) {
        return function(f$prime) {
          return function(a) {
            return function(b) {
              return function(c) {
                return function(d) {
                  return function(e) {
                    return function(f) {
                      return function(g) {
                        return function(h) {
                          return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, z)))))))));
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var curry7 = function(z) {
        return function(f$prime) {
          return function(a) {
            return function(b) {
              return function(c) {
                return function(d) {
                  return function(e) {
                    return function(f) {
                      return function(g) {
                        return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, z))))))));
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var curry6 = function(z) {
        return function(f$prime) {
          return function(a) {
            return function(b) {
              return function(c) {
                return function(d) {
                  return function(e) {
                    return function(f) {
                      return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, z)))))));
                    };
                  };
                };
              };
            };
          };
        };
      };
      var curry5 = function(z) {
        return function(f) {
          return function(a) {
            return function(b) {
              return function(c) {
                return function(d) {
                  return function(e) {
                    return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, z))))));
                  };
                };
              };
            };
          };
        };
      };
      var curry4 = function(z) {
        return function(f) {
          return function(a) {
            return function(b) {
              return function(c) {
                return function(d) {
                  return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, z)))));
                };
              };
            };
          };
        };
      };
      var curry3 = function(z) {
        return function(f) {
          return function(a) {
            return function(b) {
              return function(c) {
                return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, z))));
              };
            };
          };
        };
      };
      var curry2 = function(z) {
        return function(f) {
          return function(a) {
            return function(b) {
              return f(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, z)));
            };
          };
        };
      };
      var curry10 = function(z) {
        return function(f$prime) {
          return function(a) {
            return function(b) {
              return function(c) {
                return function(d) {
                  return function(e) {
                    return function(f) {
                      return function(g) {
                        return function(h) {
                          return function(i) {
                            return function(j) {
                              return f$prime(new Data_Tuple.Tuple(a, new Data_Tuple.Tuple(b, new Data_Tuple.Tuple(c, new Data_Tuple.Tuple(d, new Data_Tuple.Tuple(e, new Data_Tuple.Tuple(f, new Data_Tuple.Tuple(g, new Data_Tuple.Tuple(h, new Data_Tuple.Tuple(i, new Data_Tuple.Tuple(j, z)))))))))));
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        };
      };
      var curry1 = function(z) {
        return function(f) {
          return function(a) {
            return f(new Data_Tuple.Tuple(a, z));
          };
        };
      };
      module.exports = {
        tuple1,
        tuple2,
        tuple3,
        tuple4,
        tuple5,
        tuple6,
        tuple7,
        tuple8,
        tuple9,
        tuple10,
        get1,
        get2,
        get3,
        get4,
        get5,
        get6,
        get7,
        get8,
        get9,
        get10,
        over1,
        over2,
        over3,
        over4,
        over5,
        over6,
        over7,
        over8,
        over9,
        over10,
        uncurry1,
        uncurry2,
        uncurry3,
        uncurry4,
        uncurry5,
        uncurry6,
        uncurry7,
        uncurry8,
        uncurry9,
        uncurry10,
        curry1,
        curry2,
        curry3,
        curry4,
        curry5,
        curry6,
        curry7,
        curry8,
        curry9,
        curry10
      };
    }
  });

  // output/Unsafe.Reference/foreign.js
  var require_foreign49 = __commonJS({
    "output/Unsafe.Reference/foreign.js"(exports) {
      "use strict";
      exports.reallyUnsafeRefEq = function(a) {
        return function(b) {
          return a === b;
        };
      };
    }
  });

  // output/Unsafe.Reference/index.js
  var require_Unsafe2 = __commonJS({
    "output/Unsafe.Reference/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign49();
      var Data_Eq = require_Data8();
      var UnsafeRefEqFallback = function(x) {
        return x;
      };
      var UnsafeRefEq = function(x) {
        return x;
      };
      var unsafeRefEq = $foreign.reallyUnsafeRefEq;
      var eqUnsafeRefEqFallback = function(dictEq) {
        return {
          eq: function(v) {
            return function(v1) {
              return unsafeRefEq(v)(v1) || Data_Eq.eq(dictEq)(v)(v1);
            };
          }
        };
      };
      var eqUnsafeRefEq = {
        eq: function(v) {
          return function(v1) {
            return unsafeRefEq(v)(v1);
          };
        }
      };
      module.exports = {
        unsafeRefEq,
        UnsafeRefEq,
        UnsafeRefEqFallback,
        eqUnsafeRefEq,
        eqUnsafeRefEqFallback,
        reallyUnsafeRefEq: $foreign.reallyUnsafeRefEq
      };
    }
  });

  // output/React.Basic.Hooks/index.js
  var require_React_Basic2 = __commonJS({
    "output/React.Basic.Hooks/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign47();
      var Control_Applicative = require_Control4();
      var Control_Bind = require_Control5();
      var Data_Bifunctor = require_Data25();
      var Data_Eq = require_Data8();
      var Data_Function = require_Data2();
      var Data_Function_Uncurried = require_Data_Function();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Data_Show = require_Data14();
      var Data_Tuple = require_Data22();
      var Data_Tuple_Nested = require_Data_Tuple();
      var Data_Unit = require_Data3();
      var Effect = require_Effect();
      var Effect_Uncurried = require_Effect4();
      var React_Basic = require_React();
      var React_Basic_Hooks_Internal = require_React_Basic_Hooks();
      var Unsafe_Coerce = require_Unsafe();
      var Unsafe_Reference = require_Unsafe2();
      var UnsafeReference = function(x) {
        return x;
      };
      var Reducer = function(x) {
        return x;
      };
      var writeRef = Effect_Uncurried.runEffectFn2($foreign.writeRef_);
      var useState = function(initialState) {
        return React_Basic_Hooks_Internal.unsafeHook(function() {
          return $foreign.useState_(Data_Function_Uncurried.mkFn2(Data_Tuple.Tuple.create), initialState);
        });
      };
      var useState$prime = function(initialState) {
        return Data_Functor.mapFlipped(React_Basic_Hooks_Internal.functorRender)(useState(initialState))(Data_Bifunctor.rmap(Data_Bifunctor.bifunctorTuple)(function(v) {
          return function($27) {
            return v(Data_Function["const"]($27));
          };
        }));
      };
      var useRef = function(initialValue) {
        return React_Basic_Hooks_Internal.unsafeHook(function() {
          return $foreign.useRef_(initialValue);
        });
      };
      var useReducer = function(initialState) {
        return function(v) {
          return React_Basic_Hooks_Internal.unsafeHook(function() {
            return $foreign.useReducer_(Data_Function_Uncurried.mkFn2(Data_Tuple.Tuple.create), v, initialState);
          });
        };
      };
      var useMemo = function(dictEq) {
        return function(deps) {
          return function(computeA) {
            return React_Basic_Hooks_Internal.unsafeHook(function() {
              return $foreign.useMemo_(Data_Function_Uncurried.mkFn2(Data_Eq.eq(dictEq)), deps, computeA);
            });
          };
        };
      };
      var useLayoutEffectOnce = function(effect) {
        return React_Basic_Hooks_Internal.unsafeHook(function() {
          return $foreign.useLayoutEffect_(function(v, v1) {
            return true;
          }, Data_Unit.unit, effect);
        });
      };
      var useLayoutEffectAlways = function(effect) {
        return React_Basic_Hooks_Internal.unsafeHook(function() {
          return $foreign.useLayoutEffectAlways_(effect);
        });
      };
      var useLayoutEffect = function(dictEq) {
        return function(deps) {
          return function(effect) {
            return React_Basic_Hooks_Internal.unsafeHook(function() {
              return $foreign.useLayoutEffect_(Data_Function_Uncurried.mkFn2(Data_Eq.eq(dictEq)), deps, effect);
            });
          };
        };
      };
      var useEqCache = function(dictEq) {
        return function(a) {
          return React_Basic_Hooks_Internal.unsafeHook(function() {
            return $foreign.useEqCache_(Data_Function_Uncurried.mkFn2(Data_Eq.eq(dictEq)), a);
          });
        };
      };
      var useEffectOnce = function(effect) {
        return React_Basic_Hooks_Internal.unsafeHook(function() {
          return $foreign.useEffect_(function(v, v1) {
            return true;
          }, Data_Unit.unit, effect);
        });
      };
      var useEffectAlways = function(effect) {
        return React_Basic_Hooks_Internal.unsafeHook(function() {
          return $foreign.useEffectAlways_(effect);
        });
      };
      var useEffect = function(dictEq) {
        return function(deps) {
          return function(effect) {
            return React_Basic_Hooks_Internal.unsafeHook(function() {
              return $foreign.useEffect_(Data_Function_Uncurried.mkFn2(Data_Eq.eq(dictEq)), deps, effect);
            });
          };
        };
      };
      var useDebugValue = function(debugValue) {
        return function(display) {
          return React_Basic_Hooks_Internal.unsafeHook(function() {
            return $foreign.useDebugValue_(debugValue, display);
          });
        };
      };
      var useContext = function(context) {
        return React_Basic_Hooks_Internal.unsafeHook(function() {
          return $foreign.useContext_(context);
        });
      };
      var unsafeReactFunctionComponent = Unsafe_Coerce.unsafeCoerce;
      var unsafeDiscardRenderEffects = Unsafe_Coerce.unsafeCoerce;
      var unsafeReactComponent = function(dictLacks) {
        return function(dictLacks1) {
          return function(name) {
            return function(renderFn) {
              var c = unsafeReactFunctionComponent(function(props) {
                return unsafeDiscardRenderEffects(renderFn(props))();
              });
              return function() {
                return $foreign.unsafeSetDisplayName(name, c);
              };
            };
          };
        };
      };
      var runReducer = function(v) {
        return Data_Function_Uncurried.runFn2(v);
      };
      var readRef = Effect_Uncurried.runEffectFn1($foreign.readRef_);
      var readRefMaybe = function(a) {
        return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)(readRef(a));
      };
      var reactComponentWithChildren = function(dictLacks) {
        return function(dictLacks1) {
          return unsafeReactComponent()();
        };
      };
      var reactComponent = function(dictLacks) {
        return function(dictLacks1) {
          return function(dictLacks2) {
            return unsafeReactComponent()();
          };
        };
      };
      var reactComponentFromHook = function(dictLacks) {
        return function(dictLacks1) {
          return function(dictLacks2) {
            return function(name) {
              return function(propsToHook) {
                return reactComponent()()()(name)(function(props) {
                  return Data_Functor.map(React_Basic_Hooks_Internal.functorRender)(props.render)(propsToHook(props));
                });
              };
            };
          };
        };
      };
      var reactChildrenFromArray = Unsafe_Coerce.unsafeCoerce;
      var newtypeUnsafeReference = {
        Coercible0: function() {
          return void 0;
        }
      };
      var mkReducer = function() {
        var $28 = Control_Applicative.pure(Effect.applicativeEffect);
        return function($29) {
          return $28(Reducer(Data_Function_Uncurried.mkFn2($29)));
        };
      }();
      var memo = Data_Function.flip(Control_Bind.bind(Effect.bindEffect))(Effect_Uncurried.runEffectFn1($foreign.memo_));
      var eqUnsafeReference = {
        eq: Unsafe_Reference.unsafeRefEq
      };
      var component = function(name) {
        return function(renderFn) {
          return function __do() {
            var c = reactComponent()()()(name)(function($30) {
              return renderFn(function(v) {
                return v.nested;
              }($30));
            })();
            var $31 = React_Basic.element(c);
            return function($32) {
              return $31(function(v) {
                return {
                  nested: v
                };
              }($32));
            };
          };
        };
      };
      module.exports = {
        component,
        reactComponent,
        reactComponentWithChildren,
        reactComponentFromHook,
        reactChildrenFromArray,
        memo,
        useState,
        "useState'": useState$prime,
        useEffect,
        useEffectOnce,
        useEffectAlways,
        useLayoutEffect,
        useLayoutEffectOnce,
        useLayoutEffectAlways,
        mkReducer,
        runReducer,
        useReducer,
        readRef,
        readRefMaybe,
        writeRef,
        useRef,
        useContext,
        useEqCache,
        useMemo,
        useDebugValue,
        UnsafeReference,
        newtypeUnsafeReference,
        eqUnsafeReference,
        reactChildrenToArray: $foreign.reactChildrenToArray,
        displayName: $foreign.displayName,
        consumer: React_Basic.consumer,
        contextConsumer: React_Basic.contextConsumer,
        contextProvider: React_Basic.contextProvider,
        createContext: React_Basic.createContext,
        element: React_Basic.element,
        elementKeyed: React_Basic.elementKeyed,
        empty: React_Basic.empty,
        fragment: React_Basic.fragment,
        keyed: React_Basic.keyed,
        provider: React_Basic.provider,
        bind: React_Basic_Hooks_Internal.bind,
        coerceHook: React_Basic_Hooks_Internal.coerceHook,
        discard: React_Basic_Hooks_Internal.discard,
        unsafeHook: React_Basic_Hooks_Internal.unsafeHook,
        unsafeRenderEffect: React_Basic_Hooks_Internal.unsafeRenderEffect
      };
    }
  });

  // output/Type.Equality/index.js
  var require_Type2 = __commonJS({
    "output/Type.Equality/index.js"(exports, module) {
      "use strict";
      var refl = {
        proof: function(a) {
          return a;
        },
        Coercible0: function() {
          return void 0;
        }
      };
      var proof = function(dict) {
        return dict.proof;
      };
      var to = function(dictTypeEquals) {
        var v = proof(dictTypeEquals)(function(a) {
          return a;
        });
        return v;
      };
      var from = function(dictTypeEquals) {
        var v = proof(dictTypeEquals)(function(a) {
          return a;
        });
        return v;
      };
      module.exports = {
        proof,
        to,
        from,
        refl
      };
    }
  });

  // output/Web.DOM.NonElementParentNode/foreign.js
  var require_foreign50 = __commonJS({
    "output/Web.DOM.NonElementParentNode/foreign.js"(exports) {
      "use strict";
      exports._getElementById = function(id) {
        return function(node) {
          return function() {
            return node.getElementById(id);
          };
        };
      };
    }
  });

  // output/Web.DOM.NonElementParentNode/index.js
  var require_Web_DOM = __commonJS({
    "output/Web.DOM.NonElementParentNode/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign50();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var getElementById = function(eid) {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        var $1 = $foreign["_getElementById"](eid);
        return function($2) {
          return $0($1($2));
        };
      };
      module.exports = {
        getElementById
      };
    }
  });

  // output/Web.HTML/foreign.js
  var require_foreign51 = __commonJS({
    "output/Web.HTML/foreign.js"(exports) {
      "use strict";
      exports.window = function() {
        return window;
      };
    }
  });

  // output/Web.HTML.Common/index.js
  var require_Web_HTML = __commonJS({
    "output/Web.HTML.Common/index.js"(exports, module) {
      "use strict";
      var Data_Eq = require_Data8();
      var Data_Ord = require_Data12();
      var PropName = function(x) {
        return x;
      };
      var ClassName = function(x) {
        return x;
      };
      var AttrName = function(x) {
        return x;
      };
      var ordPropName = Data_Ord.ordString;
      var ordClassName = Data_Ord.ordString;
      var ordAttrName = Data_Ord.ordString;
      var newtypePropName = {
        Coercible0: function() {
          return void 0;
        }
      };
      var newtypeClassName = {
        Coercible0: function() {
          return void 0;
        }
      };
      var newtypeAttrName = {
        Coercible0: function() {
          return void 0;
        }
      };
      var eqPropName = Data_Eq.eqString;
      var eqClassName = Data_Eq.eqString;
      var eqAttrName = Data_Eq.eqString;
      module.exports = {
        PropName,
        AttrName,
        ClassName,
        newtypePropName,
        eqPropName,
        ordPropName,
        newtypeAttrName,
        eqAttrName,
        ordAttrName,
        newtypeClassName,
        eqClassName,
        ordClassName
      };
    }
  });

  // output/Web.HTML.HTMLAnchorElement/foreign.js
  var require_foreign52 = __commonJS({
    "output/Web.HTML.HTMLAnchorElement/foreign.js"(exports) {
      "use strict";
      exports.target = function(a) {
        return function() {
          return a.target;
        };
      };
      exports.setTarget = function(target) {
        return function(a) {
          return function() {
            a.target = target;
          };
        };
      };
      exports.download = function(a) {
        return function() {
          return a.download;
        };
      };
      exports.setDownload = function(download) {
        return function(a) {
          return function() {
            a.download = download;
          };
        };
      };
      exports.rel = function(a) {
        return function() {
          return a.rel;
        };
      };
      exports.setRel = function(rel) {
        return function(a) {
          return function() {
            a.rel = rel;
          };
        };
      };
      exports.rev = function(a) {
        return function() {
          return a.rev;
        };
      };
      exports.setRev = function(rev) {
        return function(a) {
          return function() {
            a.rev = rev;
          };
        };
      };
      exports.relList = function(a) {
        return function() {
          return a.relList;
        };
      };
      exports.hreflang = function(a) {
        return function() {
          return a.hreflang;
        };
      };
      exports.setHreflang = function(hreflang) {
        return function(a) {
          return function() {
            a.hreflang = hreflang;
          };
        };
      };
      exports.type_ = function(a) {
        return function() {
          return a.type;
        };
      };
      exports.setType = function(type) {
        return function(a) {
          return function() {
            a.type = type;
          };
        };
      };
      exports.text = function(a) {
        return function() {
          return a.text;
        };
      };
      exports.setText = function(text) {
        return function(a) {
          return function() {
            a.text = text;
          };
        };
      };
    }
  });

  // output/Web.Internal.FFI/foreign.js
  var require_foreign53 = __commonJS({
    "output/Web.Internal.FFI/foreign.js"(exports) {
      "use strict";
      exports._unsafeReadProtoTagged = function(nothing, just, name, value) {
        if (typeof window !== "undefined") {
          var ty = window[name];
          if (ty != null && value instanceof ty) {
            return just(value);
          }
        }
        var obj = value;
        while (obj != null) {
          var proto = Object.getPrototypeOf(obj);
          var constructorName = proto.constructor.name;
          if (constructorName === name) {
            return just(value);
          } else if (constructorName === "Object") {
            return nothing;
          }
          obj = proto;
        }
        return nothing;
      };
    }
  });

  // output/Web.Internal.FFI/index.js
  var require_Web_Internal = __commonJS({
    "output/Web.Internal.FFI/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign53();
      var Data_Maybe = require_Data15();
      var unsafeReadProtoTagged = function(name) {
        return function(value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
        };
      };
      module.exports = {
        unsafeReadProtoTagged
      };
    }
  });

  // output/Web.HTML.HTMLAnchorElement/index.js
  var require_Web_HTML2 = __commonJS({
    "output/Web.HTML.HTMLAnchorElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign52();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLHyperlinkElementUtils = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAnchorElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAnchorElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAnchorElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAnchorElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAnchorElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAnchorElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAnchorElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        toHTMLHyperlinkElementUtils,
        target: $foreign.target,
        setTarget: $foreign.setTarget,
        download: $foreign.download,
        setDownload: $foreign.setDownload,
        rel: $foreign.rel,
        setRel: $foreign.setRel,
        rev: $foreign.rev,
        setRev: $foreign.setRev,
        relList: $foreign.relList,
        hreflang: $foreign.hreflang,
        setHreflang: $foreign.setHreflang,
        type_: $foreign.type_,
        setType: $foreign.setType,
        text: $foreign.text,
        setText: $foreign.setText
      };
    }
  });

  // output/Web.HTML.HTMLAreaElement/foreign.js
  var require_foreign54 = __commonJS({
    "output/Web.HTML.HTMLAreaElement/foreign.js"(exports) {
      "use strict";
      exports.alt = function(area) {
        return function() {
          return area.alt;
        };
      };
      exports.setAlt = function(alt) {
        return function(area) {
          return function() {
            area.alt = alt;
          };
        };
      };
      exports.coords = function(area) {
        return function() {
          return area.coords;
        };
      };
      exports.setCoords = function(coords) {
        return function(area) {
          return function() {
            area.coords = coords;
          };
        };
      };
      exports.shape = function(area) {
        return function() {
          return area.shape;
        };
      };
      exports.setShape = function(shape) {
        return function(area) {
          return function() {
            area.shape = shape;
          };
        };
      };
      exports.target = function(area) {
        return function() {
          return area.target;
        };
      };
      exports.setTarget = function(target) {
        return function(area) {
          return function() {
            area.target = target;
          };
        };
      };
      exports.download = function(area) {
        return function() {
          return area.download;
        };
      };
      exports.setDownload = function(download) {
        return function(area) {
          return function() {
            area.download = download;
          };
        };
      };
      exports.rel = function(area) {
        return function() {
          return area.rel;
        };
      };
      exports.setRel = function(rel) {
        return function(area) {
          return function() {
            area.rel = rel;
          };
        };
      };
      exports.relList = function(area) {
        return function() {
          return area.relList;
        };
      };
      exports.hreflang = function(area) {
        return function() {
          return area.hreflang;
        };
      };
      exports.setHreflang = function(hreflang) {
        return function(area) {
          return function() {
            area.hreflang = hreflang;
          };
        };
      };
      exports.type_ = function(area) {
        return function() {
          return area.type;
        };
      };
      exports.setType = function(type) {
        return function(area) {
          return function() {
            area.type = type;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLAreaElement/index.js
  var require_Web_HTML3 = __commonJS({
    "output/Web.HTML.HTMLAreaElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign54();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAreaElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAreaElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAreaElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAreaElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAreaElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAreaElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAreaElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        alt: $foreign.alt,
        setAlt: $foreign.setAlt,
        coords: $foreign.coords,
        setCoords: $foreign.setCoords,
        shape: $foreign.shape,
        setShape: $foreign.setShape,
        target: $foreign.target,
        setTarget: $foreign.setTarget,
        download: $foreign.download,
        setDownload: $foreign.setDownload,
        rel: $foreign.rel,
        setRel: $foreign.setRel,
        relList: $foreign.relList,
        hreflang: $foreign.hreflang,
        setHreflang: $foreign.setHreflang,
        type_: $foreign.type_,
        setType: $foreign.setType
      };
    }
  });

  // output/Web.HTML.HTMLAudioElement/foreign.js
  var require_foreign55 = __commonJS({
    "output/Web.HTML.HTMLAudioElement/foreign.js"(exports) {
      "use strict";
      exports.create = function() {
        return new Audio();
      };
      exports.createWithURL = function(url) {
        return function() {
          return new Audio(url);
        };
      };
    }
  });

  // output/Web.HTML.HTMLAudioElement/index.js
  var require_Web_HTML4 = __commonJS({
    "output/Web.HTML.HTMLAudioElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign55();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLMediaElement = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
      var fromHTMLMediaElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLAudioElement");
      var create$prime = $foreign.createWithURL;
      module.exports = {
        fromHTMLMediaElement,
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLMediaElement,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        "create'": create$prime,
        create: $foreign.create
      };
    }
  });

  // output/Web.HTML.HTMLBRElement/index.js
  var require_Web_HTML5 = __commonJS({
    "output/Web.HTML.HTMLBRElement/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBRElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBRElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBRElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBRElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBRElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBRElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBRElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget
      };
    }
  });

  // output/Web.HTML.HTMLBaseElement/foreign.js
  var require_foreign56 = __commonJS({
    "output/Web.HTML.HTMLBaseElement/foreign.js"(exports) {
      "use strict";
      exports.href = function(base) {
        return function() {
          return base.href;
        };
      };
      exports.setHref = function(href) {
        return function(base) {
          return function() {
            base.href = href;
          };
        };
      };
      exports.target = function(base) {
        return function() {
          return base.target;
        };
      };
      exports.setTarget = function(target) {
        return function(base) {
          return function() {
            base.target = target;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLBaseElement/index.js
  var require_Web_HTML6 = __commonJS({
    "output/Web.HTML.HTMLBaseElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign56();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBaseElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBaseElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBaseElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBaseElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBaseElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBaseElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBaseElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        href: $foreign.href,
        setHref: $foreign.setHref,
        target: $foreign.target,
        setTarget: $foreign.setTarget
      };
    }
  });

  // output/Web.HTML.HTMLBodyElement/index.js
  var require_Web_HTML7 = __commonJS({
    "output/Web.HTML.HTMLBodyElement/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBodyElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBodyElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBodyElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBodyElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBodyElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBodyElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLBodyElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget
      };
    }
  });

  // output/Web.HTML.HTMLButtonElement/foreign.js
  var require_foreign57 = __commonJS({
    "output/Web.HTML.HTMLButtonElement/foreign.js"(exports) {
      "use strict";
      exports.autofocus = function(button) {
        return function() {
          return button.autofocus;
        };
      };
      exports.setAutofocus = function(autofocus) {
        return function(button) {
          return function() {
            button.autofocus = autofocus;
          };
        };
      };
      exports.disabled = function(button) {
        return function() {
          return button.disabled;
        };
      };
      exports.setDisabled = function(disabled) {
        return function(button) {
          return function() {
            button.disabled = disabled;
          };
        };
      };
      exports._form = function(button) {
        return function() {
          return button.form;
        };
      };
      exports.formAction = function(button) {
        return function() {
          return button.formAction;
        };
      };
      exports.setFormAction = function(formAction) {
        return function(button) {
          return function() {
            button.formAction = formAction;
          };
        };
      };
      exports.formEnctype = function(button) {
        return function() {
          return button.formEnctype;
        };
      };
      exports.setFormEnctype = function(formEnctype) {
        return function(button) {
          return function() {
            button.formEnctype = formEnctype;
          };
        };
      };
      exports.formMethod = function(button) {
        return function() {
          return button.formMethod;
        };
      };
      exports.setFormMethod = function(formMethod) {
        return function(button) {
          return function() {
            button.formMethod = formMethod;
          };
        };
      };
      exports.formNoValidate = function(button) {
        return function() {
          return button.formNoValidate;
        };
      };
      exports.setFormNoValidate = function(formNoValidate) {
        return function(button) {
          return function() {
            button.formNoValidate = formNoValidate;
          };
        };
      };
      exports.formTarget = function(button) {
        return function() {
          return button.formTarget;
        };
      };
      exports.setFormTarget = function(formTarget) {
        return function(button) {
          return function() {
            button.formTarget = formTarget;
          };
        };
      };
      exports.name = function(button) {
        return function() {
          return button.name;
        };
      };
      exports.setName = function(name) {
        return function(button) {
          return function() {
            button.name = name;
          };
        };
      };
      exports.type_ = function(button) {
        return function() {
          return button.type;
        };
      };
      exports.setType = function(type) {
        return function(button) {
          return function() {
            button.type = type;
          };
        };
      };
      exports.value = function(button) {
        return function() {
          return button.value;
        };
      };
      exports.setValue = function(value) {
        return function(button) {
          return function() {
            button.value = value;
          };
        };
      };
      exports.willValidate = function(button) {
        return function() {
          return button.willValidate;
        };
      };
      exports.validity = function(button) {
        return function() {
          return button.validity;
        };
      };
      exports.validationMessage = function(button) {
        return function() {
          return button.validationMessage;
        };
      };
      exports.checkValidity = function(button) {
        return function() {
          return button.checkValidity();
        };
      };
      exports.reportValidity = function(button) {
        return function() {
          return button.reportValidity();
        };
      };
      exports.setCustomValidity = function(value) {
        return function(button) {
          return function() {
            button.setCustomValidity(value);
          };
        };
      };
      exports.labels = function(button) {
        return function() {
          return button.labels;
        };
      };
    }
  });

  // output/Web.HTML.HTMLButtonElement/index.js
  var require_Web_HTML8 = __commonJS({
    "output/Web.HTML.HTMLButtonElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign57();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLButtonElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLButtonElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLButtonElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLButtonElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLButtonElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLButtonElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLButtonElement");
      var form = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($1) {
          return $0($foreign["_form"]($1));
        };
      }();
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        form,
        autofocus: $foreign.autofocus,
        setAutofocus: $foreign.setAutofocus,
        disabled: $foreign.disabled,
        setDisabled: $foreign.setDisabled,
        formAction: $foreign.formAction,
        setFormAction: $foreign.setFormAction,
        formEnctype: $foreign.formEnctype,
        setFormEnctype: $foreign.setFormEnctype,
        formMethod: $foreign.formMethod,
        setFormMethod: $foreign.setFormMethod,
        formNoValidate: $foreign.formNoValidate,
        setFormNoValidate: $foreign.setFormNoValidate,
        formTarget: $foreign.formTarget,
        setFormTarget: $foreign.setFormTarget,
        name: $foreign.name,
        setName: $foreign.setName,
        type_: $foreign.type_,
        setType: $foreign.setType,
        value: $foreign.value,
        setValue: $foreign.setValue,
        willValidate: $foreign.willValidate,
        validity: $foreign.validity,
        validationMessage: $foreign.validationMessage,
        checkValidity: $foreign.checkValidity,
        reportValidity: $foreign.reportValidity,
        setCustomValidity: $foreign.setCustomValidity,
        labels: $foreign.labels
      };
    }
  });

  // output/Web.HTML.HTMLCanvasElement/foreign.js
  var require_foreign58 = __commonJS({
    "output/Web.HTML.HTMLCanvasElement/foreign.js"(exports) {
      "use strict";
      exports.width = function(canvas) {
        return function() {
          return canvas.width;
        };
      };
      exports.setWidth = function(width) {
        return function(canvas) {
          return function() {
            canvas.width = width;
          };
        };
      };
      exports.height = function(canvas) {
        return function() {
          return canvas.height;
        };
      };
      exports.setHeight = function(height) {
        return function(canvas) {
          return function() {
            canvas.height = height;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLCanvasElement/index.js
  var require_Web_HTML9 = __commonJS({
    "output/Web.HTML.HTMLCanvasElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign58();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLCanvasElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        width: $foreign.width,
        setWidth: $foreign.setWidth,
        height: $foreign.height,
        setHeight: $foreign.setHeight
      };
    }
  });

  // output/Web.HTML.HTMLDListElement/index.js
  var require_Web_HTML10 = __commonJS({
    "output/Web.HTML.HTMLDListElement/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDListElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDListElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDListElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDListElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDListElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDListElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDListElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget
      };
    }
  });

  // output/Web.HTML.HTMLDataElement/foreign.js
  var require_foreign59 = __commonJS({
    "output/Web.HTML.HTMLDataElement/foreign.js"(exports) {
      "use strict";
      exports.value = function(data) {
        return function() {
          return data.value;
        };
      };
      exports.setValue = function(value) {
        return function(data) {
          return function() {
            data.value = value;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLDataElement/index.js
  var require_Web_HTML11 = __commonJS({
    "output/Web.HTML.HTMLDataElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign59();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        value: $foreign.value,
        setValue: $foreign.setValue
      };
    }
  });

  // output/Web.HTML.HTMLDataListElement/foreign.js
  var require_foreign60 = __commonJS({
    "output/Web.HTML.HTMLDataListElement/foreign.js"(exports) {
      "use strict";
      exports.options = function(dle) {
        return function() {
          return dle.options;
        };
      };
    }
  });

  // output/Web.HTML.HTMLDataListElement/index.js
  var require_Web_HTML12 = __commonJS({
    "output/Web.HTML.HTMLDataListElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign60();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataListElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataListElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataListElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataListElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataListElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataListElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDataListElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        options: $foreign.options
      };
    }
  });

  // output/Web.HTML.HTMLDivElement/index.js
  var require_Web_HTML13 = __commonJS({
    "output/Web.HTML.HTMLDivElement/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDivElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDivElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDivElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDivElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDivElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDivElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDivElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget
      };
    }
  });

  // output/Web.HTML.HTMLDocument/foreign.js
  var require_foreign61 = __commonJS({
    "output/Web.HTML.HTMLDocument/foreign.js"(exports) {
      "use strict";
      exports._documentElement = function(doc) {
        return function() {
          return doc.documentElement;
        };
      };
      exports._head = function(doc) {
        return function() {
          return doc.head;
        };
      };
      exports._body = function(doc) {
        return function() {
          return doc.body;
        };
      };
      exports._readyState = function(doc) {
        return function() {
          return doc.readyState;
        };
      };
      exports._activeElement = function(doc) {
        return function() {
          return doc.activeElement;
        };
      };
      exports._currentScript = function(doc) {
        return function() {
          return doc.currentScript;
        };
      };
      exports.referrer = function(doc) {
        return function() {
          return doc.referrer;
        };
      };
      exports.title = function(doc) {
        return function() {
          return doc.title;
        };
      };
      exports.setTitle = function(title) {
        return function(doc) {
          return function() {
            doc.title = title;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLDocument.ReadyState/index.js
  var require_Web_HTML_HTMLDocument = __commonJS({
    "output/Web.HTML.HTMLDocument.ReadyState/index.js"(exports, module) {
      "use strict";
      var Data_Maybe = require_Data15();
      var Data_Ordering = require_Data9();
      var Loading = function() {
        function Loading2() {
        }
        ;
        Loading2.value = new Loading2();
        return Loading2;
      }();
      var Interactive = function() {
        function Interactive2() {
        }
        ;
        Interactive2.value = new Interactive2();
        return Interactive2;
      }();
      var Complete = function() {
        function Complete2() {
        }
        ;
        Complete2.value = new Complete2();
        return Complete2;
      }();
      var showReadyState = {
        show: function(v) {
          if (v instanceof Loading) {
            return "Loading";
          }
          ;
          if (v instanceof Interactive) {
            return "Interactive";
          }
          ;
          if (v instanceof Complete) {
            return "Complete";
          }
          ;
          throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 15, column 10 - line 18, column 27): " + [v.constructor.name]);
        }
      };
      var print = function(v) {
        if (v instanceof Loading) {
          return "loading";
        }
        ;
        if (v instanceof Interactive) {
          return "interactive";
        }
        ;
        if (v instanceof Complete) {
          return "complete";
        }
        ;
        throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 21, column 9 - line 24, column 25): " + [v.constructor.name]);
      };
      var parse = function(v) {
        if (v === "loading") {
          return new Data_Maybe.Just(Loading.value);
        }
        ;
        if (v === "interactive") {
          return new Data_Maybe.Just(Interactive.value);
        }
        ;
        if (v === "complete") {
          return new Data_Maybe.Just(Complete.value);
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      var eqReadyState = {
        eq: function(x) {
          return function(y) {
            if (x instanceof Loading && y instanceof Loading) {
              return true;
            }
            ;
            if (x instanceof Interactive && y instanceof Interactive) {
              return true;
            }
            ;
            if (x instanceof Complete && y instanceof Complete) {
              return true;
            }
            ;
            return false;
          };
        }
      };
      var ordReadyState = {
        compare: function(x) {
          return function(y) {
            if (x instanceof Loading && y instanceof Loading) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Loading) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Loading) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Interactive && y instanceof Interactive) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Interactive) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Interactive) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Complete && y instanceof Complete) {
              return Data_Ordering.EQ.value;
            }
            ;
            throw new Error("Failed pattern match at Web.HTML.HTMLDocument.ReadyState (line 12, column 1 - line 12, column 48): " + [x.constructor.name, y.constructor.name]);
          };
        },
        Eq0: function() {
          return eqReadyState;
        }
      };
      module.exports = {
        Loading,
        Interactive,
        Complete,
        print,
        parse,
        eqReadyState,
        ordReadyState,
        showReadyState
      };
    }
  });

  // output/Web.HTML.HTMLDocument/index.js
  var require_Web_HTML14 = __commonJS({
    "output/Web.HTML.HTMLDocument/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign61();
      var Data_Functor = require_Data4();
      var Data_Maybe = require_Data15();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_HTML_HTMLDocument_ReadyState = require_Web_HTML_HTMLDocument();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toDocument = Unsafe_Coerce.unsafeCoerce;
      var readyState = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(function() {
          var $2 = Data_Maybe.fromMaybe(Web_HTML_HTMLDocument_ReadyState.Loading.value);
          return function($3) {
            return $2(Web_HTML_HTMLDocument_ReadyState.parse($3));
          };
        }());
        return function($1) {
          return $0($foreign["_readyState"]($1));
        };
      }();
      var head = function() {
        var $4 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($5) {
          return $4($foreign["_head"]($5));
        };
      }();
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
      var fromNonElementParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
      var fromDocument = Web_Internal_FFI.unsafeReadProtoTagged("HTMLDocument");
      var documentElement = function() {
        var $6 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($7) {
          return $6($foreign["_documentElement"]($7));
        };
      }();
      var currentScript = function() {
        var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($9) {
          return $8($foreign["_currentScript"]($9));
        };
      }();
      var body = function() {
        var $10 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($11) {
          return $10($foreign["_body"]($11));
        };
      }();
      var activeElement = function() {
        var $12 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($13) {
          return $12($foreign["_activeElement"]($13));
        };
      }();
      module.exports = {
        fromDocument,
        fromNode,
        fromParentNode,
        fromNonElementParentNode,
        fromEventTarget,
        toDocument,
        toNode,
        toParentNode,
        toNonElementParentNode,
        toEventTarget,
        documentElement,
        head,
        body,
        readyState,
        activeElement,
        currentScript,
        referrer: $foreign.referrer,
        title: $foreign.title,
        setTitle: $foreign.setTitle
      };
    }
  });

  // output/Web.HTML.HTMLElement/foreign.js
  var require_foreign62 = __commonJS({
    "output/Web.HTML.HTMLElement/foreign.js"(exports) {
      "use strict";
      exports._read = function(nothing, just, value) {
        var tag = Object.prototype.toString.call(value);
        if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
          return just(value);
        } else {
          return nothing;
        }
      };
      exports.title = function(elt) {
        return function() {
          return elt.title;
        };
      };
      exports.setTitle = function(title) {
        return function(elt) {
          return function() {
            elt.title = title;
          };
        };
      };
      exports.lang = function(elt) {
        return function() {
          return elt.lang;
        };
      };
      exports.setLang = function(lang) {
        return function(elt) {
          return function() {
            elt.lang = lang;
          };
        };
      };
      exports.dir = function(elt) {
        return function() {
          return elt.dir;
        };
      };
      exports.setDir = function(dir) {
        return function(elt) {
          return function() {
            elt.dir = dir;
          };
        };
      };
      exports.className = function(elt) {
        return function() {
          return elt.className;
        };
      };
      exports.setClassName = function(className) {
        return function(elt) {
          return function() {
            elt.className = className;
          };
        };
      };
      exports.classList = function(element) {
        return function() {
          return element.classList;
        };
      };
      exports.hidden = function(elt) {
        return function() {
          return elt.hidden;
        };
      };
      exports.setHidden = function(hidden) {
        return function(elt) {
          return function() {
            elt.hidden = hidden;
          };
        };
      };
      exports.tabIndex = function(elt) {
        return function() {
          return elt.tabIndex;
        };
      };
      exports.setTabIndex = function(tabIndex) {
        return function(elt) {
          return function() {
            elt.tabIndex = tabIndex;
          };
        };
      };
      exports.draggable = function(elt) {
        return function() {
          return elt.draggable;
        };
      };
      exports.setDraggable = function(draggable) {
        return function(elt) {
          return function() {
            elt.draggable = draggable;
          };
        };
      };
      exports.contentEditable = function(elt) {
        return function() {
          return elt.contentEditable;
        };
      };
      exports.setContentEditable = function(contentEditable) {
        return function(elt) {
          return function() {
            elt.contentEditable = contentEditable;
          };
        };
      };
      exports.isContentEditable = function(elt) {
        return function() {
          return elt.isContentEditable;
        };
      };
      exports.spellcheck = function(elt) {
        return function() {
          return elt.spellcheck;
        };
      };
      exports.setSpellcheck = function(spellcheck) {
        return function(elt) {
          return function() {
            elt.spellcheck = spellcheck;
          };
        };
      };
      exports.click = function(elt) {
        return function() {
          return elt.click();
        };
      };
      exports.focus = function(elt) {
        return function() {
          return elt.focus();
        };
      };
      exports.blur = function(elt) {
        return function() {
          return elt.blur();
        };
      };
      exports.getBoundingClientRect = function(el) {
        return function() {
          var rect = el.getBoundingClientRect();
          return {
            top: rect.top,
            right: rect.right,
            bottom: rect.bottom,
            left: rect.left,
            width: rect.width,
            height: rect.height
          };
        };
      };
      exports._offsetParent = function(el) {
        return function() {
          return el.offsetParent;
        };
      };
      exports.offsetTop = function(el) {
        return function() {
          return el.offsetTop;
        };
      };
      exports.offsetLeft = function(el) {
        return function() {
          return el.offsetLeft;
        };
      };
      exports.offsetWidth = function(el) {
        return function() {
          return el.offsetWidth;
        };
      };
      exports.offsetHeight = function(el) {
        return function() {
          return el.offsetHeight;
        };
      };
    }
  });

  // output/Web.HTML.HTMLElement/index.js
  var require_Web_HTML15 = __commonJS({
    "output/Web.HTML.HTMLElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign62();
      var Data_Functor = require_Data4();
      var Data_Maybe = require_Data15();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var offsetParent = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($1) {
          return $0($foreign["_offsetParent"]($1));
        };
      }();
      var fromParentNode = function(x) {
        return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
      };
      var fromNonDocumentTypeChildNode = function(x) {
        return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
      };
      var fromNode = function(x) {
        return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
      };
      var fromEventTarget = function(x) {
        return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
      };
      var fromElement = function(x) {
        return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
      };
      var fromChildNode = function(x) {
        return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
      };
      module.exports = {
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        offsetParent,
        title: $foreign.title,
        setTitle: $foreign.setTitle,
        lang: $foreign.lang,
        setLang: $foreign.setLang,
        dir: $foreign.dir,
        setDir: $foreign.setDir,
        className: $foreign.className,
        setClassName: $foreign.setClassName,
        classList: $foreign.classList,
        hidden: $foreign.hidden,
        setHidden: $foreign.setHidden,
        tabIndex: $foreign.tabIndex,
        setTabIndex: $foreign.setTabIndex,
        draggable: $foreign.draggable,
        setDraggable: $foreign.setDraggable,
        contentEditable: $foreign.contentEditable,
        setContentEditable: $foreign.setContentEditable,
        isContentEditable: $foreign.isContentEditable,
        spellcheck: $foreign.spellcheck,
        setSpellcheck: $foreign.setSpellcheck,
        click: $foreign.click,
        focus: $foreign.focus,
        blur: $foreign.blur,
        getBoundingClientRect: $foreign.getBoundingClientRect,
        offsetTop: $foreign.offsetTop,
        offsetLeft: $foreign.offsetLeft,
        offsetWidth: $foreign.offsetWidth,
        offsetHeight: $foreign.offsetHeight
      };
    }
  });

  // output/Web.HTML.HTMLEmbedElement/foreign.js
  var require_foreign63 = __commonJS({
    "output/Web.HTML.HTMLEmbedElement/foreign.js"(exports) {
      "use strict";
      exports.src = function(embed) {
        return function() {
          return embed.src;
        };
      };
      exports.setSrc = function(src) {
        return function(embed) {
          return function() {
            embed.src = src;
          };
        };
      };
      exports.type_ = function(embed) {
        return function() {
          return embed.type;
        };
      };
      exports.setType = function(type) {
        return function(embed) {
          return function() {
            embed.type = type;
          };
        };
      };
      exports.width = function(embed) {
        return function() {
          return embed.width;
        };
      };
      exports.setWidth = function(width) {
        return function(embed) {
          return function() {
            embed.width = width;
          };
        };
      };
      exports.height = function(embed) {
        return function() {
          return embed.height;
        };
      };
      exports.setHeight = function(height) {
        return function(embed) {
          return function() {
            embed.height = height;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLEmbedElement/index.js
  var require_Web_HTML16 = __commonJS({
    "output/Web.HTML.HTMLEmbedElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign63();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLEmbedElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLEmbedElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLEmbedElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLEmbedElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLEmbedElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLEmbedElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLEmbedElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        src: $foreign.src,
        setSrc: $foreign.setSrc,
        type_: $foreign.type_,
        setType: $foreign.setType,
        width: $foreign.width,
        setWidth: $foreign.setWidth,
        height: $foreign.height,
        setHeight: $foreign.setHeight
      };
    }
  });

  // output/Web.HTML.HTMLFieldSetElement/foreign.js
  var require_foreign64 = __commonJS({
    "output/Web.HTML.HTMLFieldSetElement/foreign.js"(exports) {
      "use strict";
      exports.disabled = function(fieldset) {
        return function() {
          return fieldset.disabled;
        };
      };
      exports.setDisabled = function(disabled) {
        return function(fieldset) {
          return function() {
            fieldset.disabled = disabled;
          };
        };
      };
      exports._form = function(fieldset) {
        return function() {
          return fieldset.form;
        };
      };
      exports.name = function(fieldset) {
        return function() {
          return fieldset.name;
        };
      };
      exports.setName = function(name) {
        return function(fieldset) {
          return function() {
            fieldset.name = name;
          };
        };
      };
      exports.type_ = function(fieldset) {
        return function() {
          return fieldset.type;
        };
      };
      exports.setType = function(type) {
        return function(fieldset) {
          return function() {
            fieldset.type = type;
          };
        };
      };
      exports.willValidate = function(fieldset) {
        return function() {
          return fieldset.willValidate;
        };
      };
      exports.validity = function(fieldset) {
        return function() {
          return fieldset.validity;
        };
      };
      exports.validationMessage = function(fieldset) {
        return function() {
          return fieldset.validationMessage;
        };
      };
      exports.checkValidity = function(fieldset) {
        return function() {
          return fieldset.checkValidity();
        };
      };
      exports.reportValidity = function(fieldset) {
        return function() {
          return fieldset.reportValidity();
        };
      };
      exports.setCustomValidity = function(value) {
        return function(fieldset) {
          return function() {
            fieldset.setCustomValidity(value);
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLFieldSetElement/index.js
  var require_Web_HTML17 = __commonJS({
    "output/Web.HTML.HTMLFieldSetElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign64();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFieldSetElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFieldSetElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFieldSetElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFieldSetElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFieldSetElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFieldSetElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFieldSetElement");
      var form = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($1) {
          return $0($foreign["_form"]($1));
        };
      }();
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        form,
        disabled: $foreign.disabled,
        setDisabled: $foreign.setDisabled,
        name: $foreign.name,
        setName: $foreign.setName,
        type_: $foreign.type_,
        setType: $foreign.setType,
        willValidate: $foreign.willValidate,
        validity: $foreign.validity,
        validationMessage: $foreign.validationMessage,
        checkValidity: $foreign.checkValidity,
        reportValidity: $foreign.reportValidity,
        setCustomValidity: $foreign.setCustomValidity
      };
    }
  });

  // output/Web.HTML.HTMLFormElement/foreign.js
  var require_foreign65 = __commonJS({
    "output/Web.HTML.HTMLFormElement/foreign.js"(exports) {
      "use strict";
      exports.acceptCharset = function(form) {
        return function() {
          return form.acceptCharset;
        };
      };
      exports.setAcceptCharset = function(acceptCharset) {
        return function(form) {
          return function() {
            form.acceptCharset = acceptCharset;
          };
        };
      };
      exports.action = function(form) {
        return function() {
          return form.action;
        };
      };
      exports.setAction = function(action) {
        return function(form) {
          return function() {
            form.action = action;
          };
        };
      };
      exports.autocomplete = function(form) {
        return function() {
          return form.autocomplete;
        };
      };
      exports.setAutocomplete = function(autocomplete) {
        return function(form) {
          return function() {
            form.autocomplete = autocomplete;
          };
        };
      };
      exports.enctype = function(form) {
        return function() {
          return form.enctype;
        };
      };
      exports.setEnctype = function(enctype) {
        return function(form) {
          return function() {
            form.enctype = enctype;
          };
        };
      };
      exports.encoding = function(form) {
        return function() {
          return form.encoding;
        };
      };
      exports.setEncoding = function(encoding) {
        return function(form) {
          return function() {
            form.encoding = encoding;
          };
        };
      };
      exports.method = function(form) {
        return function() {
          return form.method;
        };
      };
      exports.setMethod = function(method) {
        return function(form) {
          return function() {
            form.method = method;
          };
        };
      };
      exports.name = function(form) {
        return function() {
          return form.name;
        };
      };
      exports.setName = function(name) {
        return function(form) {
          return function() {
            form.name = name;
          };
        };
      };
      exports.noValidate = function(form) {
        return function() {
          return form.noValidate;
        };
      };
      exports.setNoValidate = function(noValidate) {
        return function(form) {
          return function() {
            form.noValidate = noValidate;
          };
        };
      };
      exports.target = function(form) {
        return function() {
          return form.target;
        };
      };
      exports.setTarget = function(target) {
        return function(form) {
          return function() {
            form.target = target;
          };
        };
      };
      exports.length = function(form) {
        return function() {
          return form.length;
        };
      };
      exports.submit = function(form) {
        return function() {
          form.submit();
        };
      };
      exports.reset = function(form) {
        return function() {
          form.reset();
        };
      };
      exports.checkValidity = function(form) {
        return function() {
          return form.checkValidity();
        };
      };
      exports.reportValidity = function(form) {
        return function() {
          return form.reportValidity();
        };
      };
    }
  });

  // output/Web.HTML.HTMLFormElement/index.js
  var require_Web_HTML18 = __commonJS({
    "output/Web.HTML.HTMLFormElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign65();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFormElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFormElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFormElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFormElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFormElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFormElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLFormElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        acceptCharset: $foreign.acceptCharset,
        setAcceptCharset: $foreign.setAcceptCharset,
        action: $foreign.action,
        setAction: $foreign.setAction,
        autocomplete: $foreign.autocomplete,
        setAutocomplete: $foreign.setAutocomplete,
        enctype: $foreign.enctype,
        setEnctype: $foreign.setEnctype,
        encoding: $foreign.encoding,
        setEncoding: $foreign.setEncoding,
        method: $foreign.method,
        setMethod: $foreign.setMethod,
        name: $foreign.name,
        setName: $foreign.setName,
        noValidate: $foreign.noValidate,
        setNoValidate: $foreign.setNoValidate,
        target: $foreign.target,
        setTarget: $foreign.setTarget,
        length: $foreign.length,
        submit: $foreign.submit,
        reset: $foreign.reset,
        checkValidity: $foreign.checkValidity,
        reportValidity: $foreign.reportValidity
      };
    }
  });

  // output/Web.HTML.HTMLHRElement/index.js
  var require_Web_HTML19 = __commonJS({
    "output/Web.HTML.HTMLHRElement/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHRElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHRElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHRElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHRElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHRElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHRElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHRElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget
      };
    }
  });

  // output/Web.HTML.HTMLHeadElement/index.js
  var require_Web_HTML20 = __commonJS({
    "output/Web.HTML.HTMLHeadElement/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget
      };
    }
  });

  // output/Web.HTML.HTMLHeadingElement/index.js
  var require_Web_HTML21 = __commonJS({
    "output/Web.HTML.HTMLHeadingElement/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadingElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadingElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadingElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadingElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadingElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadingElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLHeadingElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget
      };
    }
  });

  // output/Web.HTML.HTMLIFrameElement/foreign.js
  var require_foreign66 = __commonJS({
    "output/Web.HTML.HTMLIFrameElement/foreign.js"(exports) {
      "use strict";
      exports.src = function(iframe) {
        return function() {
          return iframe.src;
        };
      };
      exports.setSrc = function(src) {
        return function(iframe) {
          return function() {
            iframe.src = src;
          };
        };
      };
      exports.srcdoc = function(iframe) {
        return function() {
          return iframe.srcdoc;
        };
      };
      exports.setSrcdoc = function(srcdoc) {
        return function(iframe) {
          return function() {
            iframe.srcdoc = srcdoc;
          };
        };
      };
      exports.name = function(iframe) {
        return function() {
          return iframe.name;
        };
      };
      exports.setName = function(name) {
        return function(iframe) {
          return function() {
            iframe.name = name;
          };
        };
      };
      exports.width = function(iframe) {
        return function() {
          return iframe.width;
        };
      };
      exports.setWidth = function(width) {
        return function(iframe) {
          return function() {
            iframe.width = width;
          };
        };
      };
      exports.height = function(iframe) {
        return function() {
          return iframe.height;
        };
      };
      exports.setHeight = function(height) {
        return function(iframe) {
          return function() {
            iframe.height = height;
          };
        };
      };
      exports._contentDocument = function(iframe) {
        return function() {
          return iframe.contentDocument;
        };
      };
      exports._contentWindow = function(iframe) {
        return function() {
          return iframe.contentWindow;
        };
      };
    }
  });

  // output/Web.HTML.HTMLIFrameElement/index.js
  var require_Web_HTML22 = __commonJS({
    "output/Web.HTML.HTMLIFrameElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign66();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLIFrameElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLIFrameElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLIFrameElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLIFrameElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLIFrameElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLIFrameElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLIFrameElement");
      var contentWindow = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($1) {
          return $0($foreign["_contentWindow"]($1));
        };
      }();
      var contentDocument = function() {
        var $2 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($3) {
          return $2($foreign["_contentDocument"]($3));
        };
      }();
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        contentDocument,
        contentWindow,
        src: $foreign.src,
        setSrc: $foreign.setSrc,
        srcdoc: $foreign.srcdoc,
        setSrcdoc: $foreign.setSrcdoc,
        name: $foreign.name,
        setName: $foreign.setName,
        width: $foreign.width,
        setWidth: $foreign.setWidth,
        height: $foreign.height,
        setHeight: $foreign.setHeight
      };
    }
  });

  // output/Web.HTML.HTMLImageElement/foreign.js
  var require_foreign67 = __commonJS({
    "output/Web.HTML.HTMLImageElement/foreign.js"(exports) {
      "use strict";
      exports.create = function() {
        return new Image();
      };
      exports.createWithDimensions = function(width) {
        return function(height) {
          return function() {
            return new Image(width, height);
          };
        };
      };
      exports.alt = function(image) {
        return function() {
          return image.alt;
        };
      };
      exports.setAlt = function(alt) {
        return function(image) {
          return function() {
            image.alt = alt;
          };
        };
      };
      exports.src = function(image) {
        return function() {
          return image.src;
        };
      };
      exports.setSrc = function(src) {
        return function(image) {
          return function() {
            image.src = src;
          };
        };
      };
      exports.srcset = function(image) {
        return function() {
          return image.srcset;
        };
      };
      exports.setSrcset = function(srcset) {
        return function(image) {
          return function() {
            image.srcset = srcset;
          };
        };
      };
      exports.sizes = function(image) {
        return function() {
          return image.sizes;
        };
      };
      exports.setSizes = function(sizes) {
        return function(image) {
          return function() {
            image.sizes = sizes;
          };
        };
      };
      exports.currentSrc = function(image) {
        return function() {
          return image.currentSrc;
        };
      };
      exports._crossOrigin = function(image) {
        return image.crossOrigin;
      };
      exports._setCrossOrigin = function(crossOrigin, image) {
        image.crossOrigin = crossOrigin;
      };
      exports.useMap = function(image) {
        return function() {
          return image.useMap;
        };
      };
      exports.setUseMap = function(useMap) {
        return function(image) {
          return function() {
            image.useMap = useMap;
          };
        };
      };
      exports.isMap = function(image) {
        return function() {
          return image.isMap;
        };
      };
      exports.setIsMap = function(isMap) {
        return function(image) {
          return function() {
            image.isMap = isMap;
          };
        };
      };
      exports.width = function(image) {
        return function() {
          return image.width;
        };
      };
      exports.setWidth = function(width) {
        return function(image) {
          return function() {
            image.width = width;
          };
        };
      };
      exports.height = function(image) {
        return function() {
          return image.height;
        };
      };
      exports.setHeight = function(height) {
        return function(image) {
          return function() {
            image.height = height;
          };
        };
      };
      exports.naturalWidth = function(image) {
        return function() {
          return image.naturalWidth;
        };
      };
      exports.naturalHeight = function(image) {
        return function() {
          return image.naturalHeight;
        };
      };
      exports.referrerPolicy = function(image) {
        return function() {
          return image.referrerPolicy;
        };
      };
      exports.setReferrerPolicy = function(referrerPolicy) {
        return function(image) {
          return function() {
            image.referrerPolicy = referrerPolicy;
          };
        };
      };
      exports._decoding = function(image) {
        return image.decoding;
      };
      exports._setDecoding = function(decoding, image) {
        image.decoding = decoding;
      };
      exports._loading = function(image) {
        return image.loading;
      };
      exports._setLoading = function(loading, image) {
        image.loading = loading;
      };
      exports.complete = function(image) {
        return function() {
          return image.complete;
        };
      };
    }
  });

  // output/Web.HTML.HTMLImageElement.CORSMode/index.js
  var require_Web_HTML_HTMLImageElement = __commonJS({
    "output/Web.HTML.HTMLImageElement.CORSMode/index.js"(exports, module) {
      "use strict";
      var Data_Maybe = require_Data15();
      var Data_Ordering = require_Data9();
      var Anonymous = function() {
        function Anonymous2() {
        }
        ;
        Anonymous2.value = new Anonymous2();
        return Anonymous2;
      }();
      var UseCredentials = function() {
        function UseCredentials2() {
        }
        ;
        UseCredentials2.value = new UseCredentials2();
        return UseCredentials2;
      }();
      var showDecodingHint = {
        show: function(v) {
          if (v instanceof Anonymous) {
            return "Anonymous";
          }
          ;
          if (v instanceof UseCredentials) {
            return "UseCredentials";
          }
          ;
          throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.CORSMode (line 18, column 10 - line 20, column 39): " + [v.constructor.name]);
        }
      };
      var print = function(v) {
        if (v instanceof Anonymous) {
          return "anonymous";
        }
        ;
        if (v instanceof UseCredentials) {
          return "use-credentials";
        }
        ;
        throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.CORSMode (line 30, column 9 - line 32, column 38): " + [v.constructor.name]);
      };
      var parse = function(v) {
        if (v === "") {
          return new Data_Maybe.Just(Anonymous.value);
        }
        ;
        if (v === "anonymous") {
          return new Data_Maybe.Just(Anonymous.value);
        }
        ;
        if (v === "use-credentials") {
          return new Data_Maybe.Just(UseCredentials.value);
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      var eqCORSMode = {
        eq: function(x) {
          return function(y) {
            if (x instanceof Anonymous && y instanceof Anonymous) {
              return true;
            }
            ;
            if (x instanceof UseCredentials && y instanceof UseCredentials) {
              return true;
            }
            ;
            return false;
          };
        }
      };
      var ordCORSMode = {
        compare: function(x) {
          return function(y) {
            if (x instanceof Anonymous && y instanceof Anonymous) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Anonymous) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Anonymous) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof UseCredentials && y instanceof UseCredentials) {
              return Data_Ordering.EQ.value;
            }
            ;
            throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.CORSMode (line 15, column 1 - line 15, column 44): " + [x.constructor.name, y.constructor.name]);
          };
        },
        Eq0: function() {
          return eqCORSMode;
        }
      };
      module.exports = {
        Anonymous,
        UseCredentials,
        parse,
        print,
        eqCORSMode,
        ordCORSMode,
        showDecodingHint
      };
    }
  });

  // output/Web.HTML.HTMLImageElement.DecodingHint/index.js
  var require_Web_HTML_HTMLImageElement2 = __commonJS({
    "output/Web.HTML.HTMLImageElement.DecodingHint/index.js"(exports, module) {
      "use strict";
      var Data_Maybe = require_Data15();
      var Data_Ordering = require_Data9();
      var Sync = function() {
        function Sync2() {
        }
        ;
        Sync2.value = new Sync2();
        return Sync2;
      }();
      var Async = function() {
        function Async2() {
        }
        ;
        Async2.value = new Async2();
        return Async2;
      }();
      var Auto = function() {
        function Auto2() {
        }
        ;
        Auto2.value = new Auto2();
        return Auto2;
      }();
      var showDecodingHint = {
        show: function(v) {
          if (v instanceof Sync) {
            return "Sync";
          }
          ;
          if (v instanceof Async) {
            return "Async";
          }
          ;
          if (v instanceof Auto) {
            return "Auto";
          }
          ;
          throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.DecodingHint (line 19, column 10 - line 22, column 19): " + [v.constructor.name]);
        }
      };
      var print = function(v) {
        if (v instanceof Sync) {
          return "sync";
        }
        ;
        if (v instanceof Async) {
          return "async";
        }
        ;
        if (v instanceof Auto) {
          return "auto";
        }
        ;
        throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.DecodingHint (line 33, column 9 - line 36, column 17): " + [v.constructor.name]);
      };
      var parse = function(v) {
        if (v === "") {
          return new Data_Maybe.Just(Auto.value);
        }
        ;
        if (v === "sync") {
          return new Data_Maybe.Just(Sync.value);
        }
        ;
        if (v === "async") {
          return new Data_Maybe.Just(Async.value);
        }
        ;
        if (v === "auto") {
          return new Data_Maybe.Just(Auto.value);
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      var eqDecodingHint = {
        eq: function(x) {
          return function(y) {
            if (x instanceof Sync && y instanceof Sync) {
              return true;
            }
            ;
            if (x instanceof Async && y instanceof Async) {
              return true;
            }
            ;
            if (x instanceof Auto && y instanceof Auto) {
              return true;
            }
            ;
            return false;
          };
        }
      };
      var ordDecodingHint = {
        compare: function(x) {
          return function(y) {
            if (x instanceof Sync && y instanceof Sync) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Sync) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Sync) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Async && y instanceof Async) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Async) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Async) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Auto && y instanceof Auto) {
              return Data_Ordering.EQ.value;
            }
            ;
            throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.DecodingHint (line 16, column 1 - line 16, column 52): " + [x.constructor.name, y.constructor.name]);
          };
        },
        Eq0: function() {
          return eqDecodingHint;
        }
      };
      module.exports = {
        Sync,
        Async,
        Auto,
        parse,
        print,
        eqDecodingHint,
        ordDecodingHint,
        showDecodingHint
      };
    }
  });

  // output/Web.HTML.HTMLImageElement.Laziness/index.js
  var require_Web_HTML_HTMLImageElement3 = __commonJS({
    "output/Web.HTML.HTMLImageElement.Laziness/index.js"(exports, module) {
      "use strict";
      var Data_Maybe = require_Data15();
      var Data_Ordering = require_Data9();
      var Eager = function() {
        function Eager2() {
        }
        ;
        Eager2.value = new Eager2();
        return Eager2;
      }();
      var Lazy = function() {
        function Lazy2() {
        }
        ;
        Lazy2.value = new Lazy2();
        return Lazy2;
      }();
      var showDecodingHint = {
        show: function(v) {
          if (v instanceof Eager) {
            return "Eager";
          }
          ;
          if (v instanceof Lazy) {
            return "Lazy";
          }
          ;
          throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.Laziness (line 18, column 10 - line 20, column 19): " + [v.constructor.name]);
        }
      };
      var print = function(v) {
        if (v instanceof Eager) {
          return "eager";
        }
        ;
        if (v instanceof Lazy) {
          return "lazy";
        }
        ;
        throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.Laziness (line 31, column 9 - line 33, column 17): " + [v.constructor.name]);
      };
      var parse = function(v) {
        if (v === "") {
          return new Data_Maybe.Just(Eager.value);
        }
        ;
        if (v === "eager") {
          return new Data_Maybe.Just(Eager.value);
        }
        ;
        if (v === "lazy") {
          return new Data_Maybe.Just(Lazy.value);
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      var eqDecodingHint = {
        eq: function(x) {
          return function(y) {
            if (x instanceof Eager && y instanceof Eager) {
              return true;
            }
            ;
            if (x instanceof Lazy && y instanceof Lazy) {
              return true;
            }
            ;
            return false;
          };
        }
      };
      var ordDecodingHint = {
        compare: function(x) {
          return function(y) {
            if (x instanceof Eager && y instanceof Eager) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Eager) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Eager) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Lazy && y instanceof Lazy) {
              return Data_Ordering.EQ.value;
            }
            ;
            throw new Error("Failed pattern match at Web.HTML.HTMLImageElement.Laziness (line 15, column 1 - line 15, column 48): " + [x.constructor.name, y.constructor.name]);
          };
        },
        Eq0: function() {
          return eqDecodingHint;
        }
      };
      module.exports = {
        Eager,
        Lazy,
        parse,
        print,
        eqDecodingHint,
        ordDecodingHint,
        showDecodingHint
      };
    }
  });

  // output/Web.HTML.HTMLImageElement/index.js
  var require_Web_HTML23 = __commonJS({
    "output/Web.HTML.HTMLImageElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign67();
      var Control_Bind = require_Control5();
      var Data_Functor = require_Data4();
      var Data_Maybe = require_Data15();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Effect_Uncurried = require_Effect4();
      var Unsafe_Coerce = require_Unsafe();
      var Web_HTML_HTMLImageElement_CORSMode = require_Web_HTML_HTMLImageElement();
      var Web_HTML_HTMLImageElement_DecodingHint = require_Web_HTML_HTMLImageElement2();
      var Web_HTML_HTMLImageElement_Laziness = require_Web_HTML_HTMLImageElement3();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var setLoading = function(laziness) {
        return Effect_Uncurried.runEffectFn2($foreign["_setLoading"])(Web_HTML_HTMLImageElement_Laziness.print(laziness));
      };
      var setDecoding = function(hint) {
        return Effect_Uncurried.runEffectFn2($foreign["_setDecoding"])(Web_HTML_HTMLImageElement_DecodingHint.print(hint));
      };
      var setCrossOrigin = function(mode) {
        return Effect_Uncurried.runEffectFn2($foreign["_setCrossOrigin"])(Web_HTML_HTMLImageElement_CORSMode.print(mode));
      };
      var loading = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(function() {
          var $3 = Data_Maybe.fromMaybe(Web_HTML_HTMLImageElement_Laziness.Eager.value);
          return function($4) {
            return $3(Web_HTML_HTMLImageElement_Laziness.parse($4));
          };
        }());
        var $1 = Effect_Uncurried.runEffectFn1($foreign["_loading"]);
        return function($2) {
          return $0($1($2));
        };
      }();
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLImageElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLImageElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLImageElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLImageElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLImageElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLImageElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLImageElement");
      var decoding = function() {
        var $5 = Data_Functor.map(Effect.functorEffect)(function() {
          var $8 = Data_Maybe.fromMaybe(Web_HTML_HTMLImageElement_DecodingHint.Auto.value);
          return function($9) {
            return $8(Web_HTML_HTMLImageElement_DecodingHint.parse($9));
          };
        }());
        var $6 = Effect_Uncurried.runEffectFn1($foreign["_decoding"]);
        return function($7) {
          return $5($6($7));
        };
      }();
      var crossOrigin = function() {
        var $10 = Data_Functor.map(Effect.functorEffect)(Control_Bind.composeKleisliFlipped(Data_Maybe.bindMaybe)(Web_HTML_HTMLImageElement_CORSMode.parse)(Data_Nullable.toMaybe));
        var $11 = Effect_Uncurried.runEffectFn1($foreign["_crossOrigin"]);
        return function($12) {
          return $10($11($12));
        };
      }();
      var create$prime = $foreign.createWithDimensions;
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        "create'": create$prime,
        crossOrigin,
        setCrossOrigin,
        decoding,
        setDecoding,
        loading,
        setLoading,
        create: $foreign.create,
        alt: $foreign.alt,
        setAlt: $foreign.setAlt,
        src: $foreign.src,
        setSrc: $foreign.setSrc,
        srcset: $foreign.srcset,
        setSrcset: $foreign.setSrcset,
        currentSrc: $foreign.currentSrc,
        sizes: $foreign.sizes,
        setSizes: $foreign.setSizes,
        useMap: $foreign.useMap,
        setUseMap: $foreign.setUseMap,
        isMap: $foreign.isMap,
        setIsMap: $foreign.setIsMap,
        width: $foreign.width,
        setWidth: $foreign.setWidth,
        height: $foreign.height,
        setHeight: $foreign.setHeight,
        naturalWidth: $foreign.naturalWidth,
        naturalHeight: $foreign.naturalHeight,
        referrerPolicy: $foreign.referrerPolicy,
        setReferrerPolicy: $foreign.setReferrerPolicy,
        complete: $foreign.complete
      };
    }
  });

  // output/Web.HTML.HTMLInputElement/foreign.js
  var require_foreign68 = __commonJS({
    "output/Web.HTML.HTMLInputElement/foreign.js"(exports) {
      "use strict";
      exports.accept = function(input) {
        return function() {
          return input.accept;
        };
      };
      exports.setAccept = function(accept) {
        return function(input) {
          return function() {
            input.accept = accept;
          };
        };
      };
      exports.alt = function(input) {
        return function() {
          return input.alt;
        };
      };
      exports.setAlt = function(alt) {
        return function(input) {
          return function() {
            input.alt = alt;
          };
        };
      };
      exports.autocomplete = function(input) {
        return function() {
          return input.autocomplete;
        };
      };
      exports.setAutocomplete = function(autocomplete) {
        return function(input) {
          return function() {
            input.autocomplete = autocomplete;
          };
        };
      };
      exports.autofocus = function(input) {
        return function() {
          return input.autofocus;
        };
      };
      exports.setAutofocus = function(autofocus) {
        return function(input) {
          return function() {
            input.autofocus = autofocus;
          };
        };
      };
      exports.defaultChecked = function(input) {
        return function() {
          return input.defaultChecked;
        };
      };
      exports.setDefaultChecked = function(defaultChecked) {
        return function(input) {
          return function() {
            input.defaultChecked = defaultChecked;
          };
        };
      };
      exports.checked = function(input) {
        return function() {
          return input.checked;
        };
      };
      exports.setChecked = function(checked) {
        return function(input) {
          return function() {
            input.checked = checked;
          };
        };
      };
      exports.dirName = function(input) {
        return function() {
          return input.dirName;
        };
      };
      exports.setDirName = function(dirName) {
        return function(input) {
          return function() {
            input.dirName = dirName;
          };
        };
      };
      exports.disabled = function(input) {
        return function() {
          return input.disabled;
        };
      };
      exports.setDisabled = function(disabled) {
        return function(input) {
          return function() {
            input.disabled = disabled;
          };
        };
      };
      exports._form = function(input) {
        return function() {
          return input.form;
        };
      };
      exports._files = function(input) {
        return function() {
          return input.files;
        };
      };
      exports.formAction = function(input) {
        return function() {
          return input.formAction;
        };
      };
      exports.setFormAction = function(formAction) {
        return function(input) {
          return function() {
            input.formAction = formAction;
          };
        };
      };
      exports.formEnctype = function(input) {
        return function() {
          return input.formEnctype;
        };
      };
      exports.setFormEnctype = function(formEnctype) {
        return function(input) {
          return function() {
            input.formEnctype = formEnctype;
          };
        };
      };
      exports.formMethod = function(input) {
        return function() {
          return input.formMethod;
        };
      };
      exports.setFormMethod = function(formMethod) {
        return function(input) {
          return function() {
            input.formMethod = formMethod;
          };
        };
      };
      exports.formNoValidate = function(input) {
        return function() {
          return input.formNoValidate;
        };
      };
      exports.setFormNoValidate = function(formNoValidate) {
        return function(input) {
          return function() {
            input.formNoValidate = formNoValidate;
          };
        };
      };
      exports.formTarget = function(input) {
        return function() {
          return input.formTarget;
        };
      };
      exports.setFormTarget = function(formTarget) {
        return function(input) {
          return function() {
            input.formTarget = formTarget;
          };
        };
      };
      exports.height = function(input) {
        return function() {
          return input.height;
        };
      };
      exports.setHeight = function(height) {
        return function(input) {
          return function() {
            input.height = height;
          };
        };
      };
      exports.indeterminate = function(input) {
        return function() {
          return input.indeterminate;
        };
      };
      exports.setIndeterminate = function(indeterminate) {
        return function(input) {
          return function() {
            input.indeterminate = indeterminate;
          };
        };
      };
      exports._list = function(input) {
        return function() {
          return input.list;
        };
      };
      exports.max = function(input) {
        return function() {
          return input.max;
        };
      };
      exports.setMax = function(max) {
        return function(input) {
          return function() {
            input.max = max;
          };
        };
      };
      exports.maxLength = function(input) {
        return function() {
          return input.maxLength;
        };
      };
      exports.setMaxLength = function(maxLength) {
        return function(input) {
          return function() {
            input.maxLength = maxLength;
          };
        };
      };
      exports.min = function(input) {
        return function() {
          return input.min;
        };
      };
      exports.setMin = function(min) {
        return function(input) {
          return function() {
            input.min = min;
          };
        };
      };
      exports.minLength = function(input) {
        return function() {
          return input.minLength;
        };
      };
      exports.setMinLength = function(minLength) {
        return function(input) {
          return function() {
            input.minLength = minLength;
          };
        };
      };
      exports.multiple = function(input) {
        return function() {
          return input.multiple;
        };
      };
      exports.setMultiple = function(multiple) {
        return function(input) {
          return function() {
            input.multiple = multiple;
          };
        };
      };
      exports.name = function(input) {
        return function() {
          return input.name;
        };
      };
      exports.setName = function(name) {
        return function(input) {
          return function() {
            input.name = name;
          };
        };
      };
      exports.pattern = function(input) {
        return function() {
          return input.pattern;
        };
      };
      exports.setPattern = function(pattern) {
        return function(input) {
          return function() {
            input.pattern = pattern;
          };
        };
      };
      exports.placeholder = function(input) {
        return function() {
          return input.placeholder;
        };
      };
      exports.setPlaceholder = function(placeholder) {
        return function(input) {
          return function() {
            input.placeholder = placeholder;
          };
        };
      };
      exports.readOnly = function(input) {
        return function() {
          return input.readOnly;
        };
      };
      exports.setReadOnly = function(readOnly) {
        return function(input) {
          return function() {
            input.readOnly = readOnly;
          };
        };
      };
      exports.required = function(input) {
        return function() {
          return input.required;
        };
      };
      exports.setRequired = function(required) {
        return function(input) {
          return function() {
            input.required = required;
          };
        };
      };
      exports.size = function(input) {
        return function() {
          return input.size;
        };
      };
      exports.setSize = function(size) {
        return function(input) {
          return function() {
            input.size = size;
          };
        };
      };
      exports.src = function(input) {
        return function() {
          return input.src;
        };
      };
      exports.setSrc = function(src) {
        return function(input) {
          return function() {
            input.src = src;
          };
        };
      };
      exports.step = function(input) {
        return function() {
          return input.step;
        };
      };
      exports.setStep = function(step) {
        return function(input) {
          return function() {
            input.step = step;
          };
        };
      };
      exports.type_ = function(input) {
        return function() {
          return input.type;
        };
      };
      exports.setType = function(type) {
        return function(input) {
          return function() {
            input.type = type;
          };
        };
      };
      exports.defaultValue = function(input) {
        return function() {
          return input.defaultValue;
        };
      };
      exports.setDefaultValue = function(defaultValue) {
        return function(input) {
          return function() {
            input.defaultValue = defaultValue;
          };
        };
      };
      exports.value = function(input) {
        return function() {
          return input.value;
        };
      };
      exports.setValue = function(value) {
        return function(input) {
          return function() {
            input.value = value;
          };
        };
      };
      exports.valueAsDate = function(input) {
        return function() {
          return input.valueAsDate;
        };
      };
      exports.setValueAsDate = function(valueAsDate) {
        return function(input) {
          return function() {
            input.valueAsDate = valueAsDate;
          };
        };
      };
      exports.valueAsNumber = function(input) {
        return function() {
          return input.valueAsNumber;
        };
      };
      exports.setValueAsNumber = function(valueAsNumber) {
        return function(input) {
          return function() {
            input.valueAsNumber = valueAsNumber;
          };
        };
      };
      exports.width = function(input) {
        return function() {
          return input.width;
        };
      };
      exports.setWidth = function(width) {
        return function(input) {
          return function() {
            input.width = width;
          };
        };
      };
      exports.stepUpBy = function(n) {
        return function(input) {
          return function() {
            input.stepUp(n);
          };
        };
      };
      exports.stepDownBy = function(n) {
        return function(input) {
          return function() {
            input.stepDown(n);
          };
        };
      };
      exports.willValidate = function(input) {
        return function() {
          return input.willValidate;
        };
      };
      exports.validity = function(input) {
        return function() {
          return input.validity;
        };
      };
      exports.validationMessage = function(input) {
        return function() {
          return input.validationMessage;
        };
      };
      exports.checkValidity = function(input) {
        return function() {
          return input.checkValidity();
        };
      };
      exports.reportValidity = function(input) {
        return function() {
          return input.reportValidity();
        };
      };
      exports.setCustomValidity = function(value) {
        return function(input) {
          return function() {
            input.setCustomValidity(value);
          };
        };
      };
      exports.labels = function(input) {
        return function() {
          return input.labels;
        };
      };
      exports.select = function(input) {
        return function() {
          input.select();
        };
      };
      exports.selectionStart = function(input) {
        return function() {
          return input.selectionStart;
        };
      };
      exports.setSelectionStart = function(selectionStart) {
        return function(input) {
          return function() {
            input.selectionStart = selectionStart;
          };
        };
      };
      exports.selectionEnd = function(input) {
        return function() {
          return input.selectionEnd;
        };
      };
      exports.setSelectionEnd = function(selectionEnd) {
        return function(input) {
          return function() {
            input.selectionEnd = selectionEnd;
          };
        };
      };
      exports.selectionDirection = function(input) {
        return function() {
          return input.selectionDirection;
        };
      };
      exports.setSelectionDirection = function(selectionDirection) {
        return function(input) {
          return function() {
            input.selectionDirection = selectionDirection;
          };
        };
      };
      exports.setRangeText = function(replacement) {
        return function(input) {
          return function() {
            input.setRangeText(replacement);
          };
        };
      };
      exports._setRangeText = function(replacement, start, end, selectionMode, textarea) {
        textarea.setRangeText(replacement, start, end, selectionMode);
      };
      exports.setSelectionRange = function(start) {
        return function(end) {
          return function(direction) {
            return function(input) {
              return function() {
                input.setSelectionRange(start, end, direction, input);
              };
            };
          };
        };
      };
    }
  });

  // output/Web.HTML.SelectionMode/index.js
  var require_Web_HTML24 = __commonJS({
    "output/Web.HTML.SelectionMode/index.js"(exports, module) {
      "use strict";
      var Data_Maybe = require_Data15();
      var Data_Ordering = require_Data9();
      var Preserve = function() {
        function Preserve2() {
        }
        ;
        Preserve2.value = new Preserve2();
        return Preserve2;
      }();
      var Select = function() {
        function Select2() {
        }
        ;
        Select2.value = new Select2();
        return Select2;
      }();
      var Start = function() {
        function Start2() {
        }
        ;
        Start2.value = new Start2();
        return Start2;
      }();
      var End = function() {
        function End2() {
        }
        ;
        End2.value = new End2();
        return End2;
      }();
      var showSelectionMode = {
        show: function(v) {
          if (v instanceof Preserve) {
            return "Preserve";
          }
          ;
          if (v instanceof Select) {
            return "Select";
          }
          ;
          if (v instanceof Start) {
            return "Start";
          }
          ;
          if (v instanceof End) {
            return "End";
          }
          ;
          throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 17, column 10 - line 21, column 17): " + [v.constructor.name]);
        }
      };
      var print = function(v) {
        if (v instanceof Preserve) {
          return "preserve";
        }
        ;
        if (v instanceof Select) {
          return "select";
        }
        ;
        if (v instanceof Start) {
          return "start";
        }
        ;
        if (v instanceof End) {
          return "end";
        }
        ;
        throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 32, column 9 - line 36, column 15): " + [v.constructor.name]);
      };
      var parse = function(v) {
        if (v === "preserve") {
          return new Data_Maybe.Just(Preserve.value);
        }
        ;
        if (v === "select") {
          return new Data_Maybe.Just(Select.value);
        }
        ;
        if (v === "start") {
          return new Data_Maybe.Just(Start.value);
        }
        ;
        if (v === "end") {
          return new Data_Maybe.Just(End.value);
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      var eqSelectionMode = {
        eq: function(x) {
          return function(y) {
            if (x instanceof Preserve && y instanceof Preserve) {
              return true;
            }
            ;
            if (x instanceof Select && y instanceof Select) {
              return true;
            }
            ;
            if (x instanceof Start && y instanceof Start) {
              return true;
            }
            ;
            if (x instanceof End && y instanceof End) {
              return true;
            }
            ;
            return false;
          };
        }
      };
      var ordSelectionMode = {
        compare: function(x) {
          return function(y) {
            if (x instanceof Preserve && y instanceof Preserve) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Preserve) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Preserve) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Select && y instanceof Select) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Select) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Select) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Start && y instanceof Start) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Start) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Start) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof End && y instanceof End) {
              return Data_Ordering.EQ.value;
            }
            ;
            throw new Error("Failed pattern match at Web.HTML.SelectionMode (line 14, column 1 - line 14, column 54): " + [x.constructor.name, y.constructor.name]);
          };
        },
        Eq0: function() {
          return eqSelectionMode;
        }
      };
      module.exports = {
        Preserve,
        Select,
        Start,
        End,
        parse,
        print,
        eqSelectionMode,
        ordSelectionMode,
        showSelectionMode
      };
    }
  });

  // output/Web.HTML.HTMLInputElement/index.js
  var require_Web_HTML25 = __commonJS({
    "output/Web.HTML.HTMLInputElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign68();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_HTML_SelectionMode = require_Web_HTML24();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var stepUp$prime = $foreign.stepUpBy;
      var stepUp = stepUp$prime(1);
      var stepDown$prime = $foreign.stepDownBy;
      var stepDown = stepDown$prime(1);
      var setRangeText$prime = function(rpl) {
        return function(s) {
          return function(e) {
            return function(mode) {
              return function(area) {
                return function() {
                  return $foreign["_setRangeText"](rpl, s, e, Web_HTML_SelectionMode.print(mode), area);
                };
              };
            };
          };
        };
      };
      var list = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($1) {
          return $0($foreign["_list"]($1));
        };
      }();
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
      var form = function() {
        var $2 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($3) {
          return $2($foreign["_form"]($3));
        };
      }();
      var files = function() {
        var $4 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($5) {
          return $4($foreign["_files"]($5));
        };
      }();
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        form,
        files,
        list,
        stepUp,
        "stepUp'": stepUp$prime,
        stepDown,
        "stepDown'": stepDown$prime,
        "setRangeText'": setRangeText$prime,
        accept: $foreign.accept,
        setAccept: $foreign.setAccept,
        alt: $foreign.alt,
        setAlt: $foreign.setAlt,
        autocomplete: $foreign.autocomplete,
        setAutocomplete: $foreign.setAutocomplete,
        autofocus: $foreign.autofocus,
        setAutofocus: $foreign.setAutofocus,
        defaultChecked: $foreign.defaultChecked,
        setDefaultChecked: $foreign.setDefaultChecked,
        checked: $foreign.checked,
        setChecked: $foreign.setChecked,
        dirName: $foreign.dirName,
        setDirName: $foreign.setDirName,
        disabled: $foreign.disabled,
        setDisabled: $foreign.setDisabled,
        formAction: $foreign.formAction,
        setFormAction: $foreign.setFormAction,
        formEnctype: $foreign.formEnctype,
        setFormEnctype: $foreign.setFormEnctype,
        formMethod: $foreign.formMethod,
        setFormMethod: $foreign.setFormMethod,
        formNoValidate: $foreign.formNoValidate,
        setFormNoValidate: $foreign.setFormNoValidate,
        formTarget: $foreign.formTarget,
        setFormTarget: $foreign.setFormTarget,
        height: $foreign.height,
        setHeight: $foreign.setHeight,
        indeterminate: $foreign.indeterminate,
        setIndeterminate: $foreign.setIndeterminate,
        max: $foreign.max,
        setMax: $foreign.setMax,
        maxLength: $foreign.maxLength,
        setMaxLength: $foreign.setMaxLength,
        min: $foreign.min,
        setMin: $foreign.setMin,
        minLength: $foreign.minLength,
        setMinLength: $foreign.setMinLength,
        multiple: $foreign.multiple,
        setMultiple: $foreign.setMultiple,
        name: $foreign.name,
        setName: $foreign.setName,
        pattern: $foreign.pattern,
        setPattern: $foreign.setPattern,
        placeholder: $foreign.placeholder,
        setPlaceholder: $foreign.setPlaceholder,
        readOnly: $foreign.readOnly,
        setReadOnly: $foreign.setReadOnly,
        required: $foreign.required,
        setRequired: $foreign.setRequired,
        size: $foreign.size,
        setSize: $foreign.setSize,
        src: $foreign.src,
        setSrc: $foreign.setSrc,
        step: $foreign.step,
        setStep: $foreign.setStep,
        type_: $foreign.type_,
        setType: $foreign.setType,
        defaultValue: $foreign.defaultValue,
        setDefaultValue: $foreign.setDefaultValue,
        value: $foreign.value,
        setValue: $foreign.setValue,
        valueAsDate: $foreign.valueAsDate,
        setValueAsDate: $foreign.setValueAsDate,
        valueAsNumber: $foreign.valueAsNumber,
        setValueAsNumber: $foreign.setValueAsNumber,
        width: $foreign.width,
        setWidth: $foreign.setWidth,
        willValidate: $foreign.willValidate,
        validity: $foreign.validity,
        validationMessage: $foreign.validationMessage,
        checkValidity: $foreign.checkValidity,
        reportValidity: $foreign.reportValidity,
        setCustomValidity: $foreign.setCustomValidity,
        labels: $foreign.labels,
        select: $foreign.select,
        selectionStart: $foreign.selectionStart,
        setSelectionStart: $foreign.setSelectionStart,
        selectionEnd: $foreign.selectionEnd,
        setSelectionEnd: $foreign.setSelectionEnd,
        selectionDirection: $foreign.selectionDirection,
        setSelectionDirection: $foreign.setSelectionDirection,
        setRangeText: $foreign.setRangeText,
        setSelectionRange: $foreign.setSelectionRange
      };
    }
  });

  // output/Web.HTML.HTMLKeygenElement/foreign.js
  var require_foreign69 = __commonJS({
    "output/Web.HTML.HTMLKeygenElement/foreign.js"(exports) {
      "use strict";
      exports.autofocus = function(keygen) {
        return function() {
          return keygen.autofocus;
        };
      };
      exports.setAutofocus = function(autofocus) {
        return function(keygen) {
          return function() {
            keygen.autofocus = autofocus;
          };
        };
      };
      exports.challenge = function(keygen) {
        return function() {
          return keygen.challenge;
        };
      };
      exports.setChallenge = function(challenge) {
        return function(keygen) {
          return function() {
            keygen.challenge = challenge;
          };
        };
      };
      exports.disabled = function(keygen) {
        return function() {
          return keygen.disabled;
        };
      };
      exports.setDisabled = function(disabled) {
        return function(keygen) {
          return function() {
            keygen.disabled = disabled;
          };
        };
      };
      exports._form = function(keygen) {
        return function() {
          return keygen.form;
        };
      };
      exports.keytype = function(keygen) {
        return function() {
          return keygen.keytype;
        };
      };
      exports.setKeytype = function(keytype) {
        return function(keygen) {
          return function() {
            keygen.keytype = keytype;
          };
        };
      };
      exports.name = function(keygen) {
        return function() {
          return keygen.name;
        };
      };
      exports.setName = function(name) {
        return function(keygen) {
          return function() {
            keygen.name = name;
          };
        };
      };
      exports.type_ = function(keygen) {
        return function() {
          return keygen.type;
        };
      };
      exports.willValidate = function(keygen) {
        return function() {
          return keygen.willValidate;
        };
      };
      exports.validity = function(keygen) {
        return function() {
          return keygen.validity;
        };
      };
      exports.validationMessage = function(keygen) {
        return function() {
          return keygen.validationMessage;
        };
      };
      exports.checkValidity = function(keygen) {
        return function() {
          return keygen.checkValidity();
        };
      };
      exports.reportValidity = function(keygen) {
        return function() {
          return keygen.reportValidity();
        };
      };
      exports.setCustomValidity = function(value) {
        return function(keygen) {
          return function() {
            keygen.setCustomValidity(value);
          };
        };
      };
      exports.labels = function(keygen) {
        return function() {
          return keygen.labels;
        };
      };
    }
  });

  // output/Web.HTML.HTMLKeygenElement/index.js
  var require_Web_HTML26 = __commonJS({
    "output/Web.HTML.HTMLKeygenElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign69();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLKeygenElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLKeygenElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLKeygenElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLKeygenElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLKeygenElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLKeygenElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLKeygenElement");
      var form = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($1) {
          return $0($foreign["_form"]($1));
        };
      }();
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        form,
        autofocus: $foreign.autofocus,
        setAutofocus: $foreign.setAutofocus,
        challenge: $foreign.challenge,
        setChallenge: $foreign.setChallenge,
        disabled: $foreign.disabled,
        setDisabled: $foreign.setDisabled,
        keytype: $foreign.keytype,
        setKeytype: $foreign.setKeytype,
        name: $foreign.name,
        setName: $foreign.setName,
        type_: $foreign.type_,
        willValidate: $foreign.willValidate,
        validity: $foreign.validity,
        validationMessage: $foreign.validationMessage,
        checkValidity: $foreign.checkValidity,
        reportValidity: $foreign.reportValidity,
        setCustomValidity: $foreign.setCustomValidity,
        labels: $foreign.labels
      };
    }
  });

  // output/Web.HTML.HTMLLIElement/foreign.js
  var require_foreign70 = __commonJS({
    "output/Web.HTML.HTMLLIElement/foreign.js"(exports) {
      "use strict";
      exports.value = function(li) {
        return function() {
          return li.value;
        };
      };
      exports.setValue = function(value) {
        return function(li) {
          return function() {
            li.value = value;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLLIElement/index.js
  var require_Web_HTML27 = __commonJS({
    "output/Web.HTML.HTMLLIElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign70();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLIElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLIElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLIElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLIElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLIElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLIElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLIElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        value: $foreign.value,
        setValue: $foreign.setValue
      };
    }
  });

  // output/Web.HTML.HTMLLabelElement/foreign.js
  var require_foreign71 = __commonJS({
    "output/Web.HTML.HTMLLabelElement/foreign.js"(exports) {
      "use strict";
      exports._form = function(label) {
        return function() {
          return label.form;
        };
      };
      exports.htmlFor = function(label) {
        return function() {
          return label.htmlFor;
        };
      };
      exports.setHtmlFor = function(htmlFor) {
        return function(label) {
          return function() {
            label.htmlFor = htmlFor;
          };
        };
      };
      exports._control = function(label) {
        return function() {
          return label.control;
        };
      };
    }
  });

  // output/Web.HTML.HTMLLabelElement/index.js
  var require_Web_HTML28 = __commonJS({
    "output/Web.HTML.HTMLLabelElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign71();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLabelElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLabelElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLabelElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLabelElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLabelElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLabelElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLabelElement");
      var form = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($1) {
          return $0($foreign["_form"]($1));
        };
      }();
      var control = function() {
        var $2 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($3) {
          return $2($foreign["_control"]($3));
        };
      }();
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        form,
        control,
        htmlFor: $foreign.htmlFor,
        setHtmlFor: $foreign.setHtmlFor
      };
    }
  });

  // output/Web.HTML.HTMLLegendElement/foreign.js
  var require_foreign72 = __commonJS({
    "output/Web.HTML.HTMLLegendElement/foreign.js"(exports) {
      "use strict";
      exports._form = function(le) {
        return function() {
          return le.form;
        };
      };
    }
  });

  // output/Web.HTML.HTMLLegendElement/index.js
  var require_Web_HTML29 = __commonJS({
    "output/Web.HTML.HTMLLegendElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign72();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLegendElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLegendElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLegendElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLegendElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLegendElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLegendElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLegendElement");
      var form = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($1) {
          return $0($foreign["_form"]($1));
        };
      }();
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        form
      };
    }
  });

  // output/Web.HTML.HTMLLinkElement/foreign.js
  var require_foreign73 = __commonJS({
    "output/Web.HTML.HTMLLinkElement/foreign.js"(exports) {
      "use strict";
      exports.disabled = function(link) {
        return function() {
          return link.disabled;
        };
      };
      exports.setDisabled = function(disabled) {
        return function(link) {
          return function() {
            link.disabled = disabled;
          };
        };
      };
      exports.href = function(link) {
        return function() {
          return link.href;
        };
      };
      exports.setHref = function(href) {
        return function(link) {
          return function() {
            link.href = href;
          };
        };
      };
      exports.crossOrigin = function(link) {
        return function() {
          return link.crossOrigin;
        };
      };
      exports.setCrossOrigin = function(crossOrigin) {
        return function(link) {
          return function() {
            link.crossOrigin = crossOrigin;
          };
        };
      };
      exports.rel = function(link) {
        return function() {
          return link.rel;
        };
      };
      exports.setRel = function(rel) {
        return function(link) {
          return function() {
            link.rel = rel;
          };
        };
      };
      exports.rev = function(link) {
        return function() {
          return link.rev;
        };
      };
      exports.setRev = function(rev) {
        return function(link) {
          return function() {
            link.rev = rev;
          };
        };
      };
      exports.relList = function(link) {
        return function() {
          return link.relList;
        };
      };
      exports.media = function(link) {
        return function() {
          return link.media;
        };
      };
      exports.setMedia = function(media) {
        return function(link) {
          return function() {
            link.media = media;
          };
        };
      };
      exports.hreflang = function(link) {
        return function() {
          return link.hreflang;
        };
      };
      exports.setHreflang = function(hreflang) {
        return function(link) {
          return function() {
            link.hreflang = hreflang;
          };
        };
      };
      exports.type_ = function(link) {
        return function() {
          return link.type;
        };
      };
      exports.setType = function(type) {
        return function(link) {
          return function() {
            link.type = type;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLLinkElement/index.js
  var require_Web_HTML30 = __commonJS({
    "output/Web.HTML.HTMLLinkElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign73();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLinkElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLinkElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLinkElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLinkElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLinkElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLinkElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLLinkElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        disabled: $foreign.disabled,
        setDisabled: $foreign.setDisabled,
        href: $foreign.href,
        setHref: $foreign.setHref,
        crossOrigin: $foreign.crossOrigin,
        setCrossOrigin: $foreign.setCrossOrigin,
        rel: $foreign.rel,
        setRel: $foreign.setRel,
        rev: $foreign.rev,
        setRev: $foreign.setRev,
        relList: $foreign.relList,
        media: $foreign.media,
        setMedia: $foreign.setMedia,
        hreflang: $foreign.hreflang,
        setHreflang: $foreign.setHreflang,
        type_: $foreign.type_,
        setType: $foreign.setType
      };
    }
  });

  // output/Web.HTML.HTMLMapElement/foreign.js
  var require_foreign74 = __commonJS({
    "output/Web.HTML.HTMLMapElement/foreign.js"(exports) {
      "use strict";
      exports.name = function(map) {
        return function() {
          return map.name;
        };
      };
      exports.setName = function(name) {
        return function(map) {
          return function() {
            map.name = name;
          };
        };
      };
      exports.areas = function(map) {
        return function() {
          return map.areas;
        };
      };
      exports.images = function(map) {
        return function() {
          return map.images;
        };
      };
    }
  });

  // output/Web.HTML.HTMLMapElement/index.js
  var require_Web_HTML31 = __commonJS({
    "output/Web.HTML.HTMLMapElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign74();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMapElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMapElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMapElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMapElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMapElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMapElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMapElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        name: $foreign.name,
        setName: $foreign.setName,
        areas: $foreign.areas,
        images: $foreign.images
      };
    }
  });

  // output/Web.HTML.HTMLMediaElement/foreign.js
  var require_foreign75 = __commonJS({
    "output/Web.HTML.HTMLMediaElement/foreign.js"(exports) {
      "use strict";
      exports.src = function(media) {
        return function() {
          return media.src;
        };
      };
      exports.setSrc = function(src) {
        return function(media) {
          return function() {
            media.src = src;
          };
        };
      };
      exports.currentSrc = function(media) {
        return function() {
          return media.currentSrc;
        };
      };
      exports.crossOrigin = function(media) {
        return function() {
          return media.crossOrigin;
        };
      };
      exports.setCrossOrigin = function(crossOrigin) {
        return function(media) {
          return function() {
            media.crossOrigin = crossOrigin;
          };
        };
      };
      exports._networkState = function(media) {
        return media.networkState;
      };
      exports.preload = function(media) {
        return function() {
          return media.preload;
        };
      };
      exports.setPreload = function(preload) {
        return function(media) {
          return function() {
            media.preload = preload;
          };
        };
      };
      exports.load = function(media) {
        return function() {
          return media.load();
        };
      };
      exports._canPlayType = function(type, media) {
        return media.canPlayType(type);
      };
      exports._readyState = function(media) {
        return media.readyState;
      };
      exports.seeking = function(media) {
        return function() {
          return media.seeking;
        };
      };
      exports.currentTime = function(media) {
        return function() {
          return media.currentTime;
        };
      };
      exports.setCurrentTime = function(currentTime) {
        return function(media) {
          return function() {
            media.currentTime = currentTime;
          };
        };
      };
      exports.duration = function(media) {
        return function() {
          return media.duration;
        };
      };
      exports.getStartDate = function(media) {
        return function() {
          return media.getStartDate();
        };
      };
      exports.paused = function(media) {
        return function() {
          return media.paused;
        };
      };
      exports.defaultPlaybackRate = function(media) {
        return function() {
          return media.defaultPlaybackRate;
        };
      };
      exports.setDefaultPlaybackRate = function(defaultPlaybackRate) {
        return function(media) {
          return function() {
            media.defaultPlaybackRate = defaultPlaybackRate;
          };
        };
      };
      exports.playbackRate = function(media) {
        return function() {
          return media.playbackRate;
        };
      };
      exports.setPlaybackRate = function(playbackRate) {
        return function(media) {
          return function() {
            media.playbackRate = playbackRate;
          };
        };
      };
      exports.ended = function(media) {
        return function() {
          return media.ended;
        };
      };
      exports.autoplay = function(media) {
        return function() {
          return media.autoplay;
        };
      };
      exports.setAutoplay = function(autoplay) {
        return function(media) {
          return function() {
            media.autoplay = autoplay;
          };
        };
      };
      exports.loop = function(media) {
        return function() {
          return media.loop;
        };
      };
      exports.setLoop = function(loop) {
        return function(media) {
          return function() {
            media.loop = loop;
          };
        };
      };
      exports.play = function(media) {
        return function() {
          media.play();
        };
      };
      exports.pause = function(media) {
        return function() {
          media.pause();
        };
      };
      exports.mediaGroup = function(media) {
        return function() {
          return media.mediaGroup;
        };
      };
      exports.setMediaGroup = function(mediaGroup) {
        return function(media) {
          return function() {
            media.mediaGroup = mediaGroup;
          };
        };
      };
      exports.controls = function(media) {
        return function() {
          return media.controls;
        };
      };
      exports.setControls = function(controls) {
        return function(media) {
          return function() {
            media.controls = controls;
          };
        };
      };
      exports.volume = function(media) {
        return function() {
          return media.volume;
        };
      };
      exports.setVolume = function(volume) {
        return function(media) {
          return function() {
            media.volume = volume;
          };
        };
      };
      exports.muted = function(media) {
        return function() {
          return media.muted;
        };
      };
      exports.setMuted = function(muted) {
        return function(media) {
          return function() {
            media.muted = muted;
          };
        };
      };
      exports.defaultMuted = function(media) {
        return function() {
          return media.defaultMuted;
        };
      };
      exports.setDefaultMuted = function(defaultMuted) {
        return function(media) {
          return function() {
            media.defaultMuted = defaultMuted;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLMediaElement.CanPlayType/index.js
  var require_Web_HTML_HTMLMediaElement = __commonJS({
    "output/Web.HTML.HTMLMediaElement.CanPlayType/index.js"(exports, module) {
      "use strict";
      var Data_Maybe = require_Data15();
      var Data_Ordering = require_Data9();
      var Unspecified = function() {
        function Unspecified2() {
        }
        ;
        Unspecified2.value = new Unspecified2();
        return Unspecified2;
      }();
      var Maybe = function() {
        function Maybe2() {
        }
        ;
        Maybe2.value = new Maybe2();
        return Maybe2;
      }();
      var Probably = function() {
        function Probably2() {
        }
        ;
        Probably2.value = new Probably2();
        return Probably2;
      }();
      var showCanPlayType = {
        show: function(v) {
          if (v instanceof Unspecified) {
            return "Unspecified";
          }
          ;
          if (v instanceof Maybe) {
            return "Maybe";
          }
          ;
          if (v instanceof Probably) {
            return "Probably";
          }
          ;
          throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.CanPlayType (line 16, column 10 - line 19, column 27): " + [v.constructor.name]);
        }
      };
      var print = function(v) {
        if (v instanceof Unspecified) {
          return "";
        }
        ;
        if (v instanceof Maybe) {
          return "maybe";
        }
        ;
        if (v instanceof Probably) {
          return "probably";
        }
        ;
        throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.CanPlayType (line 29, column 9 - line 32, column 25): " + [v.constructor.name]);
      };
      var parse = function(v) {
        if (v === "") {
          return new Data_Maybe.Just(Unspecified.value);
        }
        ;
        if (v === "maybe") {
          return new Data_Maybe.Just(Maybe.value);
        }
        ;
        if (v === "probably") {
          return new Data_Maybe.Just(Probably.value);
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      var eqCanPlayType = {
        eq: function(x) {
          return function(y) {
            if (x instanceof Unspecified && y instanceof Unspecified) {
              return true;
            }
            ;
            if (x instanceof Maybe && y instanceof Maybe) {
              return true;
            }
            ;
            if (x instanceof Probably && y instanceof Probably) {
              return true;
            }
            ;
            return false;
          };
        }
      };
      var ordCanPlayType = {
        compare: function(x) {
          return function(y) {
            if (x instanceof Unspecified && y instanceof Unspecified) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Unspecified) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Unspecified) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Maybe && y instanceof Maybe) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Maybe) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Maybe) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Probably && y instanceof Probably) {
              return Data_Ordering.EQ.value;
            }
            ;
            throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.CanPlayType (line 13, column 1 - line 13, column 50): " + [x.constructor.name, y.constructor.name]);
          };
        },
        Eq0: function() {
          return eqCanPlayType;
        }
      };
      module.exports = {
        Unspecified,
        Maybe,
        Probably,
        parse,
        print,
        eqCanPlayType,
        ordCanPlayType,
        showCanPlayType
      };
    }
  });

  // output/Web.HTML.HTMLMediaElement.NetworkState/index.js
  var require_Web_HTML_HTMLMediaElement2 = __commonJS({
    "output/Web.HTML.HTMLMediaElement.NetworkState/index.js"(exports, module) {
      "use strict";
      var Data_Enum = require_Data37();
      var Data_Maybe = require_Data15();
      var Data_Ordering = require_Data9();
      var Empty = function() {
        function Empty2() {
        }
        ;
        Empty2.value = new Empty2();
        return Empty2;
      }();
      var Idle = function() {
        function Idle2() {
        }
        ;
        Idle2.value = new Idle2();
        return Idle2;
      }();
      var Loading = function() {
        function Loading2() {
        }
        ;
        Loading2.value = new Loading2();
        return Loading2;
      }();
      var NoSource = function() {
        function NoSource2() {
        }
        ;
        NoSource2.value = new NoSource2();
        return NoSource2;
      }();
      var toEnumNetworkState = function(v) {
        if (v === 0) {
          return new Data_Maybe.Just(Empty.value);
        }
        ;
        if (v === 1) {
          return new Data_Maybe.Just(Idle.value);
        }
        ;
        if (v === 2) {
          return new Data_Maybe.Just(Loading.value);
        }
        ;
        if (v === 3) {
          return new Data_Maybe.Just(NoSource.value);
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      var showNetworkState = {
        show: function(v) {
          if (v instanceof Empty) {
            return "Empty";
          }
          ;
          if (v instanceof Idle) {
            return "Idle";
          }
          ;
          if (v instanceof Loading) {
            return "Loading";
          }
          ;
          if (v instanceof NoSource) {
            return "NoSource";
          }
          ;
          throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.NetworkState (line 29, column 1 - line 33, column 29): " + [v.constructor.name]);
        }
      };
      var fromEnumNetworkState = function(v) {
        if (v instanceof Empty) {
          return 0;
        }
        ;
        if (v instanceof Idle) {
          return 1;
        }
        ;
        if (v instanceof Loading) {
          return 2;
        }
        ;
        if (v instanceof NoSource) {
          return 3;
        }
        ;
        throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.NetworkState (line 46, column 3 - line 50, column 18): " + [v.constructor.name]);
      };
      var eqNetworkState = {
        eq: function(x) {
          return function(y) {
            if (x instanceof Empty && y instanceof Empty) {
              return true;
            }
            ;
            if (x instanceof Idle && y instanceof Idle) {
              return true;
            }
            ;
            if (x instanceof Loading && y instanceof Loading) {
              return true;
            }
            ;
            if (x instanceof NoSource && y instanceof NoSource) {
              return true;
            }
            ;
            return false;
          };
        }
      };
      var ordNetworkState = {
        compare: function(x) {
          return function(y) {
            if (x instanceof Empty && y instanceof Empty) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Empty) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Empty) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Idle && y instanceof Idle) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Idle) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Idle) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Loading && y instanceof Loading) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Loading) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Loading) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof NoSource && y instanceof NoSource) {
              return Data_Ordering.EQ.value;
            }
            ;
            throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.NetworkState (line 14, column 1 - line 14, column 52): " + [x.constructor.name, y.constructor.name]);
          };
        },
        Eq0: function() {
          return eqNetworkState;
        }
      };
      var enumNetworkState = {
        succ: Data_Enum.defaultSucc(toEnumNetworkState)(fromEnumNetworkState),
        pred: Data_Enum.defaultPred(toEnumNetworkState)(fromEnumNetworkState),
        Ord0: function() {
          return ordNetworkState;
        }
      };
      var boundedNetworkState = {
        bottom: Empty.value,
        top: NoSource.value,
        Ord0: function() {
          return ordNetworkState;
        }
      };
      var boundedEnumNetworkState = {
        cardinality: 4,
        toEnum: toEnumNetworkState,
        fromEnum: fromEnumNetworkState,
        Bounded0: function() {
          return boundedNetworkState;
        },
        Enum1: function() {
          return enumNetworkState;
        }
      };
      module.exports = {
        Empty,
        Idle,
        Loading,
        NoSource,
        eqNetworkState,
        ordNetworkState,
        boundedNetworkState,
        enumNetworkState,
        boundedEnumNetworkState,
        showNetworkState
      };
    }
  });

  // output/Web.HTML.HTMLMediaElement.ReadyState/index.js
  var require_Web_HTML_HTMLMediaElement3 = __commonJS({
    "output/Web.HTML.HTMLMediaElement.ReadyState/index.js"(exports, module) {
      "use strict";
      var Data_Enum = require_Data37();
      var Data_Maybe = require_Data15();
      var Data_Ordering = require_Data9();
      var HaveNothing = function() {
        function HaveNothing2() {
        }
        ;
        HaveNothing2.value = new HaveNothing2();
        return HaveNothing2;
      }();
      var HaveMetadata = function() {
        function HaveMetadata2() {
        }
        ;
        HaveMetadata2.value = new HaveMetadata2();
        return HaveMetadata2;
      }();
      var HaveCurrentData = function() {
        function HaveCurrentData2() {
        }
        ;
        HaveCurrentData2.value = new HaveCurrentData2();
        return HaveCurrentData2;
      }();
      var HaveFutureData = function() {
        function HaveFutureData2() {
        }
        ;
        HaveFutureData2.value = new HaveFutureData2();
        return HaveFutureData2;
      }();
      var HaveEnoughData = function() {
        function HaveEnoughData2() {
        }
        ;
        HaveEnoughData2.value = new HaveEnoughData2();
        return HaveEnoughData2;
      }();
      var toEnumReadyState = function(v) {
        if (v === 0) {
          return new Data_Maybe.Just(HaveNothing.value);
        }
        ;
        if (v === 1) {
          return new Data_Maybe.Just(HaveMetadata.value);
        }
        ;
        if (v === 2) {
          return new Data_Maybe.Just(HaveCurrentData.value);
        }
        ;
        if (v === 3) {
          return new Data_Maybe.Just(HaveFutureData.value);
        }
        ;
        if (v === 4) {
          return new Data_Maybe.Just(HaveEnoughData.value);
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      var showReadyState = {
        show: function(v) {
          if (v instanceof HaveNothing) {
            return "HaveNothing";
          }
          ;
          if (v instanceof HaveMetadata) {
            return "HaveMetadata";
          }
          ;
          if (v instanceof HaveCurrentData) {
            return "HaveCurrentData";
          }
          ;
          if (v instanceof HaveFutureData) {
            return "HaveFutureData";
          }
          ;
          if (v instanceof HaveEnoughData) {
            return "HaveEnoughData";
          }
          ;
          throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.ReadyState (line 30, column 1 - line 35, column 41): " + [v.constructor.name]);
        }
      };
      var fromEnumReadyState = function(v) {
        if (v instanceof HaveNothing) {
          return 0;
        }
        ;
        if (v instanceof HaveMetadata) {
          return 1;
        }
        ;
        if (v instanceof HaveCurrentData) {
          return 2;
        }
        ;
        if (v instanceof HaveFutureData) {
          return 3;
        }
        ;
        if (v instanceof HaveEnoughData) {
          return 4;
        }
        ;
        throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.ReadyState (line 49, column 3 - line 54, column 24): " + [v.constructor.name]);
      };
      var eqReadyState = {
        eq: function(x) {
          return function(y) {
            if (x instanceof HaveNothing && y instanceof HaveNothing) {
              return true;
            }
            ;
            if (x instanceof HaveMetadata && y instanceof HaveMetadata) {
              return true;
            }
            ;
            if (x instanceof HaveCurrentData && y instanceof HaveCurrentData) {
              return true;
            }
            ;
            if (x instanceof HaveFutureData && y instanceof HaveFutureData) {
              return true;
            }
            ;
            if (x instanceof HaveEnoughData && y instanceof HaveEnoughData) {
              return true;
            }
            ;
            return false;
          };
        }
      };
      var ordReadyState = {
        compare: function(x) {
          return function(y) {
            if (x instanceof HaveNothing && y instanceof HaveNothing) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof HaveNothing) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof HaveNothing) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof HaveMetadata && y instanceof HaveMetadata) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof HaveMetadata) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof HaveMetadata) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof HaveCurrentData && y instanceof HaveCurrentData) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof HaveCurrentData) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof HaveCurrentData) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof HaveFutureData && y instanceof HaveFutureData) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof HaveFutureData) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof HaveFutureData) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof HaveEnoughData && y instanceof HaveEnoughData) {
              return Data_Ordering.EQ.value;
            }
            ;
            throw new Error("Failed pattern match at Web.HTML.HTMLMediaElement.ReadyState (line 15, column 1 - line 15, column 48): " + [x.constructor.name, y.constructor.name]);
          };
        },
        Eq0: function() {
          return eqReadyState;
        }
      };
      var enumReadyState = {
        succ: Data_Enum.defaultSucc(toEnumReadyState)(fromEnumReadyState),
        pred: Data_Enum.defaultPred(toEnumReadyState)(fromEnumReadyState),
        Ord0: function() {
          return ordReadyState;
        }
      };
      var boundedReadyState = {
        bottom: HaveNothing.value,
        top: HaveEnoughData.value,
        Ord0: function() {
          return ordReadyState;
        }
      };
      var boundedEnumReadyState = {
        cardinality: 5,
        toEnum: toEnumReadyState,
        fromEnum: fromEnumReadyState,
        Bounded0: function() {
          return boundedReadyState;
        },
        Enum1: function() {
          return enumReadyState;
        }
      };
      module.exports = {
        HaveNothing,
        HaveMetadata,
        HaveCurrentData,
        HaveFutureData,
        HaveEnoughData,
        eqReadyState,
        ordReadyState,
        boundedReadyState,
        enumReadyState,
        boundedEnumReadyState,
        showReadyState
      };
    }
  });

  // output/Web.HTML.HTMLMediaElement/index.js
  var require_Web_HTML32 = __commonJS({
    "output/Web.HTML.HTMLMediaElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign75();
      var Data_Enum = require_Data37();
      var Data_Functor = require_Data4();
      var Data_Maybe = require_Data15();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_HTML_HTMLMediaElement_CanPlayType = require_Web_HTML_HTMLMediaElement();
      var Web_HTML_HTMLMediaElement_NetworkState = require_Web_HTML_HTMLMediaElement2();
      var Web_HTML_HTMLMediaElement_ReadyState = require_Web_HTML_HTMLMediaElement3();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var readyState = function(el) {
        return Data_Functor.map(Effect.functorEffect)(function() {
          var $0 = Data_Maybe.fromMaybe(Web_HTML_HTMLMediaElement_ReadyState.HaveNothing.value);
          var $1 = Data_Enum.toEnum(Web_HTML_HTMLMediaElement_ReadyState.boundedEnumReadyState);
          return function($2) {
            return $0($1($2));
          };
        }())(function() {
          return $foreign["_readyState"](el);
        });
      };
      var networkState = function(el) {
        return Data_Functor.map(Effect.functorEffect)(function() {
          var $3 = Data_Maybe.fromMaybe(Web_HTML_HTMLMediaElement_NetworkState.Empty.value);
          var $4 = Data_Enum.toEnum(Web_HTML_HTMLMediaElement_NetworkState.boundedEnumNetworkState);
          return function($5) {
            return $3($4($5));
          };
        }())(function() {
          return $foreign["_networkState"](el);
        });
      };
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMediaElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMediaElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMediaElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMediaElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMediaElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMediaElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMediaElement");
      var canPlayType = function(ty) {
        return function(el) {
          return Data_Functor.map(Effect.functorEffect)(function() {
            var $6 = Data_Maybe.fromMaybe(Web_HTML_HTMLMediaElement_CanPlayType.Unspecified.value);
            return function($7) {
              return $6(Web_HTML_HTMLMediaElement_CanPlayType.parse($7));
            };
          }())(function() {
            return $foreign["_canPlayType"](ty, el);
          });
        };
      };
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        networkState,
        canPlayType,
        readyState,
        src: $foreign.src,
        setSrc: $foreign.setSrc,
        currentSrc: $foreign.currentSrc,
        crossOrigin: $foreign.crossOrigin,
        setCrossOrigin: $foreign.setCrossOrigin,
        preload: $foreign.preload,
        setPreload: $foreign.setPreload,
        load: $foreign.load,
        seeking: $foreign.seeking,
        currentTime: $foreign.currentTime,
        setCurrentTime: $foreign.setCurrentTime,
        duration: $foreign.duration,
        getStartDate: $foreign.getStartDate,
        paused: $foreign.paused,
        defaultPlaybackRate: $foreign.defaultPlaybackRate,
        setDefaultPlaybackRate: $foreign.setDefaultPlaybackRate,
        playbackRate: $foreign.playbackRate,
        setPlaybackRate: $foreign.setPlaybackRate,
        ended: $foreign.ended,
        autoplay: $foreign.autoplay,
        setAutoplay: $foreign.setAutoplay,
        loop: $foreign.loop,
        setLoop: $foreign.setLoop,
        play: $foreign.play,
        pause: $foreign.pause,
        mediaGroup: $foreign.mediaGroup,
        setMediaGroup: $foreign.setMediaGroup,
        controls: $foreign.controls,
        setControls: $foreign.setControls,
        volume: $foreign.volume,
        setVolume: $foreign.setVolume,
        muted: $foreign.muted,
        setMuted: $foreign.setMuted,
        defaultMuted: $foreign.defaultMuted,
        setDefaultMuted: $foreign.setDefaultMuted
      };
    }
  });

  // output/Web.HTML.HTMLMetaElement/foreign.js
  var require_foreign76 = __commonJS({
    "output/Web.HTML.HTMLMetaElement/foreign.js"(exports) {
      "use strict";
      exports.name = function(meta) {
        return function() {
          return meta.name;
        };
      };
      exports.setName = function(name) {
        return function(meta) {
          return function() {
            meta.name = name;
          };
        };
      };
      exports.httpEquiv = function(meta) {
        return function() {
          return meta.httpEquiv;
        };
      };
      exports.setHttpEquiv = function(httpEquiv) {
        return function(meta) {
          return function() {
            meta.httpEquiv = httpEquiv;
          };
        };
      };
      exports.content = function(meta) {
        return function() {
          return meta.content;
        };
      };
      exports.setContent = function(content) {
        return function(meta) {
          return function() {
            meta.content = content;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLMetaElement/index.js
  var require_Web_HTML33 = __commonJS({
    "output/Web.HTML.HTMLMetaElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign76();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMetaElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMetaElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMetaElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMetaElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMetaElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMetaElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMetaElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        name: $foreign.name,
        setName: $foreign.setName,
        httpEquiv: $foreign.httpEquiv,
        setHttpEquiv: $foreign.setHttpEquiv,
        content: $foreign.content,
        setContent: $foreign.setContent
      };
    }
  });

  // output/Web.HTML.HTMLMeterElement/foreign.js
  var require_foreign77 = __commonJS({
    "output/Web.HTML.HTMLMeterElement/foreign.js"(exports) {
      "use strict";
      exports.value = function(meter) {
        return function() {
          return meter.value;
        };
      };
      exports.setValue = function(value) {
        return function(meter) {
          return function() {
            meter.value = value;
          };
        };
      };
      exports.min = function(meter) {
        return function() {
          return meter.min;
        };
      };
      exports.setMin = function(min) {
        return function(meter) {
          return function() {
            meter.min = min;
          };
        };
      };
      exports.max = function(meter) {
        return function() {
          return meter.max;
        };
      };
      exports.setMax = function(max) {
        return function(meter) {
          return function() {
            meter.max = max;
          };
        };
      };
      exports.low = function(meter) {
        return function() {
          return meter.low;
        };
      };
      exports.setLow = function(low) {
        return function(meter) {
          return function() {
            meter.low = low;
          };
        };
      };
      exports.high = function(meter) {
        return function() {
          return meter.high;
        };
      };
      exports.setHigh = function(high) {
        return function(meter) {
          return function() {
            meter.high = high;
          };
        };
      };
      exports.optimum = function(meter) {
        return function() {
          return meter.optimum;
        };
      };
      exports.setOptimum = function(optimum) {
        return function(meter) {
          return function() {
            meter.optimum = optimum;
          };
        };
      };
      exports.labels = function(meter) {
        return function() {
          return meter.labels;
        };
      };
    }
  });

  // output/Web.HTML.HTMLMeterElement/index.js
  var require_Web_HTML34 = __commonJS({
    "output/Web.HTML.HTMLMeterElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign77();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMeterElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMeterElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMeterElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMeterElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMeterElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMeterElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLMeterElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        value: $foreign.value,
        setValue: $foreign.setValue,
        min: $foreign.min,
        setMin: $foreign.setMin,
        max: $foreign.max,
        setMax: $foreign.setMax,
        low: $foreign.low,
        setLow: $foreign.setLow,
        high: $foreign.high,
        setHigh: $foreign.setHigh,
        optimum: $foreign.optimum,
        setOptimum: $foreign.setOptimum,
        labels: $foreign.labels
      };
    }
  });

  // output/Web.HTML.HTMLModElement/foreign.js
  var require_foreign78 = __commonJS({
    "output/Web.HTML.HTMLModElement/foreign.js"(exports) {
      "use strict";
      exports.cite = function(mod) {
        return function() {
          return mod.cite;
        };
      };
      exports.setCite = function(cite) {
        return function(mod) {
          return function() {
            mod.cite = cite;
          };
        };
      };
      exports.dateTime = function(mod) {
        return function() {
          return mod.dateTime;
        };
      };
      exports.setDateTime = function(dateTime) {
        return function(mod) {
          return function() {
            mod.dateTime = dateTime;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLModElement/index.js
  var require_Web_HTML35 = __commonJS({
    "output/Web.HTML.HTMLModElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign78();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLModElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLModElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLModElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLModElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLModElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLModElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLModElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        cite: $foreign.cite,
        setCite: $foreign.setCite,
        dateTime: $foreign.dateTime,
        setDateTime: $foreign.setDateTime
      };
    }
  });

  // output/Web.HTML.HTMLOListElement/foreign.js
  var require_foreign79 = __commonJS({
    "output/Web.HTML.HTMLOListElement/foreign.js"(exports) {
      "use strict";
      exports.reversed = function(ol) {
        return function() {
          return ol.reversed;
        };
      };
      exports.setReversed = function(reversed) {
        return function(ol) {
          return function() {
            ol.reversed = reversed;
          };
        };
      };
      exports.start = function(ol) {
        return function() {
          return ol.start;
        };
      };
      exports.setStart = function(start) {
        return function(ol) {
          return function() {
            ol.start = start;
          };
        };
      };
      exports.type_ = function(ol) {
        return function() {
          return ol.type;
        };
      };
      exports.setType = function(type) {
        return function(ol) {
          return function() {
            ol.type = type;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLOListElement/index.js
  var require_Web_HTML36 = __commonJS({
    "output/Web.HTML.HTMLOListElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign79();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOListElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOListElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOListElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOListElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOListElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOListElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOListElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        reversed: $foreign.reversed,
        setReversed: $foreign.setReversed,
        start: $foreign.start,
        setStart: $foreign.setStart,
        type_: $foreign.type_,
        setType: $foreign.setType
      };
    }
  });

  // output/Web.HTML.HTMLObjectElement/foreign.js
  var require_foreign80 = __commonJS({
    "output/Web.HTML.HTMLObjectElement/foreign.js"(exports) {
      "use strict";
      exports.data_ = function(object) {
        return function() {
          return object.data;
        };
      };
      exports.setData = function(data) {
        return function(object) {
          return function() {
            object.data = data;
          };
        };
      };
      exports.type_ = function(object) {
        return function() {
          return object.type;
        };
      };
      exports.setType = function(type) {
        return function(object) {
          return function() {
            object.type = type;
          };
        };
      };
      exports.typeMustMatch = function(object) {
        return function() {
          return object.typeMustMatch;
        };
      };
      exports.name = function(object) {
        return function() {
          return object.name;
        };
      };
      exports.setName = function(name) {
        return function(object) {
          return function() {
            object.name = name;
          };
        };
      };
      exports.useMap = function(object) {
        return function() {
          return object.useMap;
        };
      };
      exports.setUseMap = function(useMap) {
        return function(object) {
          return function() {
            object.useMap = useMap;
          };
        };
      };
      exports._form = function(object) {
        return function() {
          return object.form;
        };
      };
      exports.width = function(object) {
        return function() {
          return object.width;
        };
      };
      exports.setWidth = function(width) {
        return function(object) {
          return function() {
            object.width = width;
          };
        };
      };
      exports.height = function(object) {
        return function() {
          return object.height;
        };
      };
      exports.setHeight = function(height) {
        return function(object) {
          return function() {
            object.height = height;
          };
        };
      };
      exports._contentDocument = function(object) {
        return function() {
          return object.contentDocument;
        };
      };
      exports.willValidate = function(object) {
        return function() {
          return object.willValidate;
        };
      };
      exports.validity = function(object) {
        return function() {
          return object.validity;
        };
      };
      exports.validationMessage = function(object) {
        return function() {
          return object.validationMessage;
        };
      };
      exports.checkValidity = function(object) {
        return function() {
          return object.checkValidity();
        };
      };
      exports.reportValidity = function(object) {
        return function() {
          return object.reportValidity();
        };
      };
      exports.setCustomValidity = function(value) {
        return function(object) {
          return function() {
            object.setCustomValidity(value);
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLObjectElement/index.js
  var require_Web_HTML37 = __commonJS({
    "output/Web.HTML.HTMLObjectElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign80();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLObjectElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLObjectElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLObjectElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLObjectElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLObjectElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLObjectElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLObjectElement");
      var form = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($1) {
          return $0($foreign["_form"]($1));
        };
      }();
      var contentDocument = function() {
        var $2 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($3) {
          return $2($foreign["_contentDocument"]($3));
        };
      }();
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        form,
        contentDocument,
        data_: $foreign.data_,
        setData: $foreign.setData,
        type_: $foreign.type_,
        setType: $foreign.setType,
        typeMustMatch: $foreign.typeMustMatch,
        name: $foreign.name,
        setName: $foreign.setName,
        useMap: $foreign.useMap,
        setUseMap: $foreign.setUseMap,
        width: $foreign.width,
        setWidth: $foreign.setWidth,
        height: $foreign.height,
        setHeight: $foreign.setHeight,
        willValidate: $foreign.willValidate,
        validity: $foreign.validity,
        validationMessage: $foreign.validationMessage,
        checkValidity: $foreign.checkValidity,
        reportValidity: $foreign.reportValidity,
        setCustomValidity: $foreign.setCustomValidity
      };
    }
  });

  // output/Web.HTML.HTMLOptGroupElement/foreign.js
  var require_foreign81 = __commonJS({
    "output/Web.HTML.HTMLOptGroupElement/foreign.js"(exports) {
      "use strict";
      exports.disabled = function(optgroup) {
        return function() {
          return optgroup.disabled;
        };
      };
      exports.setDisabled = function(disabled) {
        return function(optgroup) {
          return function() {
            optgroup.disabled = disabled;
          };
        };
      };
      exports.label = function(optgroup) {
        return function() {
          return optgroup.label;
        };
      };
      exports.setLabel = function(label) {
        return function(optgroup) {
          return function() {
            optgroup.label = label;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLOptGroupElement/index.js
  var require_Web_HTML38 = __commonJS({
    "output/Web.HTML.HTMLOptGroupElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign81();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptGroupElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptGroupElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptGroupElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptGroupElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptGroupElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptGroupElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptGroupElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        disabled: $foreign.disabled,
        setDisabled: $foreign.setDisabled,
        label: $foreign.label,
        setLabel: $foreign.setLabel
      };
    }
  });

  // output/Web.HTML.HTMLOptionElement/foreign.js
  var require_foreign82 = __commonJS({
    "output/Web.HTML.HTMLOptionElement/foreign.js"(exports) {
      "use strict";
      exports.disabled = function(option) {
        return function() {
          return option.disabled;
        };
      };
      exports.setDisabled = function(disabled) {
        return function(option) {
          return function() {
            option.disabled = disabled;
          };
        };
      };
      exports._form = function(option) {
        return function() {
          return option.form;
        };
      };
      exports.label = function(option) {
        return function() {
          return option.label;
        };
      };
      exports.setLabel = function(label) {
        return function(option) {
          return function() {
            option.label = label;
          };
        };
      };
      exports.defaultSelected = function(option) {
        return function() {
          return option.defaultSelected;
        };
      };
      exports.setDefaultSelected = function(defaultSelected) {
        return function(option) {
          return function() {
            option.defaultSelected = defaultSelected;
          };
        };
      };
      exports.selected = function(option) {
        return function() {
          return option.selected;
        };
      };
      exports.setSelected = function(selected) {
        return function(option) {
          return function() {
            option.selected = selected;
          };
        };
      };
      exports.value = function(option) {
        return function() {
          return option.value;
        };
      };
      exports.setValue = function(value) {
        return function(option) {
          return function() {
            option.value = value;
          };
        };
      };
      exports.text = function(option) {
        return function() {
          return option.text;
        };
      };
      exports.setText = function(text) {
        return function(option) {
          return function() {
            option.text = text;
          };
        };
      };
      exports.index = function(option) {
        return function() {
          return option.index;
        };
      };
    }
  });

  // output/Web.HTML.HTMLOptionElement/index.js
  var require_Web_HTML39 = __commonJS({
    "output/Web.HTML.HTMLOptionElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign82();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptionElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptionElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptionElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptionElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptionElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptionElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOptionElement");
      var form = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($1) {
          return $0($foreign["_form"]($1));
        };
      }();
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        form,
        disabled: $foreign.disabled,
        setDisabled: $foreign.setDisabled,
        label: $foreign.label,
        setLabel: $foreign.setLabel,
        defaultSelected: $foreign.defaultSelected,
        setDefaultSelected: $foreign.setDefaultSelected,
        selected: $foreign.selected,
        setSelected: $foreign.setSelected,
        value: $foreign.value,
        setValue: $foreign.setValue,
        text: $foreign.text,
        setText: $foreign.setText,
        index: $foreign.index
      };
    }
  });

  // output/Web.HTML.HTMLOutputElement/foreign.js
  var require_foreign83 = __commonJS({
    "output/Web.HTML.HTMLOutputElement/foreign.js"(exports) {
      "use strict";
      exports._form = function(output) {
        return function() {
          return output.form;
        };
      };
      exports.name = function(output) {
        return function() {
          return output.name;
        };
      };
      exports.setName = function(name) {
        return function(output) {
          return function() {
            output.name = name;
          };
        };
      };
      exports.type_ = function(output) {
        return function() {
          return output.type;
        };
      };
      exports.defaultValue = function(output) {
        return function() {
          return output.defaultValue;
        };
      };
      exports.setDefaultValue = function(defaultValue) {
        return function(output) {
          return function() {
            output.defaultValue = defaultValue;
          };
        };
      };
      exports.value = function(output) {
        return function() {
          return output.value;
        };
      };
      exports.setValue = function(value) {
        return function(output) {
          return function() {
            output.value = value;
          };
        };
      };
      exports.willValidate = function(output) {
        return function() {
          return output.willValidate;
        };
      };
      exports.validity = function(output) {
        return function() {
          return output.validity;
        };
      };
      exports.validationMessage = function(output) {
        return function() {
          return output.validationMessage;
        };
      };
      exports.checkValidity = function(output) {
        return function() {
          return output.checkValidity();
        };
      };
      exports.reportValidity = function(output) {
        return function() {
          return output.reportValidity();
        };
      };
      exports.setCustomValidity = function(value) {
        return function(output) {
          return function() {
            output.setCustomValidity(value);
          };
        };
      };
      exports.labels = function(output) {
        return function() {
          return output.labels;
        };
      };
    }
  });

  // output/Web.HTML.HTMLOutputElement/index.js
  var require_Web_HTML40 = __commonJS({
    "output/Web.HTML.HTMLOutputElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign83();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOutputElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOutputElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOutputElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOutputElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOutputElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOutputElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLOutputElement");
      var form = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($1) {
          return $0($foreign["_form"]($1));
        };
      }();
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        form,
        name: $foreign.name,
        setName: $foreign.setName,
        type_: $foreign.type_,
        defaultValue: $foreign.defaultValue,
        setDefaultValue: $foreign.setDefaultValue,
        value: $foreign.value,
        setValue: $foreign.setValue,
        willValidate: $foreign.willValidate,
        validity: $foreign.validity,
        validationMessage: $foreign.validationMessage,
        checkValidity: $foreign.checkValidity,
        reportValidity: $foreign.reportValidity,
        setCustomValidity: $foreign.setCustomValidity,
        labels: $foreign.labels
      };
    }
  });

  // output/Web.HTML.HTMLParagraphElement/index.js
  var require_Web_HTML41 = __commonJS({
    "output/Web.HTML.HTMLParagraphElement/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParagraphElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParagraphElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParagraphElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParagraphElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParagraphElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParagraphElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParagraphElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget
      };
    }
  });

  // output/Web.HTML.HTMLParamElement/foreign.js
  var require_foreign84 = __commonJS({
    "output/Web.HTML.HTMLParamElement/foreign.js"(exports) {
      "use strict";
      exports.name = function(param) {
        return function() {
          return param.name;
        };
      };
      exports.setName = function(name) {
        return function(param) {
          return function() {
            param.name = name;
          };
        };
      };
      exports.value = function(param) {
        return function() {
          return param.value;
        };
      };
      exports.setValue = function(value) {
        return function(param) {
          return function() {
            param.value = value;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLParamElement/index.js
  var require_Web_HTML42 = __commonJS({
    "output/Web.HTML.HTMLParamElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign84();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParamElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParamElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParamElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParamElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParamElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParamElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLParamElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        name: $foreign.name,
        setName: $foreign.setName,
        value: $foreign.value,
        setValue: $foreign.setValue
      };
    }
  });

  // output/Web.HTML.HTMLPreElement/index.js
  var require_Web_HTML43 = __commonJS({
    "output/Web.HTML.HTMLPreElement/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLPreElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLPreElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLPreElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLPreElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLPreElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLPreElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLPreElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget
      };
    }
  });

  // output/Web.HTML.HTMLProgressElement/foreign.js
  var require_foreign85 = __commonJS({
    "output/Web.HTML.HTMLProgressElement/foreign.js"(exports) {
      "use strict";
      exports.value = function(progress) {
        return function() {
          return progress.value;
        };
      };
      exports.setValue = function(value) {
        return function(progress) {
          return function() {
            progress.value = value;
          };
        };
      };
      exports.max = function(progress) {
        return function() {
          return progress.max;
        };
      };
      exports.setMax = function(max) {
        return function(progress) {
          return function() {
            progress.max = max;
          };
        };
      };
      exports.position = function(progress) {
        return function() {
          return progress.position;
        };
      };
      exports.labels = function(progress) {
        return function() {
          return progress.labels;
        };
      };
    }
  });

  // output/Web.HTML.HTMLProgressElement/index.js
  var require_Web_HTML44 = __commonJS({
    "output/Web.HTML.HTMLProgressElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign85();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLProgressElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLProgressElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLProgressElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLProgressElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLProgressElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLProgressElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLProgressElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        value: $foreign.value,
        setValue: $foreign.setValue,
        max: $foreign.max,
        setMax: $foreign.setMax,
        position: $foreign.position,
        labels: $foreign.labels
      };
    }
  });

  // output/Web.HTML.HTMLQuoteElement/foreign.js
  var require_foreign86 = __commonJS({
    "output/Web.HTML.HTMLQuoteElement/foreign.js"(exports) {
      "use strict";
      exports.cite = function(quote) {
        return function() {
          return quote.cite;
        };
      };
      exports.setCite = function(cite) {
        return function(quote) {
          return function() {
            quote.cite = cite;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLQuoteElement/index.js
  var require_Web_HTML45 = __commonJS({
    "output/Web.HTML.HTMLQuoteElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign86();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLQuoteElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLQuoteElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLQuoteElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLQuoteElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLQuoteElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLQuoteElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLQuoteElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        cite: $foreign.cite,
        setCite: $foreign.setCite
      };
    }
  });

  // output/Web.HTML.HTMLScriptElement/foreign.js
  var require_foreign87 = __commonJS({
    "output/Web.HTML.HTMLScriptElement/foreign.js"(exports) {
      "use strict";
      exports.src = function(script) {
        return function() {
          return script.src;
        };
      };
      exports.setSrc = function(src) {
        return function(script) {
          return function() {
            script.src = src;
          };
        };
      };
      exports.type_ = function(script) {
        return function() {
          return script.type;
        };
      };
      exports.setType = function(type) {
        return function(script) {
          return function() {
            script.type = type;
          };
        };
      };
      exports.charset = function(script) {
        return function() {
          return script.charset;
        };
      };
      exports.setCharset = function(charset) {
        return function(script) {
          return function() {
            script.charset = charset;
          };
        };
      };
      exports.async = function(script) {
        return function() {
          return script.async;
        };
      };
      exports.setAsync = function(async) {
        return function(script) {
          return function() {
            script.async = async;
          };
        };
      };
      exports.defer = function(script) {
        return function() {
          return script.defer;
        };
      };
      exports.setDefer = function(defer) {
        return function(script) {
          return function() {
            script.defer = defer;
          };
        };
      };
      exports.crossOrigin = function(script) {
        return function() {
          return script.crossOrigin;
        };
      };
      exports.setCrossOrigin = function(crossOrigin) {
        return function(script) {
          return function() {
            script.crossOrigin = crossOrigin;
          };
        };
      };
      exports.text = function(script) {
        return function() {
          return script.text;
        };
      };
      exports.setText = function(text) {
        return function(script) {
          return function() {
            script.text = text;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLScriptElement/index.js
  var require_Web_HTML46 = __commonJS({
    "output/Web.HTML.HTMLScriptElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign87();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLScriptElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLScriptElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLScriptElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLScriptElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLScriptElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLScriptElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLScriptElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        src: $foreign.src,
        setSrc: $foreign.setSrc,
        type_: $foreign.type_,
        setType: $foreign.setType,
        charset: $foreign.charset,
        setCharset: $foreign.setCharset,
        async: $foreign.async,
        setAsync: $foreign.setAsync,
        defer: $foreign.defer,
        setDefer: $foreign.setDefer,
        crossOrigin: $foreign.crossOrigin,
        setCrossOrigin: $foreign.setCrossOrigin,
        text: $foreign.text,
        setText: $foreign.setText
      };
    }
  });

  // output/Web.HTML.HTMLSelectElement/foreign.js
  var require_foreign88 = __commonJS({
    "output/Web.HTML.HTMLSelectElement/foreign.js"(exports) {
      "use strict";
      exports.autofocus = function(select) {
        return function() {
          return select.autofocus;
        };
      };
      exports.setAutofocus = function(autofocus) {
        return function(select) {
          return function() {
            select.autofocus = autofocus;
          };
        };
      };
      exports.disabled = function(select) {
        return function() {
          return select.disabled;
        };
      };
      exports.setDisabled = function(disabled) {
        return function(select) {
          return function() {
            select.disabled = disabled;
          };
        };
      };
      exports.multiple = function(select) {
        return function() {
          return select.multiple;
        };
      };
      exports.setMultiple = function(multiple) {
        return function(select) {
          return function() {
            select.multiple = multiple;
          };
        };
      };
      exports._form = function(select) {
        return function() {
          return select.form;
        };
      };
      exports.name = function(select) {
        return function() {
          return select.name;
        };
      };
      exports.setName = function(name) {
        return function(select) {
          return function() {
            select.name = name;
          };
        };
      };
      exports.required = function(select) {
        return function() {
          return select.required;
        };
      };
      exports.setRequired = function(required) {
        return function(select) {
          return function() {
            select.required = required;
          };
        };
      };
      exports.size = function(select) {
        return function() {
          return select.size;
        };
      };
      exports.setSize = function(size) {
        return function(select) {
          return function() {
            select.size = size;
          };
        };
      };
      exports.type_ = function(select) {
        return function() {
          return select.type;
        };
      };
      exports.length = function(select) {
        return function() {
          return select.length;
        };
      };
      exports.setLength = function(length) {
        return function(select) {
          return function() {
            select.length = length;
          };
        };
      };
      exports.selectedOptions = function(select) {
        return function() {
          return select.selectedOptions;
        };
      };
      exports.selectedIndex = function(select) {
        return function() {
          return select.selectedIndex;
        };
      };
      exports.setSelectedIndex = function(selectedIndex) {
        return function(select) {
          return function() {
            select.selectedIndex = selectedIndex;
          };
        };
      };
      exports.value = function(select) {
        return function() {
          return select.value;
        };
      };
      exports.setValue = function(value) {
        return function(select) {
          return function() {
            select.value = value;
          };
        };
      };
      exports.willValidate = function(select) {
        return function() {
          return select.willValidate;
        };
      };
      exports.validity = function(select) {
        return function() {
          return select.validity;
        };
      };
      exports.validationMessage = function(select) {
        return function() {
          return select.validationMessage;
        };
      };
      exports.checkValidity = function(select) {
        return function() {
          return select.checkValidity();
        };
      };
      exports.reportValidity = function(select) {
        return function() {
          return select.reportValidity();
        };
      };
      exports.setCustomValidity = function(value) {
        return function(select) {
          return function() {
            select.setCustomValidity(value);
          };
        };
      };
      exports.labels = function(select) {
        return function() {
          return select.labels;
        };
      };
    }
  });

  // output/Web.HTML.HTMLSelectElement/index.js
  var require_Web_HTML47 = __commonJS({
    "output/Web.HTML.HTMLSelectElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign88();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
      var form = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($1) {
          return $0($foreign["_form"]($1));
        };
      }();
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        form,
        autofocus: $foreign.autofocus,
        setAutofocus: $foreign.setAutofocus,
        disabled: $foreign.disabled,
        setDisabled: $foreign.setDisabled,
        multiple: $foreign.multiple,
        setMultiple: $foreign.setMultiple,
        name: $foreign.name,
        setName: $foreign.setName,
        required: $foreign.required,
        setRequired: $foreign.setRequired,
        size: $foreign.size,
        setSize: $foreign.setSize,
        type_: $foreign.type_,
        length: $foreign.length,
        setLength: $foreign.setLength,
        selectedOptions: $foreign.selectedOptions,
        selectedIndex: $foreign.selectedIndex,
        setSelectedIndex: $foreign.setSelectedIndex,
        value: $foreign.value,
        setValue: $foreign.setValue,
        willValidate: $foreign.willValidate,
        validity: $foreign.validity,
        validationMessage: $foreign.validationMessage,
        checkValidity: $foreign.checkValidity,
        reportValidity: $foreign.reportValidity,
        setCustomValidity: $foreign.setCustomValidity,
        labels: $foreign.labels
      };
    }
  });

  // output/Web.HTML.HTMLSourceElement/foreign.js
  var require_foreign89 = __commonJS({
    "output/Web.HTML.HTMLSourceElement/foreign.js"(exports) {
      "use strict";
      exports.src = function(source) {
        return function() {
          return source.src;
        };
      };
      exports.setSrc = function(src) {
        return function(source) {
          return function() {
            source.src = src;
          };
        };
      };
      exports.type_ = function(source) {
        return function() {
          return source.type;
        };
      };
      exports.setType = function(type) {
        return function(source) {
          return function() {
            source.type = type;
          };
        };
      };
      exports.media = function(source) {
        return function() {
          return source.media;
        };
      };
      exports.setMedia = function(media) {
        return function(source) {
          return function() {
            source.media = media;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLSourceElement/index.js
  var require_Web_HTML48 = __commonJS({
    "output/Web.HTML.HTMLSourceElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign89();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSourceElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSourceElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSourceElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSourceElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSourceElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSourceElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSourceElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        src: $foreign.src,
        setSrc: $foreign.setSrc,
        type_: $foreign.type_,
        setType: $foreign.setType,
        media: $foreign.media,
        setMedia: $foreign.setMedia
      };
    }
  });

  // output/Web.HTML.HTMLSpanElement/index.js
  var require_Web_HTML49 = __commonJS({
    "output/Web.HTML.HTMLSpanElement/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSpanElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSpanElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSpanElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSpanElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSpanElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSpanElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSpanElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget
      };
    }
  });

  // output/Web.HTML.HTMLStyleElement/foreign.js
  var require_foreign90 = __commonJS({
    "output/Web.HTML.HTMLStyleElement/foreign.js"(exports) {
      "use strict";
      exports.media = function(style) {
        return function() {
          return style.media;
        };
      };
      exports.setMedia = function(media) {
        return function(style) {
          return function() {
            style.media = media;
          };
        };
      };
      exports.type_ = function(style) {
        return function() {
          return style.type;
        };
      };
      exports.setType = function(type) {
        return function(style) {
          return function() {
            style.type = type;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLStyleElement/index.js
  var require_Web_HTML50 = __commonJS({
    "output/Web.HTML.HTMLStyleElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign90();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLStyleElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLStyleElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLStyleElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLStyleElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLStyleElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLStyleElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLStyleElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        media: $foreign.media,
        setMedia: $foreign.setMedia,
        type_: $foreign.type_,
        setType: $foreign.setType
      };
    }
  });

  // output/Web.HTML.HTMLTableCaptionElement/index.js
  var require_Web_HTML51 = __commonJS({
    "output/Web.HTML.HTMLTableCaptionElement/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCaptionElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCaptionElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCaptionElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCaptionElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCaptionElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCaptionElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCaptionElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget
      };
    }
  });

  // output/Web.HTML.HTMLTableCellElement/foreign.js
  var require_foreign91 = __commonJS({
    "output/Web.HTML.HTMLTableCellElement/foreign.js"(exports) {
      "use strict";
      exports.colSpan = function(cell) {
        return function() {
          return cell.colSpan;
        };
      };
      exports.setColSpan = function(colSpan) {
        return function(cell) {
          return function() {
            cell.colSpan = colSpan;
          };
        };
      };
      exports.rowSpan = function(cell) {
        return function() {
          return cell.rowSpan;
        };
      };
      exports.setRowSpan = function(rowSpan) {
        return function(cell) {
          return function() {
            cell.rowSpan = rowSpan;
          };
        };
      };
      exports.cellIndex = function(cell) {
        return function() {
          return cell.cellIndex;
        };
      };
    }
  });

  // output/Web.HTML.HTMLTableCellElement/index.js
  var require_Web_HTML52 = __commonJS({
    "output/Web.HTML.HTMLTableCellElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign91();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCellElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCellElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCellElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCellElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCellElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCellElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableCellElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        colSpan: $foreign.colSpan,
        setColSpan: $foreign.setColSpan,
        rowSpan: $foreign.rowSpan,
        setRowSpan: $foreign.setRowSpan,
        cellIndex: $foreign.cellIndex
      };
    }
  });

  // output/Web.HTML.HTMLTableColElement/foreign.js
  var require_foreign92 = __commonJS({
    "output/Web.HTML.HTMLTableColElement/foreign.js"(exports) {
      "use strict";
      exports.span = function(col) {
        return function() {
          return col.span;
        };
      };
      exports.setSpan = function(span) {
        return function(col) {
          return function() {
            col.span = span;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLTableColElement/index.js
  var require_Web_HTML53 = __commonJS({
    "output/Web.HTML.HTMLTableColElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign92();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableColElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableColElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableColElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableColElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableColElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableColElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableColElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        span: $foreign.span,
        setSpan: $foreign.setSpan
      };
    }
  });

  // output/Web.HTML.HTMLTableDataCellElement/index.js
  var require_Web_HTML54 = __commonJS({
    "output/Web.HTML.HTMLTableDataCellElement/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLTableCellElement = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
      var fromHTMLTableCellElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableDataCellElement");
      module.exports = {
        fromHTMLTableCellElement,
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLTableCellElement,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget
      };
    }
  });

  // output/Web.HTML.HTMLTableElement/foreign.js
  var require_foreign93 = __commonJS({
    "output/Web.HTML.HTMLTableElement/foreign.js"(exports) {
      "use strict";
      exports._caption = function(table) {
        return function() {
          return table.caption;
        };
      };
      exports._setCaption = function(caption) {
        return function(table) {
          return function() {
            table.caption = caption;
          };
        };
      };
      exports.createCaption = function(table) {
        return function() {
          return table.createCaption();
        };
      };
      exports.deleteCaption = function(table) {
        return function() {
          table.deleteCaption();
        };
      };
      exports._tHead = function(table) {
        return function() {
          return table.tHead;
        };
      };
      exports._setTHead = function(tHead) {
        return function(table) {
          return function() {
            table.tHead = tHead;
          };
        };
      };
      exports.createTHead = function(table) {
        return function() {
          return table.createTHead();
        };
      };
      exports.deleteTHead = function(table) {
        return function() {
          table.deleteTHead();
        };
      };
      exports._tFoot = function(table) {
        return function() {
          return table.tFoot;
        };
      };
      exports._setTFoot = function(tFoot) {
        return function(table) {
          return function() {
            table.tFoot = tFoot;
          };
        };
      };
      exports.createTFoot = function(table) {
        return function() {
          return table.createTFoot();
        };
      };
      exports.deleteTFoot = function(table) {
        return function() {
          table.deleteTFoot();
        };
      };
      exports.tBodies = function(table) {
        return function() {
          return table.tBodies;
        };
      };
      exports.createTBody = function(table) {
        return function() {
          return table.createTBody();
        };
      };
      exports.rows = function(table) {
        return function() {
          return table.rows;
        };
      };
      exports.insertRowAt = function(index) {
        return function(table) {
          return function() {
            return table.insertRow(index);
          };
        };
      };
      exports.deleteRow = function(index) {
        return function(table) {
          return function() {
            table.deleteRow(index);
          };
        };
      };
      exports.border = function(table) {
        return function() {
          return table.border;
        };
      };
      exports.setBorder = function(border) {
        return function(table) {
          return function() {
            table.border = border;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLTableElement/index.js
  var require_Web_HTML55 = __commonJS({
    "output/Web.HTML.HTMLTableElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign93();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var tHead = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($1) {
          return $0($foreign["_tHead"]($1));
        };
      }();
      var tFoot = function() {
        var $2 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($3) {
          return $2($foreign["_tFoot"]($3));
        };
      }();
      var setTHead = function($4) {
        return $foreign["_setTHead"](Data_Nullable.toNullable($4));
      };
      var setTFoot = function($5) {
        return $foreign["_setTFoot"](Data_Nullable.toNullable($5));
      };
      var setCaption = function($6) {
        return $foreign["_setCaption"](Data_Nullable.toNullable($6));
      };
      var insertRow$prime = $foreign.insertRowAt;
      var insertRow = insertRow$prime(-1 | 0);
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableElement");
      var caption = function() {
        var $7 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($8) {
          return $7($foreign["_caption"]($8));
        };
      }();
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        caption,
        setCaption,
        tHead,
        setTHead,
        tFoot,
        setTFoot,
        insertRow,
        "insertRow'": insertRow$prime,
        createCaption: $foreign.createCaption,
        deleteCaption: $foreign.deleteCaption,
        createTHead: $foreign.createTHead,
        deleteTHead: $foreign.deleteTHead,
        createTFoot: $foreign.createTFoot,
        deleteTFoot: $foreign.deleteTFoot,
        tBodies: $foreign.tBodies,
        createTBody: $foreign.createTBody,
        rows: $foreign.rows,
        deleteRow: $foreign.deleteRow,
        border: $foreign.border,
        setBorder: $foreign.setBorder
      };
    }
  });

  // output/Web.HTML.HTMLTableHeaderCellElement/foreign.js
  var require_foreign94 = __commonJS({
    "output/Web.HTML.HTMLTableHeaderCellElement/foreign.js"(exports) {
      "use strict";
      exports.scope = function(cell) {
        return function() {
          return cell.scope;
        };
      };
      exports.setScope = function(scope) {
        return function(cell) {
          return function() {
            cell.scope = scope;
          };
        };
      };
      exports.abbr = function(cell) {
        return function() {
          return cell.abbr;
        };
      };
      exports.setAbbr = function(abbr) {
        return function(cell) {
          return function() {
            cell.abbr = abbr;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLTableHeaderCellElement/index.js
  var require_Web_HTML56 = __commonJS({
    "output/Web.HTML.HTMLTableHeaderCellElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign94();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLTableCellElement = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
      var fromHTMLTableCellElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableHeaderCellElement");
      module.exports = {
        fromHTMLTableCellElement,
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLTableCellElement,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        scope: $foreign.scope,
        setScope: $foreign.setScope,
        abbr: $foreign.abbr,
        setAbbr: $foreign.setAbbr
      };
    }
  });

  // output/Web.HTML.HTMLTableRowElement/foreign.js
  var require_foreign95 = __commonJS({
    "output/Web.HTML.HTMLTableRowElement/foreign.js"(exports) {
      "use strict";
      exports.rowIndex = function(row) {
        return function() {
          return row.rowIndex;
        };
      };
      exports.sectionRowIndex = function(row) {
        return function() {
          return row.sectionRowIndex;
        };
      };
      exports.cells = function(row) {
        return function() {
          return row.cells;
        };
      };
      exports.insertCellAt = function(index) {
        return function(row) {
          return function() {
            return row.insertCell(index);
          };
        };
      };
      exports.deleteCell = function(index) {
        return function(row) {
          return function() {
            row.deleteCell(index);
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLTableRowElement/index.js
  var require_Web_HTML57 = __commonJS({
    "output/Web.HTML.HTMLTableRowElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign95();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var insertCell$prime = $foreign.insertCellAt;
      var insertCell = insertCell$prime(-1 | 0);
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableRowElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableRowElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableRowElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableRowElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableRowElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableRowElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableRowElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        insertCell,
        "insertCell'": insertCell$prime,
        rowIndex: $foreign.rowIndex,
        sectionRowIndex: $foreign.sectionRowIndex,
        cells: $foreign.cells,
        deleteCell: $foreign.deleteCell
      };
    }
  });

  // output/Web.HTML.HTMLTableSectionElement/foreign.js
  var require_foreign96 = __commonJS({
    "output/Web.HTML.HTMLTableSectionElement/foreign.js"(exports) {
      "use strict";
      exports.rows = function(section) {
        return function() {
          return section.rows;
        };
      };
      exports.insertRowAt = function(index) {
        return function(section) {
          return function() {
            return section.insertRow(index);
          };
        };
      };
      exports.deleteRow = function(index) {
        return function(section) {
          return function() {
            section.deleteRow(index);
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLTableSectionElement/index.js
  var require_Web_HTML58 = __commonJS({
    "output/Web.HTML.HTMLTableSectionElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign96();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var insertRow$prime = $foreign.insertRowAt;
      var insertRow = insertRow$prime(-1 | 0);
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableSectionElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableSectionElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableSectionElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableSectionElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableSectionElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableSectionElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTableSectionElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        insertRow,
        "insertRow'": insertRow$prime,
        rows: $foreign.rows,
        deleteRow: $foreign.deleteRow
      };
    }
  });

  // output/Web.HTML.HTMLTemplateElement/foreign.js
  var require_foreign97 = __commonJS({
    "output/Web.HTML.HTMLTemplateElement/foreign.js"(exports) {
      "use strict";
      exports.content = function(template) {
        return function() {
          return template.content;
        };
      };
    }
  });

  // output/Web.HTML.HTMLTemplateElement/index.js
  var require_Web_HTML59 = __commonJS({
    "output/Web.HTML.HTMLTemplateElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign97();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTemplateElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTemplateElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTemplateElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTemplateElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTemplateElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTemplateElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTemplateElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        content: $foreign.content
      };
    }
  });

  // output/Web.HTML.HTMLTextAreaElement/foreign.js
  var require_foreign98 = __commonJS({
    "output/Web.HTML.HTMLTextAreaElement/foreign.js"(exports) {
      "use strict";
      exports.autocomplete = function(textarea) {
        return function() {
          return textarea.autocomplete;
        };
      };
      exports.setAutocomplete = function(autocomplete) {
        return function(textarea) {
          return function() {
            textarea.autocomplete = autocomplete;
          };
        };
      };
      exports.autofocus = function(textarea) {
        return function() {
          return textarea.autofocus;
        };
      };
      exports.setAutofocus = function(autofocus) {
        return function(textarea) {
          return function() {
            textarea.autofocus = autofocus;
          };
        };
      };
      exports.cols = function(textarea) {
        return function() {
          return textarea.cols;
        };
      };
      exports.setCols = function(cols) {
        return function(textarea) {
          return function() {
            textarea.cols = cols;
          };
        };
      };
      exports.dirName = function(textarea) {
        return function() {
          return textarea.dirName;
        };
      };
      exports.setDirName = function(dirName) {
        return function(textarea) {
          return function() {
            textarea.dirName = dirName;
          };
        };
      };
      exports.disabled = function(textarea) {
        return function() {
          return textarea.disabled;
        };
      };
      exports.setDisabled = function(disabled) {
        return function(textarea) {
          return function() {
            textarea.disabled = disabled;
          };
        };
      };
      exports._form = function(textarea) {
        return function() {
          return textarea.form;
        };
      };
      exports.maxLength = function(textarea) {
        return function() {
          return textarea.maxLength;
        };
      };
      exports.setMaxLength = function(maxLength) {
        return function(textarea) {
          return function() {
            textarea.maxLength = maxLength;
          };
        };
      };
      exports.minLength = function(textarea) {
        return function() {
          return textarea.minLength;
        };
      };
      exports.setMinLength = function(minLength) {
        return function(textarea) {
          return function() {
            textarea.minLength = minLength;
          };
        };
      };
      exports.name = function(textarea) {
        return function() {
          return textarea.name;
        };
      };
      exports.setName = function(name) {
        return function(textarea) {
          return function() {
            textarea.name = name;
          };
        };
      };
      exports.placeholder = function(textarea) {
        return function() {
          return textarea.placeholder;
        };
      };
      exports.setPlaceholder = function(placeholder) {
        return function(textarea) {
          return function() {
            textarea.placeholder = placeholder;
          };
        };
      };
      exports.readOnly = function(textarea) {
        return function() {
          return textarea.readOnly;
        };
      };
      exports.setReadOnly = function(readOnly) {
        return function(textarea) {
          return function() {
            textarea.readOnly = readOnly;
          };
        };
      };
      exports.required = function(textarea) {
        return function() {
          return textarea.required;
        };
      };
      exports.setRequired = function(required) {
        return function(textarea) {
          return function() {
            textarea.required = required;
          };
        };
      };
      exports.rows = function(textarea) {
        return function() {
          return textarea.rows;
        };
      };
      exports.setRows = function(rows) {
        return function(textarea) {
          return function() {
            textarea.rows = rows;
          };
        };
      };
      exports.wrap = function(textarea) {
        return function() {
          return textarea.wrap;
        };
      };
      exports.setWrap = function(wrap) {
        return function(textarea) {
          return function() {
            textarea.wrap = wrap;
          };
        };
      };
      exports.type_ = function(textarea) {
        return function() {
          return textarea.type;
        };
      };
      exports.defaultValue = function(textarea) {
        return function() {
          return textarea.defaultValue;
        };
      };
      exports.setDefaultValue = function(defaultValue) {
        return function(textarea) {
          return function() {
            textarea.defaultValue = defaultValue;
          };
        };
      };
      exports.value = function(textarea) {
        return function() {
          return textarea.value;
        };
      };
      exports.setValue = function(value) {
        return function(textarea) {
          return function() {
            textarea.value = value;
          };
        };
      };
      exports.textLength = function(textarea) {
        return function() {
          return textarea.textLength;
        };
      };
      exports.willValidate = function(textarea) {
        return function() {
          return textarea.willValidate;
        };
      };
      exports.validity = function(textarea) {
        return function() {
          return textarea.validity;
        };
      };
      exports.validationMessage = function(textarea) {
        return function() {
          return textarea.validationMessage;
        };
      };
      exports.checkValidity = function(textarea) {
        return function() {
          return textarea.checkValidity();
        };
      };
      exports.reportValidity = function(textarea) {
        return function() {
          return textarea.reportValidity();
        };
      };
      exports.setCustomValidity = function(value) {
        return function(textarea) {
          return function() {
            textarea.setCustomValidity(value);
          };
        };
      };
      exports.labels = function(textarea) {
        return function() {
          return textarea.labels;
        };
      };
      exports.select = function(textarea) {
        return function() {
          textarea.select();
        };
      };
      exports.selectionStart = function(textarea) {
        return function() {
          return textarea.selectionStart;
        };
      };
      exports.setSelectionStart = function(selectionStart) {
        return function(textarea) {
          return function() {
            textarea.selectionStart = selectionStart;
          };
        };
      };
      exports.selectionEnd = function(textarea) {
        return function() {
          return textarea.selectionEnd;
        };
      };
      exports.setSelectionEnd = function(selectionEnd) {
        return function(textarea) {
          return function() {
            textarea.selectionEnd = selectionEnd;
          };
        };
      };
      exports.selectionDirection = function(textarea) {
        return function() {
          return textarea.selectionDirection;
        };
      };
      exports.setSelectionDirection = function(selectionDirection) {
        return function(textarea) {
          return function() {
            textarea.selectionDirection = selectionDirection;
          };
        };
      };
      exports.setRangeText = function(replacement) {
        return function(textarea) {
          return function() {
            textarea.setRangeText(replacement);
          };
        };
      };
      exports._setRangeText = function(replacement, start, end, selectionMode, textarea) {
        textarea.setRangeText(replacement, start, end, selectionMode);
      };
      exports.setSelectionRange = function(start) {
        return function(end) {
          return function(direction) {
            return function(textarea) {
              return function() {
                textarea.setSelectionRange(start, end, direction);
              };
            };
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLTextAreaElement/index.js
  var require_Web_HTML60 = __commonJS({
    "output/Web.HTML.HTMLTextAreaElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign98();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_HTML_SelectionMode = require_Web_HTML24();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var setRangeText$prime = function(rpl) {
        return function(s) {
          return function(e) {
            return function(mode) {
              return function(area) {
                return function() {
                  return $foreign["_setRangeText"](rpl, s, e, Web_HTML_SelectionMode.print(mode), area);
                };
              };
            };
          };
        };
      };
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTextAreaElement");
      var form = function() {
        var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
        return function($1) {
          return $0($foreign["_form"]($1));
        };
      }();
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        form,
        "setRangeText'": setRangeText$prime,
        autocomplete: $foreign.autocomplete,
        setAutocomplete: $foreign.setAutocomplete,
        autofocus: $foreign.autofocus,
        setAutofocus: $foreign.setAutofocus,
        cols: $foreign.cols,
        setCols: $foreign.setCols,
        dirName: $foreign.dirName,
        setDirName: $foreign.setDirName,
        disabled: $foreign.disabled,
        setDisabled: $foreign.setDisabled,
        maxLength: $foreign.maxLength,
        setMaxLength: $foreign.setMaxLength,
        minLength: $foreign.minLength,
        setMinLength: $foreign.setMinLength,
        name: $foreign.name,
        setName: $foreign.setName,
        placeholder: $foreign.placeholder,
        setPlaceholder: $foreign.setPlaceholder,
        readOnly: $foreign.readOnly,
        setReadOnly: $foreign.setReadOnly,
        required: $foreign.required,
        setRequired: $foreign.setRequired,
        rows: $foreign.rows,
        setRows: $foreign.setRows,
        wrap: $foreign.wrap,
        setWrap: $foreign.setWrap,
        type_: $foreign.type_,
        defaultValue: $foreign.defaultValue,
        setDefaultValue: $foreign.setDefaultValue,
        value: $foreign.value,
        setValue: $foreign.setValue,
        textLength: $foreign.textLength,
        willValidate: $foreign.willValidate,
        validity: $foreign.validity,
        validationMessage: $foreign.validationMessage,
        checkValidity: $foreign.checkValidity,
        reportValidity: $foreign.reportValidity,
        setCustomValidity: $foreign.setCustomValidity,
        labels: $foreign.labels,
        select: $foreign.select,
        selectionStart: $foreign.selectionStart,
        setSelectionStart: $foreign.setSelectionStart,
        selectionEnd: $foreign.selectionEnd,
        setSelectionEnd: $foreign.setSelectionEnd,
        selectionDirection: $foreign.selectionDirection,
        setSelectionDirection: $foreign.setSelectionDirection,
        setRangeText: $foreign.setRangeText,
        setSelectionRange: $foreign.setSelectionRange
      };
    }
  });

  // output/Web.HTML.HTMLTimeElement/foreign.js
  var require_foreign99 = __commonJS({
    "output/Web.HTML.HTMLTimeElement/foreign.js"(exports) {
      "use strict";
      exports.dateTime = function(time) {
        return function() {
          return time.dateTime;
        };
      };
      exports.setDateTime = function(dateTime) {
        return function(time) {
          return function() {
            time.dateTime = dateTime;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLTimeElement/index.js
  var require_Web_HTML61 = __commonJS({
    "output/Web.HTML.HTMLTimeElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign99();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTimeElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTimeElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTimeElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTimeElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTimeElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTimeElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTimeElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        dateTime: $foreign.dateTime,
        setDateTime: $foreign.setDateTime
      };
    }
  });

  // output/Web.HTML.HTMLTitleElement/foreign.js
  var require_foreign100 = __commonJS({
    "output/Web.HTML.HTMLTitleElement/foreign.js"(exports) {
      "use strict";
      exports.text = function(title) {
        return function() {
          return title.text;
        };
      };
      exports.setText = function(text) {
        return function(title) {
          return function() {
            title.text = text;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLTitleElement/index.js
  var require_Web_HTML62 = __commonJS({
    "output/Web.HTML.HTMLTitleElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign100();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTitleElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTitleElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTitleElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTitleElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTitleElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTitleElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTitleElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        text: $foreign.text,
        setText: $foreign.setText
      };
    }
  });

  // output/Web.HTML.HTMLTrackElement/foreign.js
  var require_foreign101 = __commonJS({
    "output/Web.HTML.HTMLTrackElement/foreign.js"(exports) {
      "use strict";
      exports.kind = function(track) {
        return function() {
          return track.kind;
        };
      };
      exports.setKind = function(kind) {
        return function(track) {
          return function() {
            track.kind = kind;
          };
        };
      };
      exports.src = function(track) {
        return function() {
          return track.src;
        };
      };
      exports.setSrc = function(src) {
        return function(track) {
          return function() {
            track.src = src;
          };
        };
      };
      exports.srclang = function(track) {
        return function() {
          return track.srclang;
        };
      };
      exports.setSrclang = function(srclang) {
        return function(track) {
          return function() {
            track.srclang = srclang;
          };
        };
      };
      exports.label = function(track) {
        return function() {
          return track.label;
        };
      };
      exports.setLabel = function(label) {
        return function(track) {
          return function() {
            track.label = label;
          };
        };
      };
      exports["default"] = function(track) {
        return function() {
          return track["default"];
        };
      };
      exports.setDefault = function(def) {
        return function(track) {
          return function() {
            track["default"] = def;
          };
        };
      };
      exports._readyState = function(track) {
        return track.readyState;
      };
    }
  });

  // output/Web.HTML.HTMLTrackElement.ReadyState/index.js
  var require_Web_HTML_HTMLTrackElement = __commonJS({
    "output/Web.HTML.HTMLTrackElement.ReadyState/index.js"(exports, module) {
      "use strict";
      var Data_Enum = require_Data37();
      var Data_Maybe = require_Data15();
      var Data_Ordering = require_Data9();
      var None = function() {
        function None2() {
        }
        ;
        None2.value = new None2();
        return None2;
      }();
      var Loading = function() {
        function Loading2() {
        }
        ;
        Loading2.value = new Loading2();
        return Loading2;
      }();
      var Loaded = function() {
        function Loaded2() {
        }
        ;
        Loaded2.value = new Loaded2();
        return Loaded2;
      }();
      var $$Error = function() {
        function $$Error2() {
        }
        ;
        $$Error2.value = new $$Error2();
        return $$Error2;
      }();
      var toEnumReadyState = function(v) {
        if (v === 0) {
          return new Data_Maybe.Just(None.value);
        }
        ;
        if (v === 1) {
          return new Data_Maybe.Just(Loading.value);
        }
        ;
        if (v === 2) {
          return new Data_Maybe.Just(Loaded.value);
        }
        ;
        if (v === 3) {
          return new Data_Maybe.Just($$Error.value);
        }
        ;
        return Data_Maybe.Nothing.value;
      };
      var showReadyState = {
        show: function(v) {
          if (v instanceof None) {
            return "None";
          }
          ;
          if (v instanceof Loading) {
            return "Loading";
          }
          ;
          if (v instanceof Loaded) {
            return "Loaded";
          }
          ;
          if (v instanceof $$Error) {
            return "Error";
          }
          ;
          throw new Error("Failed pattern match at Web.HTML.HTMLTrackElement.ReadyState (line 29, column 1 - line 33, column 23): " + [v.constructor.name]);
        }
      };
      var fromEnumReadyState = function(v) {
        if (v instanceof None) {
          return 0;
        }
        ;
        if (v instanceof Loading) {
          return 1;
        }
        ;
        if (v instanceof Loaded) {
          return 2;
        }
        ;
        if (v instanceof $$Error) {
          return 3;
        }
        ;
        throw new Error("Failed pattern match at Web.HTML.HTMLTrackElement.ReadyState (line 46, column 3 - line 50, column 15): " + [v.constructor.name]);
      };
      var eqReadyState = {
        eq: function(x) {
          return function(y) {
            if (x instanceof None && y instanceof None) {
              return true;
            }
            ;
            if (x instanceof Loading && y instanceof Loading) {
              return true;
            }
            ;
            if (x instanceof Loaded && y instanceof Loaded) {
              return true;
            }
            ;
            if (x instanceof $$Error && y instanceof $$Error) {
              return true;
            }
            ;
            return false;
          };
        }
      };
      var ordReadyState = {
        compare: function(x) {
          return function(y) {
            if (x instanceof None && y instanceof None) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof None) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof None) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Loading && y instanceof Loading) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Loading) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Loading) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof Loaded && y instanceof Loaded) {
              return Data_Ordering.EQ.value;
            }
            ;
            if (x instanceof Loaded) {
              return Data_Ordering.LT.value;
            }
            ;
            if (y instanceof Loaded) {
              return Data_Ordering.GT.value;
            }
            ;
            if (x instanceof $$Error && y instanceof $$Error) {
              return Data_Ordering.EQ.value;
            }
            ;
            throw new Error("Failed pattern match at Web.HTML.HTMLTrackElement.ReadyState (line 14, column 1 - line 14, column 48): " + [x.constructor.name, y.constructor.name]);
          };
        },
        Eq0: function() {
          return eqReadyState;
        }
      };
      var enumReadyState = {
        succ: Data_Enum.defaultSucc(toEnumReadyState)(fromEnumReadyState),
        pred: Data_Enum.defaultPred(toEnumReadyState)(fromEnumReadyState),
        Ord0: function() {
          return ordReadyState;
        }
      };
      var boundedReadyState = {
        bottom: None.value,
        top: $$Error.value,
        Ord0: function() {
          return ordReadyState;
        }
      };
      var boundedEnumReadyState = {
        cardinality: 4,
        toEnum: toEnumReadyState,
        fromEnum: fromEnumReadyState,
        Bounded0: function() {
          return boundedReadyState;
        },
        Enum1: function() {
          return enumReadyState;
        }
      };
      module.exports = {
        None,
        Loading,
        Loaded,
        "Error": $$Error,
        toEnumReadyState,
        fromEnumReadyState,
        eqReadyState,
        ordReadyState,
        boundedReadyState,
        enumReadyState,
        boundedEnumReadyState,
        showReadyState
      };
    }
  });

  // output/Web.HTML.HTMLTrackElement/index.js
  var require_Web_HTML63 = __commonJS({
    "output/Web.HTML.HTMLTrackElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign101();
      var Data_Enum = require_Data37();
      var Data_Functor = require_Data4();
      var Data_Maybe = require_Data15();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_HTML_HTMLTrackElement_ReadyState = require_Web_HTML_HTMLTrackElement();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var readyState = function(el) {
        return Data_Functor.map(Effect.functorEffect)(function() {
          var $0 = Data_Maybe.fromMaybe(Web_HTML_HTMLTrackElement_ReadyState.None.value);
          var $1 = Data_Enum.toEnum(Web_HTML_HTMLTrackElement_ReadyState.boundedEnumReadyState);
          return function($2) {
            return $0($1($2));
          };
        }())(function() {
          return $foreign["_readyState"](el);
        });
      };
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTrackElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTrackElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTrackElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTrackElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTrackElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTrackElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLTrackElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        readyState,
        kind: $foreign.kind,
        setKind: $foreign.setKind,
        src: $foreign.src,
        setSrc: $foreign.setSrc,
        srclang: $foreign.srclang,
        setSrclang: $foreign.setSrclang,
        label: $foreign.label,
        setLabel: $foreign.setLabel,
        "default": $foreign["default"],
        setDefault: $foreign.setDefault
      };
    }
  });

  // output/Web.HTML.HTMLUListElement/index.js
  var require_Web_HTML64 = __commonJS({
    "output/Web.HTML.HTMLUListElement/index.js"(exports, module) {
      "use strict";
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLUListElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLUListElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLUListElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLUListElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLUListElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLUListElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLUListElement");
      module.exports = {
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget
      };
    }
  });

  // output/Web.HTML.HTMLVideoElement/foreign.js
  var require_foreign102 = __commonJS({
    "output/Web.HTML.HTMLVideoElement/foreign.js"(exports) {
      "use strict";
      exports.width = function(video) {
        return function() {
          return video.width;
        };
      };
      exports.setWidth = function(width) {
        return function(video) {
          return function() {
            video.width = width;
          };
        };
      };
      exports.height = function(video) {
        return function() {
          return video.height;
        };
      };
      exports.setHeight = function(height) {
        return function(video) {
          return function() {
            video.height = height;
          };
        };
      };
      exports.videoWidth = function(video) {
        return function() {
          return video.videoWidth;
        };
      };
      exports.videoHeight = function(video) {
        return function() {
          return video.videoHeight;
        };
      };
      exports.poster = function(video) {
        return function() {
          return video.poster;
        };
      };
      exports.setPoster = function(poster) {
        return function(video) {
          return function() {
            video.poster = poster;
          };
        };
      };
    }
  });

  // output/Web.HTML.HTMLVideoElement/index.js
  var require_Web_HTML65 = __commonJS({
    "output/Web.HTML.HTMLVideoElement/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign102();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toParentNode = Unsafe_Coerce.unsafeCoerce;
      var toNonDocumentTypeChildNode = Unsafe_Coerce.unsafeCoerce;
      var toNode = Unsafe_Coerce.unsafeCoerce;
      var toHTMLMediaElement = Unsafe_Coerce.unsafeCoerce;
      var toHTMLElement = Unsafe_Coerce.unsafeCoerce;
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var toElement = Unsafe_Coerce.unsafeCoerce;
      var toChildNode = Unsafe_Coerce.unsafeCoerce;
      var fromParentNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
      var fromNonDocumentTypeChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
      var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
      var fromHTMLMediaElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
      var fromHTMLElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
      var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
      var fromChildNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLVideoElement");
      module.exports = {
        fromHTMLMediaElement,
        fromHTMLElement,
        fromElement,
        fromNode,
        fromChildNode,
        fromNonDocumentTypeChildNode,
        fromParentNode,
        fromEventTarget,
        toHTMLMediaElement,
        toHTMLElement,
        toElement,
        toNode,
        toChildNode,
        toNonDocumentTypeChildNode,
        toParentNode,
        toEventTarget,
        width: $foreign.width,
        setWidth: $foreign.setWidth,
        height: $foreign.height,
        setHeight: $foreign.setHeight,
        videoWidth: $foreign.videoWidth,
        videoHeight: $foreign.videoHeight,
        poster: $foreign.poster,
        setPoster: $foreign.setPoster
      };
    }
  });

  // output/Web.HTML.History/foreign.js
  var require_foreign103 = __commonJS({
    "output/Web.HTML.History/foreign.js"(exports) {
      "use strict";
      exports.back = function(history) {
        return function() {
          return history.back();
        };
      };
      exports.forward = function(history) {
        return function() {
          return history.forward();
        };
      };
      exports.go = function(delta) {
        return function(history) {
          return function() {
            return history.go(delta);
          };
        };
      };
      exports.pushState = function(a) {
        return function(docTitle) {
          return function(url) {
            return function(history) {
              return function() {
                return history.pushState(a, docTitle, url);
              };
            };
          };
        };
      };
      exports.replaceState = function(a) {
        return function(docTitle) {
          return function(url) {
            return function(history) {
              return function() {
                return history.replaceState(a, docTitle, url);
              };
            };
          };
        };
      };
      exports.state = function(history) {
        return function() {
          return history.state;
        };
      };
    }
  });

  // output/Web.HTML.History/index.js
  var require_Web_HTML66 = __commonJS({
    "output/Web.HTML.History/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign103();
      var Data_Ord = require_Data12();
      var URL = function(x) {
        return x;
      };
      var DocumentTitle = function(x) {
        return x;
      };
      var Delta = function(x) {
        return x;
      };
      var newtypeURL = {
        Coercible0: function() {
          return void 0;
        }
      };
      var newtypeDocumentTitle = {
        Coercible0: function() {
          return void 0;
        }
      };
      var newtypeDelta = {
        Coercible0: function() {
          return void 0;
        }
      };
      var eqURL = {
        eq: function(x) {
          return function(y) {
            return x === y;
          };
        }
      };
      var ordURL = {
        compare: function(x) {
          return function(y) {
            return Data_Ord.compare(Data_Ord.ordString)(x)(y);
          };
        },
        Eq0: function() {
          return eqURL;
        }
      };
      var eqDocumentTitle = {
        eq: function(x) {
          return function(y) {
            return x === y;
          };
        }
      };
      var ordDocumentTitle = {
        compare: function(x) {
          return function(y) {
            return Data_Ord.compare(Data_Ord.ordString)(x)(y);
          };
        },
        Eq0: function() {
          return eqDocumentTitle;
        }
      };
      var eqDelta = {
        eq: function(x) {
          return function(y) {
            return x === y;
          };
        }
      };
      var ordDelta = {
        compare: function(x) {
          return function(y) {
            return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
          };
        },
        Eq0: function() {
          return eqDelta;
        }
      };
      module.exports = {
        DocumentTitle,
        Delta,
        URL,
        eqDocumentTitle,
        ordDocumentTitle,
        newtypeDocumentTitle,
        eqDelta,
        ordDelta,
        newtypeDelta,
        eqURL,
        ordURL,
        newtypeURL,
        back: $foreign.back,
        forward: $foreign.forward,
        go: $foreign.go,
        pushState: $foreign.pushState,
        replaceState: $foreign.replaceState,
        state: $foreign.state
      };
    }
  });

  // output/Web.HTML.Location/foreign.js
  var require_foreign104 = __commonJS({
    "output/Web.HTML.Location/foreign.js"(exports) {
      "use strict";
      exports.hash = function(location) {
        return function() {
          return location.hash;
        };
      };
      exports.setHash = function(hash) {
        return function(location) {
          return function() {
            location.hash = hash;
          };
        };
      };
      exports.host = function(location) {
        return function() {
          return location.host;
        };
      };
      exports.setHost = function(host) {
        return function(location) {
          return function() {
            location.host = host;
          };
        };
      };
      exports.hostname = function(location) {
        return function() {
          return location.hostname;
        };
      };
      exports.setHostname = function(hostname) {
        return function(location) {
          return function() {
            location.hostname = hostname;
          };
        };
      };
      exports.href = function(location) {
        return function() {
          return location.href;
        };
      };
      exports.setHref = function(href) {
        return function(location) {
          return function() {
            location.href = href;
          };
        };
      };
      exports.origin = function(location) {
        return function() {
          return location.origin;
        };
      };
      exports.setOrigin = function(origin) {
        return function(location) {
          return function() {
            location.origin = origin;
          };
        };
      };
      exports.pathname = function(location) {
        return function() {
          return location.pathname;
        };
      };
      exports.setPathname = function(pathname) {
        return function(location) {
          return function() {
            location.pathname = pathname;
          };
        };
      };
      exports.port = function(location) {
        return function() {
          return location.port;
        };
      };
      exports.setPort = function(port) {
        return function(location) {
          return function() {
            location.port = port;
          };
        };
      };
      exports.protocol = function(location) {
        return function() {
          return location.protocol;
        };
      };
      exports.setProtocol = function(protocol) {
        return function(location) {
          return function() {
            location.protocol = protocol;
          };
        };
      };
      exports.search = function(location) {
        return function() {
          return location.search;
        };
      };
      exports.setSearch = function(search) {
        return function(location) {
          return function() {
            location.search = search;
          };
        };
      };
      exports.assign = function(url) {
        return function(location) {
          return function() {
            location.assign(url);
          };
        };
      };
      exports.replace = function(url) {
        return function(location) {
          return function() {
            location.replace(url);
          };
        };
      };
      exports.reload = function(location) {
        return function() {
          location.reload();
        };
      };
    }
  });

  // output/Web.HTML.Location/index.js
  var require_Web_HTML67 = __commonJS({
    "output/Web.HTML.Location/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign104();
      module.exports = {
        hash: $foreign.hash,
        setHash: $foreign.setHash,
        host: $foreign.host,
        setHost: $foreign.setHost,
        hostname: $foreign.hostname,
        setHostname: $foreign.setHostname,
        href: $foreign.href,
        setHref: $foreign.setHref,
        origin: $foreign.origin,
        setOrigin: $foreign.setOrigin,
        pathname: $foreign.pathname,
        setPathname: $foreign.setPathname,
        port: $foreign.port,
        setPort: $foreign.setPort,
        protocol: $foreign.protocol,
        setProtocol: $foreign.setProtocol,
        search: $foreign.search,
        setSearch: $foreign.setSearch,
        assign: $foreign.assign,
        replace: $foreign.replace,
        reload: $foreign.reload
      };
    }
  });

  // output/Web.HTML.Navigator/foreign.js
  var require_foreign105 = __commonJS({
    "output/Web.HTML.Navigator/foreign.js"(exports) {
      "use strict";
      exports.language = function(navigator2) {
        return function() {
          return navigator2.language;
        };
      };
      exports.languages = function(navigator2) {
        return function() {
          return navigator2.languages;
        };
      };
      exports.onLine = function(navigator2) {
        return function() {
          return navigator2.onLine;
        };
      };
      exports.platform = function(navigator2) {
        return function() {
          return navigator2.platform;
        };
      };
      exports.userAgent = function(navigator2) {
        return function() {
          return navigator2.userAgent;
        };
      };
    }
  });

  // output/Web.HTML.Navigator/index.js
  var require_Web_HTML68 = __commonJS({
    "output/Web.HTML.Navigator/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign105();
      module.exports = {
        language: $foreign.language,
        languages: $foreign.languages,
        onLine: $foreign.onLine,
        platform: $foreign.platform,
        userAgent: $foreign.userAgent
      };
    }
  });

  // output/Web.HTML.Window/foreign.js
  var require_foreign106 = __commonJS({
    "output/Web.HTML.Window/foreign.js"(exports) {
      "use strict";
      exports.document = function(window2) {
        return function() {
          return window2.document;
        };
      };
      exports.navigator = function(window2) {
        return function() {
          return window2.navigator;
        };
      };
      exports.location = function(window2) {
        return function() {
          return window2.location;
        };
      };
      exports.history = function(window2) {
        return function() {
          return window2.history;
        };
      };
      exports.innerWidth = function(window2) {
        return function() {
          return window2.innerWidth;
        };
      };
      exports.innerHeight = function(window2) {
        return function() {
          return window2.innerHeight;
        };
      };
      exports.alert = function(str) {
        return function(window2) {
          return function() {
            window2.alert(str);
          };
        };
      };
      exports.confirm = function(str) {
        return function(window2) {
          return function() {
            return window2.confirm(str);
          };
        };
      };
      exports.moveBy = function(xDelta) {
        return function(yDelta) {
          return function(window2) {
            return function() {
              window2.moveBy(xDelta, yDelta);
            };
          };
        };
      };
      exports.moveTo = function(width) {
        return function(height) {
          return function(window2) {
            return function() {
              window2.moveTo(width, height);
            };
          };
        };
      };
      exports._open = function(url) {
        return function(name) {
          return function(features) {
            return function(window2) {
              return function() {
                return window2.open(url, name, features);
              };
            };
          };
        };
      };
      exports.outerHeight = function(window2) {
        return function() {
          return window2.outerHeight;
        };
      };
      exports.outerWidth = function(window2) {
        return function() {
          return window2.outerWidth;
        };
      };
      exports.print = function(window2) {
        return function() {
          window2.print();
        };
      };
      exports._prompt = function(str) {
        return function(defaultText) {
          return function(window2) {
            return function() {
              return window2.prompt(str, defaultText);
            };
          };
        };
      };
      exports.resizeBy = function(xDelta) {
        return function(yDelta) {
          return function(window2) {
            return function() {
              window2.resizeBy(xDelta, yDelta);
            };
          };
        };
      };
      exports.resizeTo = function(width) {
        return function(height) {
          return function(window2) {
            return function() {
              window2.resizeTo(width, height);
            };
          };
        };
      };
      exports.screenX = function(window2) {
        return function() {
          return window2.screenX;
        };
      };
      exports.screenY = function(window2) {
        return function() {
          return window2.screenY;
        };
      };
      exports.scroll = function(xCoord) {
        return function(yCoord) {
          return function(window2) {
            return function() {
              window2.scroll(xCoord, yCoord);
            };
          };
        };
      };
      exports.scrollBy = function(xCoord) {
        return function(yCoord) {
          return function(window2) {
            return function() {
              window2.scrollBy(xCoord, yCoord);
            };
          };
        };
      };
      exports.scrollX = function(window2) {
        return function() {
          return window2.scrollX;
        };
      };
      exports.scrollY = function(window2) {
        return function() {
          return window2.scrollY;
        };
      };
      exports.localStorage = function(window2) {
        return function() {
          return window2.localStorage;
        };
      };
      exports.sessionStorage = function(window2) {
        return function() {
          return window2.sessionStorage;
        };
      };
      exports.requestAnimationFrame = function(fn) {
        return function(window2) {
          return function() {
            return window2.requestAnimationFrame(fn);
          };
        };
      };
      exports.cancelAnimationFrame = function(id) {
        return function(window2) {
          return function() {
            return window2.cancelAnimationFrame(id);
          };
        };
      };
      exports.requestIdleCallback = function(opts) {
        return function(fn) {
          return function(window2) {
            return function() {
              return window2.requestIdleCallback(fn, opts);
            };
          };
        };
      };
      exports.cancelIdleCallback = function(id) {
        return function(window2) {
          return function() {
            return window2.cancelIdleCallback(id);
          };
        };
      };
      exports.parent = function(window2) {
        return function() {
          return window2.parent;
        };
      };
      exports._opener = function(window2) {
        return function() {
          return window2.opener;
        };
      };
    }
  });

  // output/Web.HTML.Window/index.js
  var require_Web_HTML69 = __commonJS({
    "output/Web.HTML.Window/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign106();
      var Data_Functor = require_Data4();
      var Data_Nullable = require_Data39();
      var Data_Ord = require_Data12();
      var Effect = require_Effect();
      var Unsafe_Coerce = require_Unsafe();
      var Web_Internal_FFI = require_Web_Internal();
      var toEventTarget = Unsafe_Coerce.unsafeCoerce;
      var promptDefault = function(msg) {
        return function(defaultText) {
          return function(window2) {
            return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_prompt"](msg)(defaultText)(window2));
          };
        };
      };
      var prompt = function(msg) {
        return function(window2) {
          return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_prompt"](msg)("")(window2));
        };
      };
      var opener = function(window2) {
        return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_opener"](window2));
      };
      var open = function(url$prime) {
        return function(name) {
          return function(features) {
            return function(window2) {
              return Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe)($foreign["_open"](url$prime)(name)(features)(window2));
            };
          };
        };
      };
      var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Window");
      var eqRequestIdleCallbackId = {
        eq: function(x) {
          return function(y) {
            return x === y;
          };
        }
      };
      var ordRequestIdleCallbackId = {
        compare: function(x) {
          return function(y) {
            return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
          };
        },
        Eq0: function() {
          return eqRequestIdleCallbackId;
        }
      };
      var eqRequestAnimationFrameId = {
        eq: function(x) {
          return function(y) {
            return x === y;
          };
        }
      };
      var ordRequestAnimationFrameId = {
        compare: function(x) {
          return function(y) {
            return Data_Ord.compare(Data_Ord.ordInt)(x)(y);
          };
        },
        Eq0: function() {
          return eqRequestAnimationFrameId;
        }
      };
      module.exports = {
        toEventTarget,
        fromEventTarget,
        open,
        prompt,
        promptDefault,
        opener,
        eqRequestAnimationFrameId,
        ordRequestAnimationFrameId,
        eqRequestIdleCallbackId,
        ordRequestIdleCallbackId,
        document: $foreign.document,
        navigator: $foreign.navigator,
        location: $foreign.location,
        history: $foreign.history,
        innerWidth: $foreign.innerWidth,
        innerHeight: $foreign.innerHeight,
        alert: $foreign.alert,
        confirm: $foreign.confirm,
        moveBy: $foreign.moveBy,
        moveTo: $foreign.moveTo,
        outerHeight: $foreign.outerHeight,
        outerWidth: $foreign.outerWidth,
        print: $foreign.print,
        resizeBy: $foreign.resizeBy,
        resizeTo: $foreign.resizeTo,
        screenX: $foreign.screenX,
        screenY: $foreign.screenY,
        scroll: $foreign.scroll,
        scrollBy: $foreign.scrollBy,
        scrollX: $foreign.scrollX,
        scrollY: $foreign.scrollY,
        localStorage: $foreign.localStorage,
        sessionStorage: $foreign.sessionStorage,
        requestAnimationFrame: $foreign.requestAnimationFrame,
        cancelAnimationFrame: $foreign.cancelAnimationFrame,
        requestIdleCallback: $foreign.requestIdleCallback,
        cancelIdleCallback: $foreign.cancelIdleCallback,
        parent: $foreign.parent
      };
    }
  });

  // output/Web.HTML/index.js
  var require_Web = __commonJS({
    "output/Web.HTML/index.js"(exports, module) {
      "use strict";
      var $foreign = require_foreign51();
      var Web_HTML_Common = require_Web_HTML();
      var Web_HTML_HTMLAnchorElement = require_Web_HTML2();
      var Web_HTML_HTMLAreaElement = require_Web_HTML3();
      var Web_HTML_HTMLAudioElement = require_Web_HTML4();
      var Web_HTML_HTMLBRElement = require_Web_HTML5();
      var Web_HTML_HTMLBaseElement = require_Web_HTML6();
      var Web_HTML_HTMLBodyElement = require_Web_HTML7();
      var Web_HTML_HTMLButtonElement = require_Web_HTML8();
      var Web_HTML_HTMLCanvasElement = require_Web_HTML9();
      var Web_HTML_HTMLDListElement = require_Web_HTML10();
      var Web_HTML_HTMLDataElement = require_Web_HTML11();
      var Web_HTML_HTMLDataListElement = require_Web_HTML12();
      var Web_HTML_HTMLDivElement = require_Web_HTML13();
      var Web_HTML_HTMLDocument = require_Web_HTML14();
      var Web_HTML_HTMLElement = require_Web_HTML15();
      var Web_HTML_HTMLEmbedElement = require_Web_HTML16();
      var Web_HTML_HTMLFieldSetElement = require_Web_HTML17();
      var Web_HTML_HTMLFormElement = require_Web_HTML18();
      var Web_HTML_HTMLHRElement = require_Web_HTML19();
      var Web_HTML_HTMLHeadElement = require_Web_HTML20();
      var Web_HTML_HTMLHeadingElement = require_Web_HTML21();
      var Web_HTML_HTMLIFrameElement = require_Web_HTML22();
      var Web_HTML_HTMLImageElement = require_Web_HTML23();
      var Web_HTML_HTMLInputElement = require_Web_HTML25();
      var Web_HTML_HTMLKeygenElement = require_Web_HTML26();
      var Web_HTML_HTMLLIElement = require_Web_HTML27();
      var Web_HTML_HTMLLabelElement = require_Web_HTML28();
      var Web_HTML_HTMLLegendElement = require_Web_HTML29();
      var Web_HTML_HTMLLinkElement = require_Web_HTML30();
      var Web_HTML_HTMLMapElement = require_Web_HTML31();
      var Web_HTML_HTMLMediaElement = require_Web_HTML32();
      var Web_HTML_HTMLMetaElement = require_Web_HTML33();
      var Web_HTML_HTMLMeterElement = require_Web_HTML34();
      var Web_HTML_HTMLModElement = require_Web_HTML35();
      var Web_HTML_HTMLOListElement = require_Web_HTML36();
      var Web_HTML_HTMLObjectElement = require_Web_HTML37();
      var Web_HTML_HTMLOptGroupElement = require_Web_HTML38();
      var Web_HTML_HTMLOptionElement = require_Web_HTML39();
      var Web_HTML_HTMLOutputElement = require_Web_HTML40();
      var Web_HTML_HTMLParagraphElement = require_Web_HTML41();
      var Web_HTML_HTMLParamElement = require_Web_HTML42();
      var Web_HTML_HTMLPreElement = require_Web_HTML43();
      var Web_HTML_HTMLProgressElement = require_Web_HTML44();
      var Web_HTML_HTMLQuoteElement = require_Web_HTML45();
      var Web_HTML_HTMLScriptElement = require_Web_HTML46();
      var Web_HTML_HTMLSelectElement = require_Web_HTML47();
      var Web_HTML_HTMLSourceElement = require_Web_HTML48();
      var Web_HTML_HTMLSpanElement = require_Web_HTML49();
      var Web_HTML_HTMLStyleElement = require_Web_HTML50();
      var Web_HTML_HTMLTableCaptionElement = require_Web_HTML51();
      var Web_HTML_HTMLTableCellElement = require_Web_HTML52();
      var Web_HTML_HTMLTableColElement = require_Web_HTML53();
      var Web_HTML_HTMLTableDataCellElement = require_Web_HTML54();
      var Web_HTML_HTMLTableElement = require_Web_HTML55();
      var Web_HTML_HTMLTableHeaderCellElement = require_Web_HTML56();
      var Web_HTML_HTMLTableRowElement = require_Web_HTML57();
      var Web_HTML_HTMLTableSectionElement = require_Web_HTML58();
      var Web_HTML_HTMLTemplateElement = require_Web_HTML59();
      var Web_HTML_HTMLTextAreaElement = require_Web_HTML60();
      var Web_HTML_HTMLTimeElement = require_Web_HTML61();
      var Web_HTML_HTMLTitleElement = require_Web_HTML62();
      var Web_HTML_HTMLTrackElement = require_Web_HTML63();
      var Web_HTML_HTMLUListElement = require_Web_HTML64();
      var Web_HTML_HTMLVideoElement = require_Web_HTML65();
      var Web_HTML_History = require_Web_HTML66();
      var Web_HTML_Location = require_Web_HTML67();
      var Web_HTML_Navigator = require_Web_HTML68();
      var Web_HTML_Window = require_Web_HTML69();
      module.exports = {
        window: $foreign.window
      };
    }
  });

  // output/Main/index.js
  var require_Main = __commonJS({
    "output/Main/index.js"(exports, module) {
      "use strict";
      var Control_Applicative = require_Control4();
      var Control_Bind = require_Control5();
      var Data_Functor = require_Data4();
      var Data_Maybe = require_Data15();
      var Data_Unit = require_Data3();
      var Effect = require_Effect();
      var Effect_Class = require_Effect2();
      var Effect_Class_Console = require_Effect_Class();
      var Framer_Motion_MotionComponent = require_Framer_Motion();
      var Framer_Motion_Types = require_Framer_Motion2();
      var MotionValue = require_MotionValue();
      var React_Basic = require_React();
      var React_Basic_DOM = require_React_Basic();
      var React_Basic_DOM_Generated = require_React_Basic_DOM2();
      var React_Basic_DOM_Internal = require_React_Basic_DOM();
      var React_Basic_Hooks = require_React_Basic2();
      var React_Basic_Hooks_Internal = require_React_Basic_Hooks();
      var Type_Equality = require_Type2();
      var Web_DOM_NonElementParentNode = require_Web_DOM();
      var Web_HTML = require_Web();
      var Web_HTML_HTMLDocument = require_Web_HTML14();
      var Web_HTML_Window = require_Web_HTML69();
      var mkExampleComponent = React_Basic_Hooks.component("FramerMotionExample")(function(v) {
        return React_Basic_Hooks_Internal.bind(React_Basic_Hooks_Internal.ixBindRender)(MotionValue.useMotionValue(0))(function(mv) {
          var box = React_Basic.element(Framer_Motion_MotionComponent.div())({
            style: React_Basic_DOM_Internal.css({
              width: "100px",
              height: "100px",
              background: "rgb(30, 60, 200)"
            }),
            initial: Framer_Motion_Types.initial()(React_Basic_DOM_Internal.css({
              borderRadius: "10%"
            })),
            animate: Framer_Motion_Types.animate()(React_Basic_DOM_Internal.css({
              borderRadius: "25%"
            }))
          });
          var text = React_Basic.element(Framer_Motion_MotionComponent.div())({
            initial: Framer_Motion_Types.initial()(React_Basic_DOM_Internal.css({
              color: "rgb(200,50,140)"
            })),
            animate: Framer_Motion_Types.animate()(React_Basic_DOM_Internal.css({
              color: "rgb(140,50,200)"
            })),
            children: [React_Basic_DOM.text("Framer Motion Example")]
          });
          return Control_Applicative.pure(React_Basic_Hooks_Internal.applicativeRender(Type_Equality.refl))(React_Basic_DOM_Generated.div_([box, text]));
        });
      });
      var injectJSX = function(id) {
        return function(jsx) {
          return function __do() {
            var parent = Data_Functor.mapFlipped(Effect.functorEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))(Web_HTML_HTMLDocument.toNonElementParentNode)();
            var elem = Web_DOM_NonElementParentNode.getElementById(id)(parent)();
            if (elem instanceof Data_Maybe.Just) {
              return React_Basic_DOM.render(jsx)(elem.value0)();
            }
            ;
            if (elem instanceof Data_Maybe.Nothing) {
              return Effect_Class_Console.error(Effect_Class.monadEffectEffect)("Could not find element with id '" + (id + "'"))();
            }
            ;
            throw new Error("Failed pattern match at Main (line 54, column 3 - line 56, column 79): " + [elem.constructor.name]);
          };
        };
      };
      var main2 = function __do() {
        var exampleComponent = mkExampleComponent();
        var jsx = exampleComponent(Data_Unit.unit);
        return injectJSX("app")(jsx)();
      };
      module.exports = {
        main: main2,
        mkExampleComponent,
        injectJSX
      };
    }
  });

  // entry.js
  var import_Main = __toModule(require_Main());
  (0, import_Main.main)();
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
